/**
 * @license uploadcare-widget v3.10.1
 * 
 * Copyright (c) 2020 Uploadcare, Inc.
 * 
 * This source code is licensed under the BSD 2-Clause License 
 * found in the LICENSE file in the root directory of this source tree.
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :
  typeof define === 'function' && define.amd ? define(['jquery'], factory) :
  (global = global || self, global.uploadcare = factory(global.$));
}(this, (function ($) { 'use strict';

  $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var isWindowDefined = function isWindowDefined() {
    return (typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object';
  };

  var isWindowDefined$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    isWindowDefined: isWindowDefined
  });

  if (isWindowDefined() && window.XDomainRequest) {
    $.ajaxTransport(function (s) {
      if (s.crossDomain && s.async) {
        if (s.timeout) {
          s.xdrTimeout = s.timeout;
          delete s.timeout;
        }

        var xdr;
        return {
          send: function send(_, complete) {
            function callback(status, statusText, responses, responseHeaders) {
              xdr.onload = xdr.onerror = xdr.ontimeout = function () {};

              xdr = undefined;
              complete(status, statusText, responses, responseHeaders);
            }

            xdr = new XDomainRequest();

            xdr.onload = function () {
              callback(200, "OK", {
                text: xdr.responseText
              }, "Content-Type: " + xdr.contentType);
            };

            xdr.onerror = function () {
              callback(404, "Not Found");
            };

            xdr.onprogress = function () {};

            xdr.ontimeout = function () {
              callback(0, "timeout");
            };

            xdr.timeout = s.xdrTimeout || Number.MAX_VALUE;
            xdr.open(s.type, s.url.replace(/^https?:/, ''));
            xdr.send(s.hasContent && s.data || null);
          },
          abort: function abort() {
            if (xdr) {
              xdr.onerror = function () {};

              xdr.abort();
            }
          }
        };
      }
    });
  }

  var version = "3.10.1";

  var fileAPI = isWindowDefined() && !!(window.File && window.FileList && window.FileReader);
  var sendFileAPI = isWindowDefined() && !!(window.FormData && fileAPI); // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/draganddrop.js

  var dragAndDrop = isWindowDefined() && function () {
    var el;
    el = document.createElement('div');
    return 'draggable' in el || 'ondragstart' in el && 'ondrop' in el;
  }(); // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/canvas.js


  var canvas = isWindowDefined() && function () {
    var el;
    el = document.createElement('canvas');
    return !!(el.getContext && el.getContext('2d'));
  }();

  var fileDragAndDrop = fileAPI && dragAndDrop;
  var iOSVersion = null; // TODO: don't access to navigator in module scope (NODE don't have navigator)

  var ios = isWindowDefined() && /^[^(]+\(iP(?:hone|od|ad);\s*(.+?)\)/.exec(navigator.userAgent);

  if (ios) {
    var ver = /OS (\d)_(\d)/.exec(ios[1]);

    if (ver) {
      iOSVersion = +ver[1] + ver[2] / 10;
    }
  }

  var Blob = false;

  try {
    if (isWindowDefined() && new window.Blob()) {
      Blob = window.Blob;
    }
  } catch (error) {}

  var url = isWindowDefined() && (window.URL || window.webkitURL || false);
  var URL = url && url.createObjectURL && url;
  var FileReader = isWindowDefined() && (window.FileReader != null ? window.FileReader.prototype.readAsArrayBuffer : undefined) && window.FileReader;

  // utils
  var log = function log() {
    var ref;

    try {
      var _ref;

      return (ref = window.console) != null ? typeof ref.log === 'function' ? (_ref = ref).log.apply(_ref, arguments) : undefined : undefined;
    } catch (error) {}
  };

  var debug = function debug() {
    var ref;

    if ((ref = window.console) != null ? ref.debug : undefined) {
      try {
        var _window$console;

        return (_window$console = window.console).debug.apply(_window$console, arguments);
      } catch (error) {}
    } else {
      return log.apply(void 0, ['Debug:'].concat(Array.prototype.slice.call(arguments)));
    }
  };

  var warn = function warn() {
    var ref;

    if ((ref = window.console) != null ? ref.warn : undefined) {
      try {
        var _window$console2;

        return (_window$console2 = window.console).warn.apply(_window$console2, arguments);
      } catch (error) {}
    } else {
      return log.apply(void 0, ['Warning:'].concat(Array.prototype.slice.call(arguments)));
    }
  };

  var messages = {};

  var warnOnce = function warnOnce(msg) {
    if (messages[msg] == null) {
      messages[msg] = true;
      return warn(msg);
    }
  };

  var indexOf = [].indexOf; // utils

  var unique = function unique(arr) {
    var item, j, len, result;
    result = [];

    for (j = 0, len = arr.length; j < len; j++) {
      item = arr[j];

      if (indexOf.call(result, item) < 0) {
        result.push(item);
      }
    }

    return result;
  };

  var defer = function defer(fn) {
    return setTimeout(fn, 0);
  };

  var gcd = function gcd(a, b) {
    var c;

    while (b) {
      c = a % b;
      a = b;
      b = c;
    }

    return a;
  };

  var once = function once(fn) {
    var called, result;
    called = false;
    result = null;
    return function () {
      if (!called) {
        result = fn.apply(this, arguments);
        called = true;
      }

      return result;
    };
  };

  var wrapToPromise = function wrapToPromise(value) {
    return $.Deferred().resolve(value).promise();
  }; // same as promise.then(), but if filter returns promise
  // it will be just passed forward without any special behavior


  var then = function then(pr, doneFilter, failFilter, progressFilter) {
    var compose, df;
    df = $.Deferred();

    compose = function compose(fn1, fn2) {
      if (fn1 && fn2) {
        return function () {
          return fn2.call(this, fn1.apply(this, arguments));
        };
      } else {
        return fn1 || fn2;
      }
    };

    pr.then(compose(doneFilter, df.resolve), compose(failFilter, df.reject), compose(progressFilter, df.notify));
    return df.promise();
  }; // Build copy of source with only specified methods.
  // Handles chaining correctly.


  var bindAll = function bindAll(source, methods) {
    var target;
    target = {};
    $.each(methods, function (i, method) {
      var fn = source[method];

      if ($.isFunction(fn)) {
        target[method] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var result = fn.apply(source, args); // Fix chaining

          if (result === source) {
            return target;
          } else {
            return result;
          }
        };
      } else {
        target[method] = fn;
      }
    });
    return target;
  };

  var upperCase = function upperCase(s) {
    return s.replace(/([A-Z])/g, '_$1').toUpperCase();
  };

  var publicCallbacks = function publicCallbacks(callbacks) {
    var result;
    result = callbacks.add;
    result.add = callbacks.add;
    result.remove = callbacks.remove;
    return result;
  };

  var uuid = function uuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0;
      var v = c === 'x' ? r : r & 3 | 8;
      return v.toString(16);
    });
  }; // splitUrlRegex("url") => ["url", "scheme", "host", "path", "query", "fragment"]


  var splitUrlRegex = /^(?:([^:/?#]+):)?(?:\/\/([^/?#]*))?([^?#]*)\??([^#]*)#?(.*)$/;
  var uuidRegex = /[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/i;
  var groupIdRegex = new RegExp("".concat(uuidRegex.source, "~[0-9]+"), 'i');
  var cdnUrlRegex = new RegExp("^/?(".concat(uuidRegex.source, ")(?:/(-/(?:[^/]+/)+)?([^/]*))?$"), 'i');

  var splitCdnUrl = function splitCdnUrl(url) {
    return cdnUrlRegex.exec(splitUrlRegex.exec(url)[3]);
  };

  var escapeRegExp = function escapeRegExp(str) {
    return str.replace(/[\\-\\[]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
  };

  var globRegexp = function globRegexp(str) {
    var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'i';
    var parts;
    parts = $.map(str.split('*'), escapeRegExp);
    return new RegExp('^' + parts.join('.+') + '$', flags);
  };

  var normalizeUrl = function normalizeUrl(url) {
    var scheme; // google.com/ → google.com
    // /google.com/ → /google.com
    // //google.com/ → http://google.com
    // http://google.com/ → http://google.com

    scheme = document.location.protocol;

    if (scheme !== 'http:') {
      scheme = 'https:';
    }

    return url.replace(/^\/\//, scheme + '//').replace(/\/+$/, '');
  };

  var fitText = function fitText(text, max) {
    if (text.length > max) {
      var head = Math.ceil((max - 3) / 2);
      var tail = Math.floor((max - 3) / 2);
      return text.slice(0, head) + '...' + text.slice(-tail);
    } else {
      return text;
    }
  };

  var fitSizeInCdnLimit = function fitSizeInCdnLimit(objSize) {
    return fitSize(objSize, [2048, 2048]);
  };

  var fitSize = function fitSize(objSize, boxSize, upscale) {
    var heightRation, widthRatio;

    if (objSize[0] > boxSize[0] || objSize[1] > boxSize[1] || upscale) {
      widthRatio = boxSize[0] / objSize[0];
      heightRation = boxSize[1] / objSize[1];

      if (!boxSize[0] || boxSize[1] && widthRatio > heightRation) {
        return [Math.round(heightRation * objSize[0]), boxSize[1]];
      } else {
        return [boxSize[0], Math.round(widthRatio * objSize[1])];
      }
    } else {
      return objSize.slice();
    }
  };

  var applyCropCoordsToInfo = function applyCropCoordsToInfo(info, crop, size, coords) {
    var downscale, h, modifiers, prefered, upscale, w, wholeImage;
    w = coords.width;
    h = coords.height;
    prefered = crop.preferedSize;
    modifiers = '';
    wholeImage = w === size[0] && h === size[1];

    if (!wholeImage) {
      modifiers += "-/crop/".concat(w, "x").concat(h, "/").concat(coords.left, ",").concat(coords.top, "/");
    }

    downscale = crop.downscale && (w > prefered[0] || h > prefered[1]);
    upscale = crop.upscale && (w < prefered[0] || h < prefered[1]);

    if (downscale || upscale) {
      var _prefered = prefered;

      var _prefered2 = _slicedToArray(_prefered, 2);

      coords.sw = _prefered2[0];
      coords.sh = _prefered2[1];
      modifiers += "-/resize/".concat(prefered.join('x'), "/");
    } else if (!wholeImage) {
      modifiers += '-/preview/';
    }

    info = $.extend({}, info);
    info.cdnUrlModifiers = modifiers;
    info.cdnUrl = "".concat(info.originalUrl).concat(modifiers || '');
    info.crop = coords;
    return info;
  };

  var fileInput = function fileInput(container, settings, fn) {
    var accept, input, _run;

    input = null;
    accept = settings.inputAcceptTypes;

    if (accept === '') {
      accept = settings.imagesOnly ? 'image/*' : null;
    }

    (_run = function run() {
      input = (settings.multiple ? $('<input type="file" multiple>') : $('<input type="file">')).attr('accept', accept).css({
        position: 'absolute',
        top: 0,
        opacity: 0,
        margin: 0,
        padding: 0,
        width: 'auto',
        height: 'auto',
        cursor: container.css('cursor')
      }).on('change', function () {
        fn(this);
        $(this).hide();
        return _run();
      });
      return container.append(input);
    })();

    return container.css({
      position: 'relative',
      overflow: 'hidden' // to make it posible to set `cursor:pointer` on button
      // http://stackoverflow.com/a/9182787/478603

    }).mousemove(function (e) {
      var left, top, width;

      var _$$offset = $(this).offset();

      left = _$$offset.left;
      top = _$$offset.top;
      width = input.width();
      return input.css({
        left: e.pageX - left - width + 10,
        top: e.pageY - top - 10
      });
    });
  };

  var fileSelectDialog = function fileSelectDialog(container, settings, fn) {
    var attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var accept;
    accept = settings.inputAcceptTypes;

    if (accept === '') {
      accept = settings.imagesOnly ? 'image/*' : null;
    }

    return $(settings.multiple ? '<input type="file" multiple>' : '<input type="file">').attr('accept', accept).attr(attributes).css({
      position: 'fixed',
      bottom: 0,
      opacity: 0
    }).on('change', function () {
      fn(this);
      return $(this).remove();
    }).appendTo(container).focus().click().hide();
  };

  var fileSizeLabels = 'B KB MB GB TB PB EB ZB YB'.split(' ');

  var readableFileSize = function readableFileSize(value) {
    var onNaN = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var postfix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
    var digits, fixedTo, i, threshold;
    value = parseInt(value, 10);

    if (isNaN(value)) {
      return onNaN;
    }

    digits = 2;
    i = 0;
    threshold = 1000 - 5 * Math.pow(10, 2 - Math.max(digits, 3));

    while (value > threshold && i < fileSizeLabels.length - 1) {
      i++;
      value /= 1024;
    }

    value += 0.000000000000001;
    fixedTo = Math.max(0, digits - Math.floor(value).toFixed(0).length); // fixed → number → string, to trim trailing zeroes

    value = Number(value.toFixed(fixedTo)); // eslint-disable-next-line no-irregular-whitespace

    return "".concat(prefix).concat(value, "\xA0").concat(fileSizeLabels[i]).concat(postfix);
  };

  var ajaxDefaults = {
    dataType: 'json',
    crossDomain: true,
    cache: false
  };

  var jsonp = function jsonp(url, type, data) {
    var settings = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    return $.ajax($.extend({
      url: url,
      type: type,
      data: data
    }, settings, ajaxDefaults)).then(function (data) {
      var text;

      if (data.error) {
        text = data.error.content || data.error;
        return $.Deferred().reject(text);
      } else {
        return data;
      }
    }, function (_, textStatus, errorThrown) {
      var text;
      text = "".concat(textStatus, " (").concat(errorThrown, ")");
      warn("JSONP unexpected error: ".concat(text, " while loading ").concat(url));
      return text;
    });
  };

  var canvasToBlob = function canvasToBlob(canvas, type, quality, callback) {
    var arr, binStr, dataURL, i, j, ref;

    if (window.HTMLCanvasElement.prototype.toBlob) {
      return canvas.toBlob(callback, type, quality);
    }

    dataURL = canvas.toDataURL(type, quality);
    dataURL = dataURL.split(',');
    binStr = window.atob(dataURL[1]);
    arr = new Uint8Array(binStr.length);

    for (i = j = 0, ref = binStr.length; j < ref; i = j += 1) {
      arr[i] = binStr.charCodeAt(i);
    }

    return callback(new window.Blob([arr], {
      type: /:(.+\/.+);/.exec(dataURL[0])[1]
    }));
  };

  var taskRunner = function taskRunner(capacity) {
    var queue, _release, run, running;

    running = 0;
    queue = [];

    _release = function release() {
      var task;

      if (queue.length) {
        task = queue.shift();
        return defer(function () {
          return task(_release);
        });
      } else {
        running -= 1;
        return running;
      }
    };

    run = function run(task) {
      if (!capacity || running < capacity) {
        running += 1;
        return defer(function () {
          return task(_release);
        });
      } else {
        return queue.push(task);
      }
    };

    return run;
  }; // This is work around bug in jquery https://github.com/jquery/jquery/issues/2013
  // action, add listener, callbacks,
  // ... .then handlers, argument index, [final state]


  var pipeTuples = [['notify', 'progress', 2], ['resolve', 'done', 0], ['reject', 'fail', 1]];

  var fixedPipe = function fixedPipe(promise) {
    for (var _len2 = arguments.length, fns = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      fns[_key2 - 1] = arguments[_key2];
    }

    return $.Deferred(function (newDefer) {
      return $.each(pipeTuples, function (i, tuple) {
        var fn; // Map tuples (progress, done, fail) to arguments (done, fail, progress)

        fn = $.isFunction(fns[tuple[2]]) && fns[tuple[2]];
        return promise[tuple[1]](function () {
          var returned;
          returned = fn && fn.apply(this, arguments);

          if (returned && $.isFunction(returned.promise)) {
            return returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
          } else {
            return newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
          }
        });
      });
    }).promise();
  };

  var indexOf$1 = [].indexOf; // settings

  var arrayOptions, constrainOptions, constraints, defaultPreviewUrlCallback, defaults, flagOptions, intOptions, integration, integrationToUserAgent, normalize, parseCrop, parseShrink, presets, script, str2arr, transformOptions, transforms, urlOptions;
  defaults = {
    // developer hooks
    live: true,
    manualStart: false,
    locale: null,
    localePluralize: null,
    localeTranslations: null,
    // widget & dialog settings
    systemDialog: false,
    crop: false,
    previewStep: false,
    imagesOnly: false,
    clearable: false,
    multiple: false,
    multipleMax: 1000,
    multipleMin: 1,
    multipleMaxStrict: false,
    imageShrink: false,
    pathValue: true,
    tabs: 'file camera url facebook gdrive gphotos dropbox instagram evernote flickr onedrive',
    preferredTypes: '',
    inputAcceptTypes: '',
    // '' means default, null means "disable accept"
    // upload settings
    doNotStore: false,
    publicKey: null,
    secureSignature: '',
    secureExpire: '',
    pusherKey: '79ae88bd931ea68464d9',
    cdnBase: 'https://ucarecdn.com',
    urlBase: 'https://upload.uploadcare.com',
    socialBase: 'https://social.uploadcare.com',
    previewProxy: null,
    previewUrlCallback: null,
    // fine tuning
    imagePreviewMaxSize: 25 * 1024 * 1024,
    multipartMinSize: 10 * 1024 * 1024,
    multipartPartSize: 5 * 1024 * 1024,
    multipartMinLastPartSize: 1024 * 1024,
    multipartConcurrency: 4,
    multipartMaxAttempts: 3,
    parallelDirectUploads: 10,
    passWindowOpen: false,
    // camera
    cameraMirrorDefault: true,
    // camera recording
    videoPreferredMimeTypes: null,
    audioBitsPerSecond: null,
    videoBitsPerSecond: null,
    // maintain settings
    scriptBase: "//ucarecdn.com/widget/".concat(version, "/uploadcare/"),
    debugUploads: false,
    integration: ''
  };
  transforms = {
    multipleMax: {
      from: 0,
      to: 1000
    }
  };
  constraints = {
    multipleMax: {
      min: 1,
      max: 1000
    }
  };
  presets = {
    tabs: {
      all: 'file camera url facebook gdrive gphotos dropbox instagram evernote flickr onedrive box vk huddle',
      default: defaults.tabs
    }
  }; // integration setting from data attributes of script tag

  script = isWindowDefined() && (document.currentScript || function () {
    var scripts;
    scripts = document.getElementsByTagName('script');
    return scripts[scripts.length - 1];
  }());

  integration = isWindowDefined() && $(script).data('integration');

  if (integration && integration != null) {
    defaults = $.extend(defaults, {
      integration: integration
    });
  }

  str2arr = function str2arr(value) {
    if (!$.isArray(value)) {
      value = $.trim(value);
      value = value ? value.split(' ') : [];
    }

    return value;
  };

  arrayOptions = function arrayOptions(settings, keys) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var i, item, j, key, len, len1, source, value;

    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      value = source = str2arr(settings[key]);

      if (hasOwnProperty.apply(presets, [key])) {
        value = [];

        for (j = 0, len1 = source.length; j < len1; j++) {
          item = source[j];

          if (hasOwnProperty.apply(presets[key], [item])) {
            value = value.concat(str2arr(presets[key][item]));
          } else {
            value.push(item);
          }
        }
      }

      settings[key] = unique(value);
    }

    return settings;
  };

  urlOptions = function urlOptions(settings, keys) {
    var i, key, len;

    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];

      if (settings[key] != null) {
        settings[key] = normalizeUrl(settings[key]);
      }
    }

    return settings;
  };

  flagOptions = function flagOptions(settings, keys) {
    var i, key, len, value;

    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];

      if (!(settings[key] != null)) {
        continue;
      }

      value = settings[key];

      if (typeof value === 'string') {
        // "", "..." -> true
        // "false", "disabled" -> false
        value = $.trim(value).toLowerCase();
        settings[key] = !(value === 'false' || value === 'disabled');
      } else {
        settings[key] = !!value;
      }
    }

    return settings;
  };

  intOptions = function intOptions(settings, keys) {
    var i, key, len;

    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];

      if (settings[key] != null) {
        settings[key] = parseInt(settings[key]);
      }
    }

    return settings;
  };

  integrationToUserAgent = function integrationToUserAgent(settings) {
    settings._userAgent = "UploadcareWidget/".concat(version, "/").concat(settings.publicKey, " (JavaScript").concat(settings.integration ? "; ".concat(settings.integration) : '', ")");
    return settings;
  };

  transformOptions = function transformOptions(settings, transforms) {
    var key, transform;

    for (key in transforms) {
      transform = transforms[key];

      if (settings[key] != null) {
        if (settings[key] === transform.from) {
          settings[key] = transform.to;
        }
      }
    }

    return settings;
  };

  constrainOptions = function constrainOptions(settings, constraints) {
    var key, max, min;

    for (key in constraints) {
      var _constraints$key = constraints[key];
      min = _constraints$key.min;
      max = _constraints$key.max;

      if (settings[key] != null) {
        settings[key] = Math.min(Math.max(settings[key], min), max);
      }
    }

    return settings;
  };

  parseCrop = function parseCrop(val) {
    var ratio, reRatio;
    reRatio = /^([0-9]+)([x:])([0-9]+)\s*(|upscale|minimum)$/i;
    ratio = reRatio.exec($.trim(val.toLowerCase())) || [];
    return {
      downscale: ratio[2] === 'x',
      upscale: !!ratio[4],
      notLess: ratio[4] === 'minimum',
      preferedSize: ratio.length ? [+ratio[1], +ratio[3]] : undefined
    };
  };

  parseShrink = function parseShrink(val) {
    var reShrink, shrink, size;
    reShrink = /^([0-9]+)x([0-9]+)(?:\s+(\d{1,2}|100)%)?$/i;
    shrink = reShrink.exec($.trim(val.toLowerCase())) || [];

    if (!shrink.length) {
      return false;
    }

    size = shrink[1] * shrink[2];

    if (size > 5000000) {
      // ios max canvas square
      warnOnce('Shrinked size can not be larger than 5MP. ' + "You have set ".concat(shrink[1], "x").concat(shrink[2], " (") + "".concat(Math.ceil(size / 1000 / 100) / 10, "MP)."));
      return false;
    }

    return {
      quality: shrink[3] ? shrink[3] / 100 : undefined,
      size: size
    };
  };

  defaultPreviewUrlCallback = function defaultPreviewUrlCallback(url, info) {
    var addAmpersand, addName, addQuery, queryPart;

    if (!this.previewProxy) {
      return url;
    }

    addQuery = !/\?/.test(this.previewProxy);
    addName = addQuery || !/=$/.test(this.previewProxy);
    addAmpersand = !addQuery && !/[&?=]$/.test(this.previewProxy);
    queryPart = encodeURIComponent(url);

    if (addName) {
      queryPart = 'url=' + queryPart;
    }

    if (addAmpersand) {
      queryPart = '&' + queryPart;
    }

    if (addQuery) {
      queryPart = '?' + queryPart;
    }

    return this.previewProxy + queryPart;
  };

  normalize = function normalize(settings) {
    var skydriveIndex;
    arrayOptions(settings, ['tabs', 'preferredTypes', 'videoPreferredMimeTypes']);
    urlOptions(settings, ['cdnBase', 'socialBase', 'urlBase', 'scriptBase']);
    flagOptions(settings, ['doNotStore', 'imagesOnly', 'multiple', 'clearable', 'pathValue', 'previewStep', 'systemDialog', 'debugUploads', 'multipleMaxStrict', 'cameraMirrorDefault']);
    intOptions(settings, ['multipleMax', 'multipleMin', 'multipartMinSize', 'multipartPartSize', 'multipartMinLastPartSize', 'multipartConcurrency', 'multipartMaxAttempts', 'parallelDirectUploads']);
    transformOptions(settings, transforms);
    constrainOptions(settings, constraints);
    integrationToUserAgent(settings);

    if (settings.crop !== false && !$.isArray(settings.crop)) {
      if (/^(disabled?|false|null)$/i.test(settings.crop)) {
        settings.crop = false;
      } else if ($.isPlainObject(settings.crop)) {
        // old format
        settings.crop = [settings.crop];
      } else {
        settings.crop = $.map(('' + settings.crop).split(','), parseCrop);
      }
    }

    if (settings.imageShrink && !$.isPlainObject(settings.imageShrink)) {
      settings.imageShrink = parseShrink(settings.imageShrink);
    }

    if (settings.crop || settings.multiple) {
      settings.previewStep = true;
    }

    if (!sendFileAPI) {
      settings.systemDialog = false;
    }

    if (settings.validators) {
      settings.validators = settings.validators.slice();
    }

    if (settings.previewProxy && !settings.previewUrlCallback) {
      settings.previewUrlCallback = defaultPreviewUrlCallback;
    }

    skydriveIndex = settings.tabs.indexOf('skydrive');

    if (skydriveIndex !== -1) {
      settings.tabs[skydriveIndex] = 'onedrive';
    }

    return settings;
  }; // global variables only


  var globals = function globals() {
    var key, scriptSettings, value;
    scriptSettings = {};

    for (key in defaults) {
      value = window["UPLOADCARE_".concat(upperCase(key))];

      if (value != null) {
        scriptSettings[key] = value;
      }
    }

    return scriptSettings;
  }; // Defaults + global variables + global overrides (once from uploadcare.start)
  // Not publicly-accessible


  var common = once(function (settings, ignoreGlobals) {
    var result;

    if (!ignoreGlobals) {
      defaults = $.extend(defaults, globals());
    }

    result = normalize($.extend(defaults, settings || {}));
    waitForSettings.fire(result);
    return result;
  }); // Defaults + global variables + global overrides + local overrides

  var build = function build(settings) {
    var result;
    result = $.extend({}, common());

    if (!$.isEmptyObject(settings)) {
      result = normalize($.extend(result, settings));
    }

    return result;
  };

  var waitForSettings = isWindowDefined() && $.Callbacks('once memory');

  var CssCollector = /*#__PURE__*/function () {
    function CssCollector() {
      _classCallCheck(this, CssCollector);

      this.urls = [];
      this.styles = [];
    }

    _createClass(CssCollector, [{
      key: "addUrl",
      value: function addUrl(url) {
        if (!/^https?:\/\//i.test(url)) {
          throw new Error('Embedded urls should be absolute. ' + url);
        }

        if (!(indexOf$1.call(this.urls, url) >= 0)) {
          return this.urls.push(url);
        }
      }
    }, {
      key: "addStyle",
      value: function addStyle(style) {
        return this.styles.push(style);
      }
    }]);

    return CssCollector;
  }();

  var trackLoading = function trackLoading(image, src) {
    var def;
    def = $.Deferred();

    if (src) {
      image.src = src;
    }

    if (image.complete) {
      def.resolve(image);
    } else {
      $(image).one('load', function () {
        return def.resolve(image);
      });
      $(image).one('error', function () {
        return def.reject(image);
      });
    }

    return def.promise();
  };

  var imageLoader = function imageLoader(image) {
    // if argument is an array, treat as
    // load(['1.jpg', '2.jpg'])
    if ($.isArray(image)) {
      return $.when.apply(null, $.map(image, imageLoader));
    }

    if (image.src) {
      return trackLoading(image);
    } else {
      return trackLoading(new window.Image(), image);
    }
  };

  var videoLoader = function videoLoader(src) {
    var def = $.Deferred();
    $('<video/>').on('loadeddata', def.resolve).on('error', def.reject).attr('src', src).get(0).load();
    return def.promise();
  };

  var testImageSrc = 'data:image/jpg;base64,' + '/9j/4AAQSkZJRgABAQEASABIAAD/4QA6RXhpZgAATU0AKgAAAAgAAwESAAMAAAABAAYAAAEo' + 'AAMAAAABAAIAAAITAAMAAAABAAEAAAAAAAD/2wBDAP//////////////////////////////' + '////////////////////////////////////////////////////////wAALCAABAAIBASIA' + '/8QAJgABAAAAAAAAAAAAAAAAAAAAAxABAAAAAAAAAAAAAAAAAAAAAP/aAAgBAQAAPwBH/9k=';
  var isApplied;

  var isBrowserApplyExif = function isBrowserApplyExif() {
    var df = $.Deferred();

    if (isApplied !== undefined) {
      df.resolve(isApplied);
    } else {
      var image = new window.Image();

      image.onload = function () {
        isApplied = image.naturalWidth < image.naturalHeight;
        image.src = '//:0';
        df.resolve(isApplied);
      };

      image.src = testImageSrc;
    }

    return df.promise();
  };

  var DataView = isWindowDefined() && window.DataView;
  var runner = taskRunner(1);

  var shrinkFile = function shrinkFile(file, settings) {
    var df; // in -> file
    // out <- blob

    df = $.Deferred();

    if (!(URL && DataView && Blob)) {
      return df.reject('support');
    } // start = new Date()


    runner(function (release) {
      var op; // console.log('delayed: ' + (new Date() - start))

      df.always(release); // start = new Date()

      op = imageLoader(URL.createObjectURL(file));
      op.always(function (img) {
        return URL.revokeObjectURL(img.src);
      });
      op.fail(function () {
        return df.reject('not image');
      });
      return op.done(function (img) {
        // console.log('load: ' + (new Date() - start))
        df.notify(0.1);
        var exifOp = $.when(getExif(file), isBrowserApplyExif()).always(function (exif, isExifApplied) {
          var e, isJPEG;
          df.notify(0.2);
          isJPEG = exifOp.state() === 'resolved'; // start = new Date()

          op = shrinkImage(img, settings);
          op.progress(function (progress) {
            return df.notify(0.2 + progress * 0.6);
          });
          op.fail(df.reject);
          op.done(function (canvas) {
            var format, quality; // console.log('shrink: ' + (new Date() - start))
            // start = new Date()

            format = 'image/jpeg';
            quality = settings.quality || 0.8;

            if (!isJPEG && hasTransparency(canvas)) {
              format = 'image/png';
              quality = undefined;
            }

            return canvasToBlob(canvas, format, quality, function (blob) {
              canvas.width = canvas.height = 1;
              df.notify(0.9); // console.log('to blob: ' + (new Date() - start))

              if (exif) {
                if (isExifApplied) {
                  setExifOrientation(exif, 1);
                }

                op = replaceJpegChunk(blob, 0xe1, [exif.buffer]);
                op.done(df.resolve);
                return op.fail(function () {
                  return df.resolve(blob);
                });
              } else {
                return df.resolve(blob);
              }
            });
          });
          e = null; // free reference

          return e;
        });
        return exifOp;
      });
    });
    return df.promise();
  };

  var shrinkImage = function shrinkImage(img, settings) {
    var cx, df, h, maxSize, maxSquare, originalW, ratio, _run, runNative, sH, sW, step, w; // in -> image
    // out <- canvas


    df = $.Deferred();
    step = 0.71; // sohuld be > sqrt(0.5)

    if (img.width * step * img.height * step < settings.size) {
      return df.reject('not required');
    }

    sW = originalW = img.width;
    sH = img.height;
    ratio = sW / sH;
    w = Math.floor(Math.sqrt(settings.size * ratio));
    h = Math.floor(settings.size / Math.sqrt(settings.size * ratio));
    maxSquare = 5000000; // ios max canvas square

    maxSize = 4096; // ie max canvas dimensions

    _run = function run() {
      if (sW <= w) {
        df.resolve(img);
        return;
      }

      return defer(function () {
        var canvas;
        sW = Math.round(sW * step);
        sH = Math.round(sH * step);

        if (sW * step < w) {
          sW = w;
          sH = h;
        }

        if (sW * sH > maxSquare) {
          sW = Math.floor(Math.sqrt(maxSquare * ratio));
          sH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio));
        }

        if (sW > maxSize) {
          sW = maxSize;
          sH = Math.round(sW / ratio);
        }

        if (sH > maxSize) {
          sH = maxSize;
          sW = Math.round(ratio * sH);
        }

        canvas = document.createElement('canvas');
        canvas.width = sW;
        canvas.height = sH;
        canvas.getContext('2d').drawImage(img, 0, 0, sW, sH);
        img.src = '//:0'; // for image

        img.width = img.height = 1; // for canvas

        img = canvas;
        df.notify((originalW - sW) / (originalW - w));
        return _run();
      });
    };

    runNative = function runNative() {
      var canvas, cx;
      canvas = document.createElement('canvas');
      canvas.width = w;
      canvas.height = h;
      cx = canvas.getContext('2d');
      cx.imageSmoothingQuality = 'high';
      cx.drawImage(img, 0, 0, w, h);
      img.src = '//:0'; // for image

      img.width = img.height = 1; // for canvas

      return df.resolve(canvas);
    };

    cx = document.createElement('canvas').getContext('2d');

    if ('imageSmoothingQuality' in cx) {
      runNative();
    } else {
      _run();
    }

    return df.promise();
  };

  var drawFileToCanvas = function drawFileToCanvas(file, mW, mH, bg, maxSource) {
    var df, op; // in -> file
    // out <- canvas

    df = $.Deferred();

    if (!URL) {
      return df.reject('support');
    }

    op = imageLoader(URL.createObjectURL(file));
    op.always(function (img) {
      return URL.revokeObjectURL(img.src);
    });
    op.fail(function () {
      return df.reject('not image');
    });
    op.done(function (img) {
      df.always(function () {
        img.src = '//:0';
      });

      if (maxSource && img.width * img.height > maxSource) {
        return df.reject('max source');
      }

      return $.when(getExif(file), isBrowserApplyExif()).always(function (exif, isExifApplied) {
        var orientation = isExifApplied ? 1 : parseExifOrientation(exif) || 1;
        var swap = orientation > 4;
        var sSize = swap ? [img.height, img.width] : [img.width, img.height];

        var _fitSize = fitSize(sSize, [mW, mH]),
            _fitSize2 = _slicedToArray(_fitSize, 2),
            dW = _fitSize2[0],
            dH = _fitSize2[1];

        var trns = [[1, 0, 0, 1, 0, 0], [-1, 0, 0, 1, dW, 0], [-1, 0, 0, -1, dW, dH], [1, 0, 0, -1, 0, dH], [0, 1, 1, 0, 0, 0], [0, 1, -1, 0, dW, 0], [0, -1, -1, 0, dW, dH], [0, -1, 1, 0, 0, dH]][orientation - 1];

        if (!trns) {
          return df.reject('bad image');
        }

        var canvas = document.createElement('canvas');
        canvas.width = dW;
        canvas.height = dH;
        var ctx = canvas.getContext('2d');
        ctx.transform.apply(ctx, trns);

        if (swap) {
          var _ref = [dH, dW];
          dW = _ref[0];
          dH = _ref[1];
        }

        if (bg) {
          ctx.fillStyle = bg;
          ctx.fillRect(0, 0, dW, dH);
        }

        ctx.drawImage(img, 0, 0, dW, dH);
        return df.resolve(canvas, sSize);
      });
    });
    return df.promise();
  }; // Util functions


  var readJpegChunks = function readJpegChunks(file) {
    var df, pos, readNext, readNextChunk, readToView;

    readToView = function readToView(file, cb) {
      var reader;
      reader = new FileReader();

      reader.onload = function () {
        return cb(new DataView(reader.result));
      };

      reader.onerror = function (e) {
        return df.reject('reader', e);
      };

      return reader.readAsArrayBuffer(file);
    };

    readNext = function readNext() {
      return readToView(file.slice(pos, pos + 128), function (view) {
        var i, j, ref;

        for (i = j = 0, ref = view.byteLength; ref >= 0 ? j < ref : j > ref; i = ref >= 0 ? ++j : --j) {
          if (view.getUint8(i) === 0xff) {
            pos += i;
            break;
          }
        }

        return readNextChunk();
      });
    };

    readNextChunk = function readNextChunk() {
      var startPos;
      startPos = pos; // todo fix
      // eslint-disable-next-line no-return-assign

      return readToView(file.slice(pos, pos += 4), function (view) {
        var length, marker;

        if (view.byteLength !== 4 || view.getUint8(0) !== 0xff) {
          return df.reject('corrupted');
        }

        marker = view.getUint8(1);

        if (marker === 0xda) {
          // Start Of Scan
          // console.log('read jpeg chunks: ' + (new Date() - start))
          return df.resolve();
        }

        length = view.getUint16(2) - 2; // eslint-disable-next-line no-return-assign

        return readToView(file.slice(pos, pos += length), function (view) {
          if (view.byteLength !== length) {
            return df.reject('corrupted');
          }

          df.notify(startPos, length, marker, view);
          return readNext();
        });
      });
    };

    df = $.Deferred();

    if (!(FileReader && DataView)) {
      return df.reject('support');
    } // start = new Date()


    pos = 2;
    readToView(file.slice(0, 2), function (view) {
      if (view.getUint16(0) !== 0xffd8) {
        return df.reject('not jpeg');
      }

      return readNext();
    });
    return df.promise();
  };

  var replaceJpegChunk = function replaceJpegChunk(blob, marker, chunks) {
    var df, oldChunkLength, oldChunkPos, op;
    df = $.Deferred();
    oldChunkPos = [];
    oldChunkLength = [];
    op = readJpegChunks(blob);
    op.fail(df.reject);
    op.progress(function (pos, length, oldMarker) {
      if (oldMarker === marker) {
        oldChunkPos.push(pos);
        return oldChunkLength.push(length);
      }
    });
    op.done(function () {
      var chunk, i, intro, j, k, len, newChunks, pos, ref;
      newChunks = [blob.slice(0, 2)];

      for (j = 0, len = chunks.length; j < len; j++) {
        chunk = chunks[j];
        intro = new DataView(new ArrayBuffer(4));
        intro.setUint16(0, 0xff00 + marker);
        intro.setUint16(2, chunk.byteLength + 2);
        newChunks.push(intro.buffer);
        newChunks.push(chunk);
      }

      pos = 2;

      for (i = k = 0, ref = oldChunkPos.length; ref >= 0 ? k < ref : k > ref; i = ref >= 0 ? ++k : --k) {
        if (oldChunkPos[i] > pos) {
          newChunks.push(blob.slice(pos, oldChunkPos[i]));
        }

        pos = oldChunkPos[i] + oldChunkLength[i] + 4;
      }

      newChunks.push(blob.slice(pos, blob.size));
      return df.resolve(new Blob(newChunks, {
        type: blob.type
      }));
    });
    return df.promise();
  };

  var getExif = function getExif(file) {
    var exif, op;
    exif = null;
    op = readJpegChunks(file);
    op.progress(function (pos, l, marker, view) {
      if (!exif && marker === 0xe1) {
        if (view.byteLength >= 14) {
          if (view.getUint32(0) === 0x45786966 && view.getUint16(4) === 0) {
            exif = view;
            return exif;
          }
        }
      }
    });
    return op.then(function () {
      return exif;
    }, function (reason) {
      return $.Deferred().reject(exif, reason);
    });
  };

  var setExifOrientation = function setExifOrientation(exif, orientation) {
    findExifOrientation(exif, function (offset, little) {
      return exif.setUint16(offset, orientation, little);
    });
  };

  var parseExifOrientation = function parseExifOrientation(exif) {
    return findExifOrientation(exif, function (offset, little) {
      return exif.getUint16(offset, little);
    });
  };

  var findExifOrientation = function findExifOrientation(exif, exifCallback) {
    var count, j, little, offset, ref;

    if (!exif || exif.byteLength < 14 || exif.getUint32(0) !== 0x45786966 || exif.getUint16(4) !== 0) {
      return null;
    }

    if (exif.getUint16(6) === 0x4949) {
      little = true;
    } else if (exif.getUint16(6) === 0x4d4d) {
      little = false;
    } else {
      return null;
    }

    if (exif.getUint16(8, little) !== 0x002a) {
      return null;
    }

    offset = 8 + exif.getUint32(10, little);
    count = exif.getUint16(offset - 2, little);

    for (j = 0, ref = count; ref >= 0 ? j < ref : j > ref; ref >= 0 ? ++j : --j) {
      if (exif.byteLength < offset + 10) {
        return null;
      }

      if (exif.getUint16(offset, little) === 0x0112) {
        return exifCallback(offset + 8, little);
      }

      offset += 12;
    }

    return null;
  };

  var hasTransparency = function hasTransparency(img) {
    var canvas, ctx, data, i, j, pcsn, ref;
    pcsn = 50;
    canvas = document.createElement('canvas');
    canvas.width = canvas.height = pcsn;
    ctx = canvas.getContext('2d');
    ctx.drawImage(img, 0, 0, pcsn, pcsn);
    data = ctx.getImageData(0, 0, pcsn, pcsn).data;
    canvas.width = canvas.height = 1;

    for (i = j = 3, ref = data.length; j < ref; i = j += 4) {
      if (data[i] < 254) {
        return true;
      }
    }

    return false;
  };

  // progressState: one of 'error', 'ready', 'uploading', 'uploaded'
  // internal api
  //   __notifyApi: file upload in progress
  //   __resolveApi: file is ready
  //   __rejectApi: file failed on any stage
  //   __completeUpload: file uploaded, info required

  var BaseFile = /*#__PURE__*/function () {
    function BaseFile(param, settings1) {
      var sourceInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      _classCallCheck(this, BaseFile);

      var base;
      this.settings = settings1;
      this.sourceInfo = sourceInfo;
      this.fileId = null;
      this.fileName = null;
      this.sanitizedName = null;
      this.fileSize = null;
      this.isStored = null;
      this.cdnUrlModifiers = null;
      this.isImage = null;
      this.imageInfo = null;
      this.mimeType = null;
      this.s3Bucket = null;
      (base = this.sourceInfo).source || (base.source = this.sourceName);

      this.__setupValidation();

      this.__initApi();
    }

    _createClass(BaseFile, [{
      key: "__startUpload",
      value: function __startUpload() {
        return $.Deferred().resolve();
      }
    }, {
      key: "__completeUpload",
      value: function __completeUpload() {
        var _this = this;

        var _check, logger, ncalls, timeout; // Update info until @apiDeferred resolved.


        ncalls = 0;

        if (this.settings.debugUploads) {
          debug('Load file info.', this.fileId, this.settings.publicKey);
          logger = setInterval(function () {
            return debug('Still waiting for file ready.', ncalls, _this.fileId, _this.settings.publicKey);
          }, 5000);
          this.apiDeferred.done(function () {
            return debug('File uploaded.', ncalls, _this.fileId, _this.settings.publicKey);
          }).always(function () {
            return clearInterval(logger);
          });
        }

        timeout = 100;
        return (_check = function check() {
          if (_this.apiDeferred.state() === 'pending') {
            ncalls += 1;
            return _this.__updateInfo().done(function () {
              setTimeout(_check, timeout);
              timeout += 50;
              return timeout;
            });
          }
        })();
      }
    }, {
      key: "__updateInfo",
      value: function __updateInfo() {
        var _this2 = this;

        return jsonp("".concat(this.settings.urlBase, "/info/"), 'GET', {
          jsonerrors: 1,
          file_id: this.fileId,
          pub_key: this.settings.publicKey,
          // Assume that we have all other info if isImage is set to something
          // other than null and we only waiting for is_ready flag.
          wait_is_ready: +(this.isImage === null)
        }, {
          headers: {
            'X-UC-User-Agent': this.settings._userAgent
          }
        }).fail(function (reason) {
          if (_this2.settings.debugUploads) {
            log("Can't load file info. Probably removed.", _this2.fileId, _this2.settings.publicKey, reason);
          }

          return _this2.__rejectApi('info');
        }).done(this.__handleFileData.bind(this));
      }
    }, {
      key: "__handleFileData",
      value: function __handleFileData(data) {
        this.fileName = data.original_filename;
        this.sanitizedName = data.filename;
        this.fileSize = data.size;
        this.isImage = data.is_image;
        this.imageInfo = data.image_info;
        this.mimeType = data.mime_type;
        this.isStored = data.is_stored;
        this.s3Bucket = data.s3_bucket;

        if (data.default_effects) {
          this.cdnUrlModifiers = '-/' + data.default_effects;
        }

        if (this.s3Bucket && this.cdnUrlModifiers) {
          this.__rejectApi('baddata');
        }

        this.__runValidators();

        if (data.is_ready) {
          return this.__resolveApi();
        }
      } // Retrieve info

    }, {
      key: "__progressInfo",
      value: function __progressInfo() {
        var ref;
        return {
          state: this.__progressState,
          uploadProgress: this.__progress,
          progress: (ref = this.__progressState) === 'ready' || ref === 'error' ? 1 : this.__progress * 0.9,
          incompleteFileInfo: this.__fileInfo()
        };
      }
    }, {
      key: "__fileInfo",
      value: function __fileInfo() {
        var urlBase;

        if (this.s3Bucket) {
          urlBase = "https://".concat(this.s3Bucket, ".s3.amazonaws.com/").concat(this.fileId, "/").concat(this.sanitizedName);
        } else {
          urlBase = "".concat(this.settings.cdnBase, "/").concat(this.fileId, "/");
        }

        return {
          uuid: this.fileId,
          name: this.fileName,
          size: this.fileSize,
          isStored: this.isStored,
          isImage: !this.s3Bucket && this.isImage,
          originalImageInfo: this.imageInfo,
          mimeType: this.mimeType,
          originalUrl: this.fileId ? urlBase : null,
          cdnUrl: this.fileId ? "".concat(urlBase).concat(this.cdnUrlModifiers || '') : null,
          cdnUrlModifiers: this.cdnUrlModifiers,
          sourceInfo: this.sourceInfo
        };
      } // Validators

    }, {
      key: "__setupValidation",
      value: function __setupValidation() {
        this.validators = this.settings.validators || this.settings.__validators || [];

        if (this.settings.imagesOnly) {
          return this.validators.push(function (info) {
            if (info.isImage === false) {
              throw new Error('image');
            }
          });
        }
      }
    }, {
      key: "__runValidators",
      value: function __runValidators() {
        var err, i, info, len, ref, results, v;
        info = this.__fileInfo();

        try {
          ref = this.validators;
          results = [];

          for (i = 0, len = ref.length; i < len; i++) {
            v = ref[i];
            results.push(v(info));
          }

          return results;
        } catch (error) {
          err = error;
          return this.__rejectApi(err.message);
        }
      } // Internal API control

    }, {
      key: "__initApi",
      value: function __initApi() {
        this.apiDeferred = $.Deferred();
        this.__progressState = 'uploading';
        this.__progress = 0;
        return this.__notifyApi();
      }
    }, {
      key: "__notifyApi",
      value: function __notifyApi() {
        return this.apiDeferred.notify(this.__progressInfo());
      }
    }, {
      key: "__rejectApi",
      value: function __rejectApi(err) {
        this.__progressState = 'error';

        this.__notifyApi();

        return this.apiDeferred.reject(err, this.__fileInfo());
      }
    }, {
      key: "__resolveApi",
      value: function __resolveApi() {
        this.__progressState = 'ready';

        this.__notifyApi();

        return this.apiDeferred.resolve(this.__fileInfo());
      }
    }, {
      key: "__cancel",
      value: function __cancel() {
        return this.__rejectApi('user');
      }
    }, {
      key: "__extendApi",
      value: function __extendApi(api) {
        var _this3 = this;

        api.cancel = this.__cancel.bind(this);

        api.pipe = api.then = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          // 'pipe' is alias to 'then' from jQuery 1.8
          return _this3.__extendApi(fixedPipe.apply(void 0, [api].concat(args)));
        };

        return api; // extended promise
      }
    }, {
      key: "promise",
      value: function promise() {
        var _this4 = this;

        var op;

        if (!this.__apiPromise) {
          this.__apiPromise = this.__extendApi(this.apiDeferred.promise());

          this.__runValidators();

          if (this.apiDeferred.state() === 'pending') {
            op = this.__startUpload();
            op.done(function () {
              _this4.__progressState = 'uploaded';
              _this4.__progress = 1;

              _this4.__notifyApi();

              return _this4.__completeUpload();
            });
            op.progress(function (progress) {
              if (progress > _this4.__progress) {
                _this4.__progress = progress;
                return _this4.__notifyApi();
              }
            });
            op.fail(function () {
              return _this4.__rejectApi('upload');
            });
            this.apiDeferred.always(op.reject);
          }
        }

        return this.__apiPromise;
      }
    }]);

    return BaseFile;
  }();

  var _directRunner = null;

  var ObjectFile = /*#__PURE__*/function (_BaseFile) {
    _inherits(ObjectFile, _BaseFile);

    var _super = _createSuper(ObjectFile);

    function ObjectFile(__file) {
      var _this;

      _classCallCheck(this, ObjectFile);

      _this = _super.apply(this, arguments);
      _this.__file = __file;
      _this.fileName = _this.__file.name || 'original';

      _this.__notifyApi();

      return _this;
    }

    _createClass(ObjectFile, [{
      key: "setFile",
      value: function setFile(file) {
        if (file) {
          this.__file = file;
        }

        this.sourceInfo.file = this.__file;

        if (!this.__file) {
          return;
        }

        this.fileSize = this.__file.size;
        this.fileType = this.__file.type || 'application/octet-stream';

        if (this.settings.debugUploads) {
          debug('Use local file.', this.fileName, this.fileType, this.fileSize);
        }

        this.__runValidators();

        return this.__notifyApi();
      }
    }, {
      key: "__startUpload",
      value: function __startUpload() {
        var _this2 = this;

        var df, ios, resizeShare;
        this.apiDeferred.always(function () {
          _this2.__file = null;
          return _this2.__file;
        });

        if (this.__file.size >= this.settings.multipartMinSize && Blob) {
          this.setFile();
          return this.multipartUpload();
        }

        ios = iOSVersion;

        if (!this.settings.imageShrink || ios && ios < 8) {
          this.setFile();
          return this.directUpload();
        } // if @settings.imageShrink


        df = $.Deferred();
        resizeShare = 0.4;
        shrinkFile(this.__file, this.settings.imageShrink).progress(function (progress) {
          return df.notify(progress * resizeShare);
        }).done(this.setFile.bind(this)).fail(function () {
          _this2.setFile();

          resizeShare = resizeShare * 0.1;
          return resizeShare;
        }).always(function () {
          df.notify(resizeShare);
          return _this2.directUpload().done(df.resolve).fail(df.reject).progress(function (progress) {
            return df.notify(resizeShare + progress * (1 - resizeShare));
          });
        });
        return df;
      }
    }, {
      key: "__autoAbort",
      value: function __autoAbort(xhr) {
        this.apiDeferred.fail(xhr.abort);
        return xhr;
      }
    }, {
      key: "directRunner",
      value: function directRunner(task) {
        if (!_directRunner) {
          _directRunner = taskRunner(this.settings.parallelDirectUploads);
        }

        return _directRunner(task);
      }
    }, {
      key: "directUpload",
      value: function directUpload() {
        var _this3 = this;

        var df;
        df = $.Deferred();

        if (!this.__file) {
          this.__rejectApi('baddata');

          return df;
        }

        if (this.fileSize > 100 * 1024 * 1024) {
          this.__rejectApi('size');

          return df;
        }

        this.directRunner(function (release) {
          var formData;
          df.always(release);

          if (_this3.apiDeferred.state() !== 'pending') {
            return;
          }

          formData = new window.FormData();
          formData.append('UPLOADCARE_PUB_KEY', _this3.settings.publicKey);
          formData.append('signature', _this3.settings.secureSignature);
          formData.append('expire', _this3.settings.secureExpire);
          formData.append('UPLOADCARE_STORE', _this3.settings.doNotStore ? '' : 'auto');
          formData.append('file', _this3.__file, _this3.fileName);
          formData.append('file_name', _this3.fileName);
          formData.append('source', _this3.sourceInfo.source);
          return _this3.__autoAbort($.ajax({
            xhr: function xhr() {
              var xhr; // Naked XHR for progress tracking

              xhr = $.ajaxSettings.xhr();

              if (xhr.upload) {
                xhr.upload.addEventListener('progress', function (e) {
                  return df.notify(e.loaded / e.total);
                }, false);
              }

              return xhr;
            },
            crossDomain: true,
            type: 'POST',
            url: "".concat(_this3.settings.urlBase, "/base/?jsonerrors=1"),
            headers: {
              'X-UC-User-Agent': _this3.settings._userAgent
            },
            contentType: false,
            // For correct boundary string
            processData: false,
            data: formData,
            dataType: 'json',
            error: df.reject,
            success: function success(data) {
              if (data != null ? data.file : undefined) {
                _this3.fileId = data.file;
                return df.resolve();
              } else {
                return df.reject();
              }
            }
          }));
        });
        return df;
      }
    }, {
      key: "multipartUpload",
      value: function multipartUpload() {
        var _this4 = this;

        var df;
        df = $.Deferred();

        if (!this.__file) {
          return df;
        }

        this.multipartStart().done(function (data) {
          return _this4.uploadParts(data.parts, data.uuid).done(function () {
            return _this4.multipartComplete(data.uuid).done(function (data) {
              _this4.fileId = data.uuid;

              _this4.__handleFileData(data);

              return df.resolve();
            }).fail(df.reject);
          }).progress(df.notify).fail(df.reject);
        }).fail(df.reject);
        return df;
      }
    }, {
      key: "multipartStart",
      value: function multipartStart() {
        var _this5 = this;

        var data;
        data = {
          UPLOADCARE_PUB_KEY: this.settings.publicKey,
          signature: this.settings.secureSignature,
          expire: this.settings.secureExpire,
          filename: this.fileName,
          source: this.sourceInfo.source,
          size: this.fileSize,
          content_type: this.fileType,
          part_size: this.settings.multipartPartSize,
          UPLOADCARE_STORE: this.settings.doNotStore ? '' : 'auto'
        };
        return this.__autoAbort(jsonp("".concat(this.settings.urlBase, "/multipart/start/?jsonerrors=1"), 'POST', data, {
          headers: {
            'X-UC-User-Agent': this.settings._userAgent
          }
        })).fail(function (reason) {
          if (_this5.settings.debugUploads) {
            return log("Can't start multipart upload.", reason, data);
          }
        });
      }
    }, {
      key: "uploadParts",
      value: function uploadParts(parts, uuid) {
        var _this6 = this;

        var df, inProgress, j, lastUpdate, progress, ref1, _submit, submittedBytes, submittedParts, updateProgress;

        progress = [];
        lastUpdate = Date.now();

        updateProgress = function updateProgress(i, loaded) {
          var j, len, total;
          progress[i] = loaded;

          if (Date.now() - lastUpdate < 250) {
            return;
          }

          lastUpdate = Date.now();
          total = 0;

          for (j = 0, len = progress.length; j < len; j++) {
            loaded = progress[j];
            total += loaded;
          }

          return df.notify(total / _this6.fileSize);
        };

        df = $.Deferred();
        inProgress = 0;
        submittedParts = 0;
        submittedBytes = 0;

        _submit = function submit() {
          var attempts, blob, bytesToSubmit, partNo, _retry;

          if (submittedBytes >= _this6.fileSize) {
            return;
          }

          bytesToSubmit = submittedBytes + _this6.settings.multipartPartSize;

          if (_this6.fileSize < bytesToSubmit + _this6.settings.multipartMinLastPartSize) {
            bytesToSubmit = _this6.fileSize;
          }

          blob = _this6.__file.slice(submittedBytes, bytesToSubmit);
          submittedBytes = bytesToSubmit;
          partNo = submittedParts;
          inProgress += 1;
          submittedParts += 1;
          attempts = 0;
          return (_retry = function retry() {
            if (_this6.apiDeferred.state() !== 'pending') {
              return;
            }

            progress[partNo] = 0;
            return _this6.__autoAbort($.ajax({
              xhr: function xhr() {
                var xhr; // Naked XHR for progress tracking

                xhr = $.ajaxSettings.xhr();
                xhr.responseType = 'text';

                if (xhr.upload) {
                  xhr.upload.addEventListener('progress', function (e) {
                    return updateProgress(partNo, e.loaded);
                  }, false);
                }

                return xhr;
              },
              url: parts[partNo],
              crossDomain: true,
              type: 'PUT',
              processData: false,
              contentType: _this6.fileType,
              data: blob,
              error: function error() {
                attempts += 1;

                if (attempts > _this6.settings.multipartMaxAttempts) {
                  if (_this6.settings.debugUploads) {
                    log("Part #".concat(partNo, " and file upload is failed."), uuid);
                  }

                  return df.reject();
                } else {
                  if (_this6.settings.debugUploads) {
                    debug("Part #".concat(partNo, "(").concat(attempts, ") upload is failed."), uuid);
                  }

                  return _retry();
                }
              },
              success: function success() {
                inProgress -= 1;

                _submit();

                if (!inProgress) {
                  return df.resolve();
                }
              }
            }));
          })();
        };

        for (j = 0, ref1 = this.settings.multipartConcurrency; ref1 >= 0 ? j < ref1 : j > ref1; ref1 >= 0 ? ++j : --j) {
          _submit();
        }

        return df;
      }
    }, {
      key: "multipartComplete",
      value: function multipartComplete(uuid) {
        var _this7 = this;

        var data;
        data = {
          UPLOADCARE_PUB_KEY: this.settings.publicKey,
          uuid: uuid
        };
        return this.__autoAbort(jsonp("".concat(this.settings.urlBase, "/multipart/complete/?jsonerrors=1"), 'POST', data, {
          headers: {
            'X-UC-User-Agent': this.settings._userAgent
          }
        })).fail(function (reason) {
          if (_this7.settings.debugUploads) {
            return log("Can't complete multipart upload.", uuid, _this7.settings.publicKey, reason);
          }
        });
      }
    }]);

    return ObjectFile;
  }(BaseFile);

  ObjectFile.prototype.sourceName = 'local';

  var InputFile = /*#__PURE__*/function (_BaseFile) {
    _inherits(InputFile, _BaseFile);

    var _super = _createSuper(InputFile);

    function InputFile(__input) {
      var _this;

      _classCallCheck(this, InputFile);

      _this = _super.apply(this, arguments);
      _this.__input = __input;
      _this.fileId = uuid();
      _this.fileName = $(_this.__input).val().split('\\').pop();

      _this.__notifyApi();

      return _this;
    }

    _createClass(InputFile, [{
      key: "__startUpload",
      value: function __startUpload() {
        var df, formParam, iframeId, targetUrl;
        df = $.Deferred();
        targetUrl = "".concat(this.settings.urlBase, "/iframe/");
        iframeId = "uploadcare--iframe-".concat(this.fileId);
        this.__iframe = $('<iframe>').attr({
          id: iframeId,
          name: iframeId
        }).css('display', 'none').appendTo('body').on('load', df.resolve).on('error', df.reject);

        formParam = function formParam(name, value) {
          return $('<input/>', {
            type: 'hidden',
            name: name,
            value: value
          });
        };

        $(this.__input).attr('name', 'file');
        this.__iframeForm = $('<form>').attr({
          method: 'POST',
          action: targetUrl,
          enctype: 'multipart/form-data',
          target: iframeId
        }).append(formParam('UPLOADCARE_PUB_KEY', this.settings.publicKey)).append(formParam('UPLOADCARE_SIGNATURE', this.settings.secureSignature)).append(formParam('UPLOADCARE_EXPIRE', this.settings.secureExpire)).append(formParam('UPLOADCARE_FILE_ID', this.fileId)).append(formParam('UPLOADCARE_STORE', this.settings.doNotStore ? '' : 'auto')).append(formParam('UPLOADCARE_SOURCE', this.sourceInfo.source)).append(this.__input).css('display', 'none').appendTo('body').submit();
        return df.always(this.__cleanUp.bind(this));
      }
    }, {
      key: "__cleanUp",
      value: function __cleanUp() {
        var ref1, ref2;

        if ((ref1 = this.__iframe) != null) {
          ref1.off('load error').remove();
        }

        if ((ref2 = this.__iframeForm) != null) {
          ref2.remove();
        }

        this.__iframe = null;
        this.__iframeForm = null;
        return this.__iframeForm;
      }
    }]);

    return InputFile;
  }(BaseFile);

  InputFile.prototype.sourceName = 'local-compat';

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var pusher = createCommonjsModule(function (module, exports) {
  // changed:
  //   Pusher.dependency_suffix = '.min'; (was '')
  //   window.WEB_SOCKET_SWF_LOCATION = "https://s3.amazonaws.com/uploadcare-static/WebSocketMainInsecure.swf"

  /*!
   * Pusher JavaScript Library v1.12.2
   * http://pusherapp.com/
   *
   * Copyright 2011, Pusher
   * Released under the MIT licence.
   */
  var isWindowDefined = isWindowDefined$1.isWindowDefined;

  (function () {
    var _Pusher, _require;

    (function () {
      _Pusher = function Pusher(app_key, options) {
        this.options = options || {};
        this.key = app_key;
        this.channels = new _Pusher.Channels();
        this.global_emitter = new _Pusher.EventsDispatcher();
        var self = this;
        this.checkAppKey();
        this.connection = new _Pusher.Connection(this.key, this.options); // Setup / teardown connection

        this.connection.bind('connected', function () {
          self.subscribeAll();
        }).bind('message', function (params) {
          var internal = params.event.indexOf('pusher_internal:') === 0;

          if (params.channel) {
            var channel;

            if (channel = self.channel(params.channel)) {
              channel.emit(params.event, params.data);
            }
          } // Emit globaly [deprecated]


          if (!internal) self.global_emitter.emit(params.event, params.data);
        }).bind('disconnected', function () {
          self.channels.disconnect();
        }).bind('error', function (err) {
          _Pusher.warn('Error', err);
        });

        _Pusher.instances.push(this);

        if (_Pusher.isReady) self.connect();
      };

      _Pusher.instances = [];
      _Pusher.prototype = {
        channel: function channel(name) {
          return this.channels.find(name);
        },
        connect: function connect() {
          this.connection.connect();
        },
        disconnect: function disconnect() {
          this.connection.disconnect();
        },
        bind: function bind(event_name, callback) {
          this.global_emitter.bind(event_name, callback);
          return this;
        },
        bind_all: function bind_all(callback) {
          this.global_emitter.bind_all(callback);
          return this;
        },
        subscribeAll: function subscribeAll() {
          var channelName;

          for (channelName in this.channels.channels) {
            if (this.channels.channels.hasOwnProperty(channelName)) {
              this.subscribe(channelName);
            }
          }
        },
        subscribe: function subscribe(channel_name) {
          var self = this;
          var channel = this.channels.add(channel_name, this);

          if (this.connection.state === 'connected') {
            channel.authorize(this.connection.socket_id, this.options, function (err, data) {
              if (err) {
                channel.emit('pusher:subscription_error', data);
              } else {
                self.send_event('pusher:subscribe', {
                  channel: channel_name,
                  auth: data.auth,
                  channel_data: data.channel_data
                });
              }
            });
          }

          return channel;
        },
        unsubscribe: function unsubscribe(channel_name) {
          this.channels.remove(channel_name);

          if (this.connection.state === 'connected') {
            this.send_event('pusher:unsubscribe', {
              channel: channel_name
            });
          }
        },
        send_event: function send_event(event_name, data, channel) {
          return this.connection.send_event(event_name, data, channel);
        },
        checkAppKey: function checkAppKey() {
          if (this.key === null || this.key === undefined) {
            _Pusher.warn('Warning', 'You must pass your app key when you instantiate Pusher.');
          }
        }
      };
      _Pusher.Util = {
        extend: function extend(target, extensions) {
          for (var property in extensions) {
            if (extensions[property] && extensions[property].constructor && extensions[property].constructor === Object) {
              target[property] = extend(target[property] || {}, extensions[property]);
            } else {
              target[property] = extensions[property];
            }
          }

          return target;
        },
        stringify: function stringify() {
          var m = ["Pusher"];

          for (var i = 0; i < arguments.length; i++) {
            if (typeof arguments[i] === "string") {
              m.push(arguments[i]);
            } else {
              if (window['JSON'] == undefined) {
                m.push(arguments[i].toString());
              } else {
                m.push(JSON.stringify(arguments[i]));
              }
            }
          }
          return m.join(" : ");
        },
        arrayIndexOf: function arrayIndexOf(array, item) {
          // MSIE doesn't have array.indexOf
          var nativeIndexOf = Array.prototype.indexOf;
          if (array == null) return -1;
          if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);

          for (i = 0, l = array.length; i < l; i++) {
            if (array[i] === item) return i;
          }

          return -1;
        }
      }; // To receive log output provide a Pusher.log function, for example
      // Pusher.log = function(m){console.log(m)}

      _Pusher.debug = function () {
        if (!_Pusher.log) return;

        _Pusher.log(_Pusher.Util.stringify.apply(this, arguments));
      };

      _Pusher.warn = function () {
        if (window.console && window.console.warn) {
          window.console.warn(_Pusher.Util.stringify.apply(this, arguments));
        } else {
          if (!_Pusher.log) return;

          _Pusher.log(_Pusher.Util.stringify.apply(this, arguments));
        }
      }; // Pusher defaults


      _Pusher.VERSION = '1.12.2';
      _Pusher.host = 'ws.pusherapp.com';
      _Pusher.ws_port = 80;
      _Pusher.wss_port = 443;
      _Pusher.channel_auth_endpoint = '/pusher/auth';
      _Pusher.cdn_http = 'http://js.pusher.com/';
      _Pusher.cdn_https = 'https://d3dy5gmtp8yhk7.cloudfront.net/';
      _Pusher.dependency_suffix = '.min';
      _Pusher.channel_auth_transport = 'ajax';
      _Pusher.activity_timeout = 120000;
      _Pusher.pong_timeout = 30000;
      _Pusher.isReady = false;

      _Pusher.ready = function () {
        _Pusher.isReady = true;

        for (var i = 0, l = _Pusher.instances.length; i < l; i++) {
          _Pusher.instances[i].connect();
        }
      };
    })();

    (function () {
      /* Abstract event binding
      Example:
      
          var MyEventEmitter = function(){};
          MyEventEmitter.prototype = new Pusher.EventsDispatcher;
      
          var emitter = new MyEventEmitter();
      
          // Bind to single event
          emitter.bind('foo_event', function(data){ alert(data)} );
      
          // Bind to all
          emitter.bind_all(function(eventName, data){ alert(data) });
      
      --------------------------------------------------------*/
      function CallbackRegistry() {
        this._callbacks = {};
      }

      CallbackRegistry.prototype.get = function (eventName) {
        return this._callbacks[this._prefix(eventName)];
      };

      CallbackRegistry.prototype.add = function (eventName, callback) {
        var prefixedEventName = this._prefix(eventName);

        this._callbacks[prefixedEventName] = this._callbacks[prefixedEventName] || [];

        this._callbacks[prefixedEventName].push(callback);
      };

      CallbackRegistry.prototype.remove = function (eventName, callback) {
        if (this.get(eventName)) {
          var index = _Pusher.Util.arrayIndexOf(this.get(eventName), callback);

          this._callbacks[this._prefix(eventName)].splice(index, 1);
        }
      };

      CallbackRegistry.prototype._prefix = function (eventName) {
        return "_" + eventName;
      };

      function EventsDispatcher(failThrough) {
        this.callbacks = new CallbackRegistry();
        this.global_callbacks = []; // Run this function when dispatching an event when no callbacks defined

        this.failThrough = failThrough;
      }

      EventsDispatcher.prototype.bind = function (eventName, callback) {
        this.callbacks.add(eventName, callback);
        return this; // chainable
      };

      EventsDispatcher.prototype.unbind = function (eventName, callback) {
        this.callbacks.remove(eventName, callback);
        return this;
      };

      EventsDispatcher.prototype.emit = function (eventName, data) {
        // Global callbacks
        for (var i = 0; i < this.global_callbacks.length; i++) {
          this.global_callbacks[i](eventName, data);
        } // Event callbacks


        var callbacks = this.callbacks.get(eventName);

        if (callbacks) {
          for (var i = 0; i < callbacks.length; i++) {
            callbacks[i](data);
          }
        } else if (this.failThrough) {
          this.failThrough(eventName, data);
        }

        return this;
      };

      EventsDispatcher.prototype.bind_all = function (callback) {
        this.global_callbacks.push(callback);
        return this;
      };

      _Pusher.EventsDispatcher = EventsDispatcher;
    })();

    (function () {
      /*-----------------------------------------------
        Helpers:
      -----------------------------------------------*/
      function capitalize(str) {
        return str.substr(0, 1).toUpperCase() + str.substr(1);
      }

      function safeCall(method, obj, data) {
        if (obj[method] !== undefined) {
          obj[method](data);
        }
      }
      /*-----------------------------------------------
        The State Machine
      -----------------------------------------------*/


      function Machine(initialState, transitions, stateActions) {
        _Pusher.EventsDispatcher.call(this);

        this.state = undefined;
        this.errors = []; // functions for each state

        this.stateActions = stateActions; // set up the transitions

        this.transitions = transitions;
        this.transition(initialState);
      }

      Machine.prototype.transition = function (nextState, data) {
        var prevState = this.state;
        var stateCallbacks = this.stateActions;

        if (prevState && _Pusher.Util.arrayIndexOf(this.transitions[prevState], nextState) == -1) {
          this.emit('invalid_transition_attempt', {
            oldState: prevState,
            newState: nextState
          });
          throw new Error('Invalid transition [' + prevState + ' to ' + nextState + ']');
        } // exit


        safeCall(prevState + 'Exit', stateCallbacks, data); // tween

        safeCall(prevState + 'To' + capitalize(nextState), stateCallbacks, data); // pre

        safeCall(nextState + 'Pre', stateCallbacks, data); // change state:

        this.state = nextState; // handy to bind to

        this.emit('state_change', {
          oldState: prevState,
          newState: nextState
        }); // Post:

        safeCall(nextState + 'Post', stateCallbacks, data);
      };

      Machine.prototype.is = function (state) {
        return this.state === state;
      };

      Machine.prototype.isNot = function (state) {
        return this.state !== state;
      };

      _Pusher.Util.extend(Machine.prototype, _Pusher.EventsDispatcher.prototype);

      _Pusher.Machine = Machine;
    })();

    (function () {
      /*
        A little bauble to interface with window.navigator.onLine,
        window.ononline and window.onoffline.  Easier to mock.
      */
      var NetInfo = function NetInfo() {
        var self = this;

        _Pusher.EventsDispatcher.call(this); // This is okay, as IE doesn't support this stuff anyway.


        if (window.addEventListener !== undefined) {
          window.addEventListener("online", function () {
            self.emit('online', null);
          }, false);
          window.addEventListener("offline", function () {
            self.emit('offline', null);
          }, false);
        }
      }; // Offline means definitely offline (no connection to router).
      // Inverse does NOT mean definitely online (only currently supported in Safari
      // and even there only means the device has a connection to the router).


      NetInfo.prototype.isOnLine = function () {
        if (window.navigator.onLine === undefined) {
          return true;
        } else {
          return window.navigator.onLine;
        }
      };

      _Pusher.Util.extend(NetInfo.prototype, _Pusher.EventsDispatcher.prototype);

      _Pusher.NetInfo = NetInfo;
    })();

    (function () {
      var machineTransitions = {
        'initialized': ['waiting', 'failed'],
        'waiting': ['connecting', 'permanentlyClosed'],
        'connecting': ['open', 'permanentlyClosing', 'impermanentlyClosing', 'waiting'],
        'open': ['connected', 'permanentlyClosing', 'impermanentlyClosing', 'waiting'],
        'connected': ['permanentlyClosing', 'waiting'],
        'impermanentlyClosing': ['waiting', 'permanentlyClosing'],
        'permanentlyClosing': ['permanentlyClosed'],
        'permanentlyClosed': ['waiting', 'failed'],
        'failed': ['permanentlyClosed']
      }; // Amount to add to time between connection attemtpts per failed attempt.

      var UNSUCCESSFUL_CONNECTION_ATTEMPT_ADDITIONAL_WAIT = 2000;
      var UNSUCCESSFUL_OPEN_ATTEMPT_ADDITIONAL_TIMEOUT = 2000;
      var UNSUCCESSFUL_CONNECTED_ATTEMPT_ADDITIONAL_TIMEOUT = 2000;
      var MAX_CONNECTION_ATTEMPT_WAIT = 5 * UNSUCCESSFUL_CONNECTION_ATTEMPT_ADDITIONAL_WAIT;
      var MAX_OPEN_ATTEMPT_TIMEOUT = 5 * UNSUCCESSFUL_OPEN_ATTEMPT_ADDITIONAL_TIMEOUT;
      var MAX_CONNECTED_ATTEMPT_TIMEOUT = 5 * UNSUCCESSFUL_CONNECTED_ATTEMPT_ADDITIONAL_TIMEOUT;

      function resetConnectionParameters(connection) {
        connection.connectionWait = 0;

        if (_Pusher.TransportType === 'flash') {
          // Flash needs a bit more time
          connection.openTimeout = 5000;
        } else {
          connection.openTimeout = 2000;
        }

        connection.connectedTimeout = 2000;
        connection.connectionSecure = connection.compulsorySecure;
        connection.connectionAttempts = 0;
      }

      function Connection(key, options) {
        var self = this;

        _Pusher.EventsDispatcher.call(this);

        this.options = _Pusher.Util.extend({
          encrypted: false
        }, options);
        this.netInfo = new _Pusher.NetInfo();
        this.netInfo.bind('online', function () {
          if (self._machine.is('waiting')) {
            self._machine.transition('connecting');

            updateState('connecting');
          }
        });
        this.netInfo.bind('offline', function () {
          if (self._machine.is('connected')) {
            // These are for Chrome 15, which ends up
            // having two sockets hanging around.
            self.socket.onclose = undefined;
            self.socket.onmessage = undefined;
            self.socket.onerror = undefined;
            self.socket.onopen = undefined;
            self.socket.close();
            self.socket = undefined;

            self._machine.transition('waiting');
          }
        }); // define the state machine that runs the connection

        this._machine = new _Pusher.Machine('initialized', machineTransitions, {
          initializedPre: function initializedPre() {
            self.compulsorySecure = self.options.encrypted;
            self.key = key;
            self.socket = null;
            self.socket_id = null;
            self.state = 'initialized';
          },
          waitingPre: function waitingPre() {
            if (self.connectionWait > 0) {
              self.emit('connecting_in', self.connectionWait);
            }

            if (self.netInfo.isOnLine() && self.connectionAttempts <= 4) {
              updateState('connecting');
            } else {
              updateState('unavailable');
            } // When in the unavailable state we attempt to connect, but don't
            // broadcast that fact


            if (self.netInfo.isOnLine()) {
              self._waitingTimer = setTimeout(function () {
                self._machine.transition('connecting');
              }, connectionDelay());
            }
          },
          waitingExit: function waitingExit() {
            clearTimeout(self._waitingTimer);
          },
          connectingPre: function connectingPre() {
            // Case that a user manages to get to the connecting
            // state even when offline.
            if (self.netInfo.isOnLine() === false) {
              self._machine.transition('waiting');

              updateState('unavailable');
              return;
            }

            var url = formatURL(self.key, self.connectionSecure);

            _Pusher.debug('Connecting', url);

            self.socket = new _Pusher.Transport(url); // now that the socket connection attempt has been started,
            // set up the callbacks fired by the socket for different outcomes

            self.socket.onopen = ws_onopen;
            self.socket.onclose = transitionToWaiting;
            self.socket.onerror = ws_onError; // allow time to get ws_onOpen, otherwise close socket and try again

            self._connectingTimer = setTimeout(TransitionToImpermanentlyClosing, self.openTimeout);
          },
          connectingExit: function connectingExit() {
            clearTimeout(self._connectingTimer);
            self.socket.onopen = undefined; // unbind to avoid open events that are no longer relevant
          },
          connectingToWaiting: function connectingToWaiting() {
            updateConnectionParameters(); // FUTURE: update only ssl
          },
          connectingToImpermanentlyClosing: function connectingToImpermanentlyClosing() {
            updateConnectionParameters(); // FUTURE: update only timeout
          },
          openPre: function openPre() {
            self.socket.onmessage = ws_onMessageOpen;
            self.socket.onerror = ws_onError;
            self.socket.onclose = transitionToWaiting; // allow time to get connected-to-Pusher message, otherwise close socket, try again

            self._openTimer = setTimeout(TransitionToImpermanentlyClosing, self.connectedTimeout);
          },
          openExit: function openExit() {
            clearTimeout(self._openTimer);
            self.socket.onmessage = undefined; // unbind to avoid messages that are no longer relevant
          },
          openToWaiting: function openToWaiting() {
            updateConnectionParameters();
          },
          openToImpermanentlyClosing: function openToImpermanentlyClosing() {
            updateConnectionParameters();
          },
          connectedPre: function connectedPre(socket_id) {
            self.socket_id = socket_id;
            self.socket.onmessage = ws_onMessageConnected;
            self.socket.onerror = ws_onError;
            self.socket.onclose = transitionToWaiting;
            resetConnectionParameters(self);
            self.connectedAt = new Date().getTime();
            resetActivityCheck();
          },
          connectedPost: function connectedPost() {
            updateState('connected');
          },
          connectedExit: function connectedExit() {
            stopActivityCheck();
            updateState('disconnected');
          },
          impermanentlyClosingPost: function impermanentlyClosingPost() {
            if (self.socket) {
              self.socket.onclose = transitionToWaiting;
              self.socket.close();
            }
          },
          permanentlyClosingPost: function permanentlyClosingPost() {
            if (self.socket) {
              self.socket.onclose = function () {
                resetConnectionParameters(self);

                self._machine.transition('permanentlyClosed');
              };

              self.socket.close();
            } else {
              resetConnectionParameters(self);

              self._machine.transition('permanentlyClosed');
            }
          },
          failedPre: function failedPre() {
            updateState('failed');

            _Pusher.debug('WebSockets are not available in this browser.');
          },
          permanentlyClosedPost: function permanentlyClosedPost() {
            updateState('disconnected');
          }
        });
        /*-----------------------------------------------
          -----------------------------------------------*/

        function updateConnectionParameters() {
          if (self.connectionWait < MAX_CONNECTION_ATTEMPT_WAIT) {
            self.connectionWait += UNSUCCESSFUL_CONNECTION_ATTEMPT_ADDITIONAL_WAIT;
          }

          if (self.openTimeout < MAX_OPEN_ATTEMPT_TIMEOUT) {
            self.openTimeout += UNSUCCESSFUL_OPEN_ATTEMPT_ADDITIONAL_TIMEOUT;
          }

          if (self.connectedTimeout < MAX_CONNECTED_ATTEMPT_TIMEOUT) {
            self.connectedTimeout += UNSUCCESSFUL_CONNECTED_ATTEMPT_ADDITIONAL_TIMEOUT;
          }

          if (self.compulsorySecure !== true) {
            self.connectionSecure = !self.connectionSecure;
          }

          self.connectionAttempts++;
        }

        function formatURL(key, isSecure) {
          var port = _Pusher.ws_port;
          var protocol = 'ws://'; // Always connect with SSL if the current page has
          // been loaded via HTTPS.
          //
          // FUTURE: Always connect using SSL.
          //

          if (isSecure || document.location.protocol === 'https:') {
            port = _Pusher.wss_port;
            protocol = 'wss://';
          }

          var flash = _Pusher.TransportType === "flash" ? "true" : "false";
          return protocol + _Pusher.host + ':' + port + '/app/' + key + '?protocol=5&client=js' + '&version=' + _Pusher.VERSION + '&flash=' + flash;
        } // callback for close and retry.  Used on timeouts.


        function TransitionToImpermanentlyClosing() {
          self._machine.transition('impermanentlyClosing');
        }

        function resetActivityCheck() {
          if (self._activityTimer) {
            clearTimeout(self._activityTimer);
          } // Send ping after inactivity


          self._activityTimer = setTimeout(function () {
            self.send_event('pusher:ping', {}); // Wait for pong response

            self._activityTimer = setTimeout(function () {
              self.socket.close();
            }, self.options.pong_timeout || _Pusher.pong_timeout);
          }, self.options.activity_timeout || _Pusher.activity_timeout);
        }

        function stopActivityCheck() {
          if (self._activityTimer) {
            clearTimeout(self._activityTimer);
          }
        } // Returns the delay before the next connection attempt should be made
        //
        // This function guards against attempting to connect more frequently than
        // once every second
        //


        function connectionDelay() {
          var delay = self.connectionWait;

          if (delay === 0) {
            if (self.connectedAt) {
              var t = 1000;
              var connectedFor = new Date().getTime() - self.connectedAt;

              if (connectedFor < t) {
                delay = t - connectedFor;
              }
            }
          }

          return delay;
        }
        /*-----------------------------------------------
          WebSocket Callbacks
          -----------------------------------------------*/
        // no-op, as we only care when we get pusher:connection_established


        function ws_onopen() {
          self._machine.transition('open');
        }

        function handleCloseCode(code, message) {
          // first inform the end-developer of this error
          self.emit('error', {
            type: 'PusherError',
            data: {
              code: code,
              message: message
            }
          });

          if (code === 4000) {
            // SSL only app
            self.compulsorySecure = true;
            self.connectionSecure = true;
            self.options.encrypted = true;
            TransitionToImpermanentlyClosing();
          } else if (code < 4100) {
            // Permentently close connection
            self._machine.transition('permanentlyClosing');
          } else if (code < 4200) {
            // Backoff before reconnecting
            self.connectionWait = 1000;

            self._machine.transition('waiting');
          } else if (code < 4300) {
            // Reconnect immediately
            TransitionToImpermanentlyClosing();
          } else {
            // Unknown error
            self._machine.transition('permanentlyClosing');
          }
        }

        function ws_onMessageOpen(event) {
          var params = parseWebSocketEvent(event);

          if (params !== undefined) {
            if (params.event === 'pusher:connection_established') {
              self._machine.transition('connected', params.data.socket_id);
            } else if (params.event === 'pusher:error') {
              handleCloseCode(params.data.code, params.data.message);
            }
          }
        }

        function ws_onMessageConnected(event) {
          resetActivityCheck();
          var params = parseWebSocketEvent(event);

          if (params !== undefined) {
            _Pusher.debug('Event recd', params);

            switch (params.event) {
              case 'pusher:error':
                self.emit('error', {
                  type: 'PusherError',
                  data: params.data
                });
                break;

              case 'pusher:ping':
                self.send_event('pusher:pong', {});
                break;
            }

            self.emit('message', params);
          }
        }
        /**
         * Parses an event from the WebSocket to get
         * the JSON payload that we require
         *
         * @param {MessageEvent} event  The event from the WebSocket.onmessage handler.
        **/


        function parseWebSocketEvent(event) {
          try {
            var params = JSON.parse(event.data);

            if (typeof params.data === 'string') {
              try {
                params.data = JSON.parse(params.data);
              } catch (e) {
                if (!(e instanceof SyntaxError)) {
                  throw e;
                }
              }
            }

            return params;
          } catch (e) {
            self.emit('error', {
              type: 'MessageParseError',
              error: e,
              data: event.data
            });
          }
        }

        function transitionToWaiting() {
          self._machine.transition('waiting');
        }

        function ws_onError(error) {
          // just emit error to user - socket will already be closed by browser
          self.emit('error', {
            type: 'WebSocketError',
            error: error
          });
        } // Updates the public state information exposed by connection
        //
        // This is distinct from the internal state information used by _machine
        // to manage the connection
        //


        function updateState(newState, data) {
          var prevState = self.state;
          self.state = newState; // Only emit when the state changes

          if (prevState !== newState) {
            _Pusher.debug('State changed', prevState + ' -> ' + newState);

            self.emit('state_change', {
              previous: prevState,
              current: newState
            });
            self.emit(newState, data);
          }
        }
      }

      Connection.prototype.connect = function () {
        // no WebSockets
        if (!this._machine.is('failed') && !_Pusher.Transport) {
          this._machine.transition('failed');
        } // initial open of connection
        else if (this._machine.is('initialized')) {
            resetConnectionParameters(this);

            this._machine.transition('waiting');
          } // user skipping connection wait
          else if (this._machine.is('waiting') && this.netInfo.isOnLine() === true) {
              this._machine.transition('connecting');
            } // user re-opening connection after closing it
            else if (this._machine.is("permanentlyClosed")) {
                resetConnectionParameters(this);

                this._machine.transition('waiting');
              }
      };

      Connection.prototype.send = function (data) {
        if (this._machine.is('connected')) {
          // Workaround for MobileSafari bug (see https://gist.github.com/2052006)
          var self = this;
          setTimeout(function () {
            self.socket.send(data);
          }, 0);
          return true;
        } else {
          return false;
        }
      };

      Connection.prototype.send_event = function (event_name, data, channel) {
        var payload = {
          event: event_name,
          data: data
        };
        if (channel) payload['channel'] = channel;

        _Pusher.debug('Event sent', payload);

        return this.send(JSON.stringify(payload));
      };

      Connection.prototype.disconnect = function () {
        if (this._machine.is('permanentlyClosed')) return;

        if (this._machine.is('waiting') || this._machine.is('failed')) {
          this._machine.transition('permanentlyClosed');
        } else {
          this._machine.transition('permanentlyClosing');
        }
      };

      _Pusher.Util.extend(Connection.prototype, _Pusher.EventsDispatcher.prototype);

      _Pusher.Connection = Connection;
    })();

    (function () {
      _Pusher.Channels = function () {
        this.channels = {};
      };

      _Pusher.Channels.prototype = {
        add: function add(channel_name, pusher) {
          var existing_channel = this.find(channel_name);

          if (!existing_channel) {
            var channel = _Pusher.Channel.factory(channel_name, pusher);

            this.channels[channel_name] = channel;
            return channel;
          } else {
            return existing_channel;
          }
        },
        find: function find(channel_name) {
          return this.channels[channel_name];
        },
        remove: function remove(channel_name) {
          delete this.channels[channel_name];
        },
        disconnect: function disconnect() {
          for (var channel_name in this.channels) {
            this.channels[channel_name].disconnect();
          }
        }
      };

      _Pusher.Channel = function (channel_name, pusher) {
        var self = this;

        _Pusher.EventsDispatcher.call(this, function (event_name, event_data) {
          _Pusher.debug('No callbacks on ' + channel_name + ' for ' + event_name);
        });

        this.pusher = pusher;
        this.name = channel_name;
        this.subscribed = false;
        this.bind('pusher_internal:subscription_succeeded', function (data) {
          self.onSubscriptionSucceeded(data);
        });
      };

      _Pusher.Channel.prototype = {
        // inheritable constructor
        init: function init() {},
        disconnect: function disconnect() {
          this.subscribed = false;
          this.emit("pusher_internal:disconnected");
        },
        onSubscriptionSucceeded: function onSubscriptionSucceeded(data) {
          this.subscribed = true;
          this.emit('pusher:subscription_succeeded');
        },
        authorize: function authorize(socketId, options, callback) {
          return callback(false, {}); // normal channels don't require auth
        },
        trigger: function trigger(event, data) {
          return this.pusher.send_event(event, data, this.name);
        }
      };

      _Pusher.Util.extend(_Pusher.Channel.prototype, _Pusher.EventsDispatcher.prototype);

      _Pusher.Channel.PrivateChannel = {
        authorize: function authorize(socketId, options, callback) {
          var self = this;
          var authorizer = new _Pusher.Channel.Authorizer(this, _Pusher.channel_auth_transport, options);
          return authorizer.authorize(socketId, function (err, authData) {
            if (!err) {
              self.emit('pusher_internal:authorized', authData);
            }

            callback(err, authData);
          });
        }
      };
      _Pusher.Channel.PresenceChannel = {
        init: function init() {
          this.members = new Members(this); // leeches off channel events
        },
        onSubscriptionSucceeded: function onSubscriptionSucceeded(data) {
          this.subscribed = true; // We override this because we want the Members obj to be responsible for
          // emitting the pusher:subscription_succeeded.  It will do this after it has done its work.
        }
      };

      var Members = function Members(channel) {
        var self = this;

        var reset = function reset() {
          this._members_map = {};
          this.count = 0;
          this.me = null;
        };

        reset.call(this);
        channel.bind('pusher_internal:authorized', function (authorizedData) {
          var channelData = JSON.parse(authorizedData.channel_data);
          channel.bind("pusher_internal:subscription_succeeded", function (subscriptionData) {
            self._members_map = subscriptionData.presence.hash;
            self.count = subscriptionData.presence.count;
            self.me = self.get(channelData.user_id);
            channel.emit('pusher:subscription_succeeded', self);
          });
        });
        channel.bind('pusher_internal:member_added', function (data) {
          if (self.get(data.user_id) === null) {
            // only incr if user_id does not already exist
            self.count++;
          }

          self._members_map[data.user_id] = data.user_info;
          channel.emit('pusher:member_added', self.get(data.user_id));
        });
        channel.bind('pusher_internal:member_removed', function (data) {
          var member = self.get(data.user_id);

          if (member) {
            delete self._members_map[data.user_id];
            self.count--;
            channel.emit('pusher:member_removed', member);
          }
        });
        channel.bind('pusher_internal:disconnected', function () {
          reset.call(self);
        });
      };

      Members.prototype = {
        each: function each(callback) {
          for (var i in this._members_map) {
            callback(this.get(i));
          }
        },
        get: function get(user_id) {
          if (this._members_map.hasOwnProperty(user_id)) {
            // have heard of this user user_id
            return {
              id: user_id,
              info: this._members_map[user_id]
            };
          } else {
            // have never heard of this user
            return null;
          }
        }
      };

      _Pusher.Channel.factory = function (channel_name, pusher) {
        var channel = new _Pusher.Channel(channel_name, pusher);

        if (channel_name.indexOf('private-') === 0) {
          _Pusher.Util.extend(channel, _Pusher.Channel.PrivateChannel);
        } else if (channel_name.indexOf('presence-') === 0) {
          _Pusher.Util.extend(channel, _Pusher.Channel.PrivateChannel);

          _Pusher.Util.extend(channel, _Pusher.Channel.PresenceChannel);
        }
        channel.init();
        return channel;
      };
    })();

    (function () {
      _Pusher.Channel.Authorizer = function (channel, type, options) {
        this.channel = channel;
        this.type = type;
        this.authOptions = (options || {}).auth || {};
      };

      _Pusher.Channel.Authorizer.prototype = {
        composeQuery: function composeQuery(socketId) {
          var query = '&socket_id=' + encodeURIComponent(socketId) + '&channel_name=' + encodeURIComponent(this.channel.name);

          for (var i in this.authOptions.params) {
            query += "&" + encodeURIComponent(i) + "=" + encodeURIComponent(this.authOptions.params[i]);
          }

          return query;
        },
        authorize: function authorize(socketId, callback) {
          return _Pusher.authorizers[this.type].call(this, socketId, callback);
        }
      };
      _Pusher.auth_callbacks = {};
      _Pusher.authorizers = {
        ajax: function ajax(socketId, callback) {
          var xhr;

          if (_Pusher.XHR) {
            xhr = new _Pusher.XHR();
          } else {
            xhr = window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
          }

          xhr.open("POST", _Pusher.channel_auth_endpoint, true); // add request headers

          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

          for (var headerName in this.authOptions.headers) {
            xhr.setRequestHeader(headerName, this.authOptions.headers[headerName]);
          }

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status == 200) {
                var data,
                    parsed = false;

                try {
                  data = JSON.parse(xhr.responseText);
                  parsed = true;
                } catch (e) {
                  callback(true, 'JSON returned from webapp was invalid, yet status code was 200. Data was: ' + xhr.responseText);
                }

                if (parsed) {
                  // prevents double execution.
                  callback(false, data);
                }
              } else {
                _Pusher.warn("Couldn't get auth info from your webapp", xhr.status);

                callback(true, xhr.status);
              }
            }
          };

          xhr.send(this.composeQuery(socketId));
          return xhr;
        },
        jsonp: function jsonp(socketId, callback) {
          if (this.authOptions.headers !== undefined) {
            _Pusher.warn("Warn", "To send headers with the auth request, you must use AJAX, rather than JSONP.");
          }

          var script = document.createElement("script"); // Hacked wrapper.

          _Pusher.auth_callbacks[this.channel.name] = function (data) {
            callback(false, data);
          };

          var callback_name = "Pusher.auth_callbacks['" + this.channel.name + "']";
          script.src = _Pusher.channel_auth_endpoint + '?callback=' + encodeURIComponent(callback_name) + this.composeQuery(socketId);
          var head = document.getElementsByTagName("head")[0] || document.documentElement;
          head.insertBefore(script, head.firstChild);
        }
      };
    })(); // _require(dependencies, callback) takes an array of dependency urls and a
    // callback to call when all the dependecies have finished loading


    var _require = function () {
      function handleScriptLoaded(elem, callback) {
        if (document.addEventListener) {
          elem.addEventListener('load', callback, false);
        } else {
          elem.attachEvent('onreadystatechange', function () {
            if (elem.readyState == 'loaded' || elem.readyState == 'complete') {
              callback();
            }
          });
        }
      }

      function addScript(src, callback) {
        var head = document.getElementsByTagName('head')[0];
        var script = document.createElement('script');
        script.setAttribute('src', src);
        script.setAttribute("type", "text/javascript");
        script.setAttribute('async', true);
        handleScriptLoaded(script, function () {
          callback();
        });
        head.appendChild(script);
      }

      return function (deps, callback) {
        var deps_loaded = 0;

        for (var i = 0; i < deps.length; i++) {
          addScript(deps[i], function () {
            if (deps.length == ++deps_loaded) {
              // This setTimeout is a workaround for an Opera issue
              setTimeout(callback, 0);
            }
          });
        }
      };
    }();

    (function () {
      // Support Firefox versions which prefix WebSocket
      if (isWindowDefined() && !window['WebSocket'] && window['MozWebSocket']) {
        window['WebSocket'] = window['MozWebSocket'];
      }

      if (isWindowDefined() && window['WebSocket']) {
        _Pusher.Transport = window['WebSocket'];
        _Pusher.TransportType = 'native';
      }

      var cdn = isWindowDefined() && (document.location.protocol == 'http:' ? _Pusher.cdn_http : _Pusher.cdn_https);
      var root = cdn + _Pusher.VERSION;
      var deps = [];

      if (isWindowDefined() && !window['JSON']) {
        deps.push(root + '/json2' + _Pusher.dependency_suffix + '.js');
      }

      if (isWindowDefined() && !window['WebSocket']) {
        // We manually initialize web-socket-js to iron out cross browser issues
        window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION = true;
        deps.push(root + '/flashfallback' + _Pusher.dependency_suffix + '.js');
      }

      var initialize = function () {
        if (isWindowDefined() && window['WebSocket']) {
          // Initialize function in the case that we have native WebSocket support
          return function () {
            _Pusher.ready();
          };
        } else {
          // Initialize function for fallback case
          return function () {
            if (window['WebSocket']) {
              // window['WebSocket'] is a flash emulation of WebSocket
              _Pusher.Transport = window['WebSocket'];
              _Pusher.TransportType = 'flash'; // window.WEB_SOCKET_SWF_LOCATION = root + "/WebSocketMain.swf";

              window.WEB_SOCKET_SWF_LOCATION = "https://s3.amazonaws.com/uploadcare-static/WebSocketMainInsecure.swf";

              WebSocket.__addTask(function () {
                _Pusher.ready();
              });

              WebSocket.__initialize();
            } else {
              // Flash must not be installed
              _Pusher.Transport = null;
              _Pusher.TransportType = 'none';

              _Pusher.ready();
            }
          };
        }
      }(); // Allows calling a function when the document body is available


      var ondocumentbody = function ondocumentbody(callback) {
        var load_body = function load_body() {
          isWindowDefined() && (document.body ? callback() : setTimeout(load_body, 0));
        };

        load_body();
      };

      var initializeOnDocumentBody = function initializeOnDocumentBody() {
        ondocumentbody(initialize);
      };

      if (deps.length > 0) {
        _require(deps, initializeOnDocumentBody);
      } else {
        initializeOnDocumentBody();
      }
    })();

    this.Pusher = _Pusher;
  }).call(exports);
  });
  var pusher_1 = pusher.Pusher;

  var pushers = {}; // This fixes Pusher's prototype. Because Pusher replaces it:
  // Pusher.prototype = {method: ...}
  // instead of extending:
  // Pusher.prototype.method = ...

  pusher_1.prototype.constructor = pusher_1;

  var ManagedPusher = /*#__PURE__*/function (_Pusher) {
    _inherits(ManagedPusher, _Pusher);

    var _super = _createSuper(ManagedPusher);

    function ManagedPusher() {
      _classCallCheck(this, ManagedPusher);

      return _super.apply(this, arguments);
    }

    _createClass(ManagedPusher, [{
      key: "subscribe",
      value: function subscribe(name) {
        // Ensure we are connected when subscribing.
        if (this.disconnectTimeout) {
          clearTimeout(this.disconnectTimeout);
          this.disconnectTimeout = null;
        }

        this.connect();
        return _get(_getPrototypeOf(ManagedPusher.prototype), "subscribe", this).apply(this, arguments);
      }
    }, {
      key: "unsubscribe",
      value: function unsubscribe(name) {
        var _this = this;

        _get(_getPrototypeOf(ManagedPusher.prototype), "unsubscribe", this).apply(this, arguments); // Schedule disconnect if no channels left.


        if ($.isEmptyObject(this.channels.channels)) {
          this.disconnectTimeout = setTimeout(function () {
            _this.disconnectTimeout = null;
            return _this.disconnect();
          }, 5000);
        }
      }
    }]);

    return ManagedPusher;
  }(pusher_1);

  var getPusher = function getPusher(key) {
    if (pushers[key] == null) {
      pushers[key] = new ManagedPusher(key);
    } // Preconnect before we actually need channel.


    pushers[key].connect();
    return pushers[key];
  };

  var UrlFile = /*#__PURE__*/function (_BaseFile) {
    _inherits(UrlFile, _BaseFile);

    var _super = _createSuper(UrlFile);

    function UrlFile(__url) {
      var _this;

      _classCallCheck(this, UrlFile);

      var filename;
      _this = _super.apply(this, arguments);
      _this.__url = __url;
      filename = splitUrlRegex.exec(_this.__url)[3].split('/').pop();

      if (filename) {
        try {
          _this.fileName = decodeURIComponent(filename);
        } catch (error) {
          _this.fileName = filename;
        }
      }

      _this.__notifyApi();

      return _this;
    }

    _createClass(UrlFile, [{
      key: "setName",
      value: function setName(fileName) {
        this.fileName = fileName;
        this.__realFileName = fileName;
        return this.__notifyApi();
      }
    }, {
      key: "setIsImage",
      value: function setIsImage(isImage) {
        this.isImage = isImage;
        return this.__notifyApi();
      }
    }, {
      key: "__startUpload",
      value: function __startUpload() {
        var _this2 = this;

        var data, df, pollWatcher, pusherWatcher;
        df = $.Deferred();
        pusherWatcher = new PusherWatcher(this.settings);
        pollWatcher = new PollWatcher(this.settings);
        data = {
          pub_key: this.settings.publicKey,
          signature: this.settings.secureSignature,
          expire: this.settings.secureExpire,
          source_url: this.__url,
          filename: this.__realFileName || '',
          source: this.sourceInfo.source,
          store: this.settings.doNotStore ? '' : 'auto',
          jsonerrors: 1
        };
        defer(function () {
          if (_this2.apiDeferred.state() !== 'pending') {
            return;
          }

          return jsonp("".concat(_this2.settings.urlBase, "/from_url/"), 'GET', data, {
            headers: {
              'X-UC-User-Agent': _this2.settings._userAgent
            }
          }).fail(function (reason) {
            if (_this2.settings.debugUploads) {
              debug("Can't start upload from URL.", reason, data);
            }

            return df.reject();
          }).done(function (data) {
            var logger;

            if (_this2.apiDeferred.state() !== 'pending') {
              return;
            }

            if (_this2.settings.debugUploads) {
              debug('Start watchers.', data.token);
              logger = setInterval(function () {
                return debug('Still watching.', data.token);
              }, 5000);
              df.done(function () {
                return debug('Stop watchers.', data.token);
              }).always(function () {
                return clearInterval(logger);
              });
            }

            _this2.__listenWatcher(df, $([pusherWatcher, pollWatcher]));

            df.always(function () {
              $([pusherWatcher, pollWatcher]).off(_this2.allEvents);
              pusherWatcher.stopWatching();
              return pollWatcher.stopWatching();
            }); // turn off pollWatcher if we receive any message from pusher

            $(pusherWatcher).one(_this2.allEvents, function () {
              if (!pollWatcher.interval) {
                return;
              }

              if (_this2.settings.debugUploads) {
                debug('Start using pusher.', data.token);
              }

              return pollWatcher.stopWatching();
            });
            pusherWatcher.watch(data.token);
            return pollWatcher.watch(data.token);
          });
        });
        return df;
      }
    }, {
      key: "__listenWatcher",
      value: function __listenWatcher(df, watcher) {
        var _this3 = this;

        return watcher.on('progress', function (e, data) {
          _this3.fileSize = data.total;
          return df.notify(data.done / data.total);
        }).on('success', function (e, data) {
          $(e.target).trigger('progress', data);
          _this3.fileId = data.uuid;

          _this3.__handleFileData(data);

          return df.resolve();
        }).on('error fail', df.reject);
      }
    }]);

    return UrlFile;
  }(BaseFile);

  UrlFile.prototype.sourceName = 'url';
  UrlFile.prototype.allEvents = 'progress success error fail';

  var PusherWatcher = /*#__PURE__*/function () {
    function PusherWatcher(settings) {
      _classCallCheck(this, PusherWatcher);

      this.settings = settings;

      try {
        this.pusher = getPusher(this.settings.pusherKey);
      } catch (error) {
        this.pusher = null;
      }
    }

    _createClass(PusherWatcher, [{
      key: "watch",
      value: function watch(token) {
        var _this4 = this;

        var channel;
        this.token = token;

        if (!this.pusher) {
          return;
        }

        channel = this.pusher.subscribe("task-status-".concat(this.token));
        return channel.bind_all(function (ev, data) {
          return $(_this4).trigger(ev, data);
        });
      }
    }, {
      key: "stopWatching",
      value: function stopWatching() {
        if (!this.pusher) {
          return;
        }

        return this.pusher.unsubscribe("task-status-".concat(this.token));
      }
    }]);

    return PusherWatcher;
  }();

  var PollWatcher = /*#__PURE__*/function () {
    function PollWatcher(settings) {
      _classCallCheck(this, PollWatcher);

      this.settings = settings;
      this.poolUrl = "".concat(this.settings.urlBase, "/from_url/status/");
    }

    _createClass(PollWatcher, [{
      key: "watch",
      value: function watch(token) {
        var _this5 = this;

        this.token = token;

        var bind = function bind() {
          _this5.interval = setTimeout(function () {
            _this5.__updateStatus().done(function () {
              if (_this5.interval) {
                // Do not schedule next request if watcher stopped.
                bind();
              }
            });
          }, 333);
          return _this5.interval;
        };

        return bind();
      }
    }, {
      key: "stopWatching",
      value: function stopWatching() {
        if (this.interval) {
          clearTimeout(this.interval);
        }

        this.interval = null;
        return this.interval;
      }
    }, {
      key: "__updateStatus",
      value: function __updateStatus() {
        var _this6 = this;

        return jsonp(this.poolUrl, 'GET', {
          token: this.token
        }, {
          headers: {
            'X-UC-User-Agent': this.settings._userAgent
          }
        }).fail(function (reason) {
          return $(_this6).trigger('error');
        }).done(function (data) {
          return $(_this6).trigger(data.status, data);
        });
      }
    }]);

    return PollWatcher;
  }();

  var UploadedFile = /*#__PURE__*/function (_BaseFile) {
    _inherits(UploadedFile, _BaseFile);

    var _super = _createSuper(UploadedFile);

    function UploadedFile(fileIdOrUrl) {
      var _this;

      _classCallCheck(this, UploadedFile);

      var cdnUrl;
      _this = _super.apply(this, arguments);
      cdnUrl = splitCdnUrl(fileIdOrUrl);

      if (cdnUrl) {
        _this.fileId = cdnUrl[1];

        if (cdnUrl[2]) {
          _this.cdnUrlModifiers = cdnUrl[2];
        }
      } else {
        _this.__rejectApi('baddata');
      }

      return _this;
    }

    return UploadedFile;
  }(BaseFile);

  UploadedFile.prototype.sourceName = 'uploaded';

  var ReadyFile = /*#__PURE__*/function (_BaseFile2) {
    _inherits(ReadyFile, _BaseFile2);

    var _super2 = _createSuper(ReadyFile);

    function ReadyFile(data) {
      var _this2;

      _classCallCheck(this, ReadyFile);

      _this2 = _super2.apply(this, arguments);

      if (!data) {
        _this2.__rejectApi('deleted');
      } else {
        _this2.fileId = data.uuid;

        _this2.__handleFileData(data);
      }

      return _this2;
    }

    return ReadyFile;
  }(BaseFile);

  ReadyFile.prototype.sourceName = 'uploaded';

  var converters = {
    object: ObjectFile,
    input: InputFile,
    url: UrlFile,
    uploaded: UploadedFile,
    ready: ReadyFile
  };

  var fileFrom = function fileFrom(type, data, s) {
    return filesFrom(type, [data], s)[0];
  };

  var filesFrom = function filesFrom(type, data, s) {
    var i, info, len, param, results;
    s = build(s || {});
    results = [];

    for (i = 0, len = data.length; i < len; i++) {
      param = data[i];
      info = undefined;

      if ($.isArray(param)) {
        info = param[1];
        param = param[0];
      }

      results.push(new converters[type](param, s, info).promise());
    }

    return results;
  };

  var isFile = function isFile(obj) {
    return obj && obj.done && obj.fail && obj.cancel;
  }; // Converts user-given value to File object.


  var valueToFile = function valueToFile(value, settings) {
    if (value && !isFile(value)) {
      value = fileFrom('uploaded', value, settings);
    }

    return value || null;
  };

  var isFileGroup = function isFileGroup(obj) {
    return obj && obj.files && obj.promise;
  }; // Converts user-given value to FileGroup object.


  var valueToGroup = function valueToGroup(value, settings) {
    var files, item;

    if (value) {
      if ($.isArray(value)) {
        files = function () {
          var j, len, results;
          results = [];

          for (j = 0, len = value.length; j < len; j++) {
            item = value[j];
            results.push(valueToFile(item, settings));
          }

          return results;
        }();

        value = FileGroup$1(files, settings);
      } else {
        if (!isFileGroup(value)) {
          return loadFileGroup(value, settings);
        }
      }
    }

    return wrapToPromise(value || null);
  }; // check if two groups contains same files in same order


  var isFileGroupsEqual = function isFileGroupsEqual(group1, group2) {
    var file, files1, files2, i, j, len;

    if (group1 === group2) {
      return true;
    }

    if (!(isFileGroup(group1) && isFileGroup(group2))) {
      return false;
    }

    files1 = group1.files();
    files2 = group2.files();

    if (files1.length !== files2.length) {
      return false;
    }

    for (i = j = 0, len = files1.length; j < len; i = ++j) {
      file = files1[i];

      if (file !== files2[i]) {
        return false;
      }
    }

    return true;
  };

  var indexOf$2 = [].indexOf; // utils

  var Collection = /*#__PURE__*/function () {
    function Collection() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var after = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      _classCallCheck(this, Collection);

      this.onAdd = $.Callbacks();
      this.onRemove = $.Callbacks();
      this.onSort = $.Callbacks();
      this.onReplace = $.Callbacks();
      this.__items = [];

      if (!after) {
        this.init(items);
      }
    }

    _createClass(Collection, [{
      key: "init",
      value: function init(items) {
        var item, j, len;

        for (j = 0, len = items.length; j < len; j++) {
          item = items[j];
          this.add(item);
        }
      }
    }, {
      key: "add",
      value: function add(item) {
        return this.__add(item, this.__items.length);
      }
    }, {
      key: "__add",
      value: function __add(item, i) {
        this.__items.splice(i, 0, item);

        return this.onAdd.fire(item, i);
      }
    }, {
      key: "remove",
      value: function remove(item) {
        var i;
        i = $.inArray(item, this.__items);

        if (i !== -1) {
          return this.__remove(item, i);
        }
      }
    }, {
      key: "__remove",
      value: function __remove(item, i) {
        this.__items.splice(i, 1);

        return this.onRemove.fire(item, i);
      }
    }, {
      key: "clear",
      value: function clear() {
        var i, item, items, j, len, results;
        items = this.get();
        this.__items.length = 0;
        results = [];

        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          results.push(this.onRemove.fire(item, i));
        }

        return results;
      }
    }, {
      key: "replace",
      value: function replace(oldItem, newItem) {
        var i;

        if (oldItem !== newItem) {
          i = $.inArray(oldItem, this.__items);

          if (i !== -1) {
            return this.__replace(oldItem, newItem, i);
          }
        }
      }
    }, {
      key: "__replace",
      value: function __replace(oldItem, newItem, i) {
        this.__items[i] = newItem;
        return this.onReplace.fire(oldItem, newItem, i);
      }
    }, {
      key: "sort",
      value: function sort(comparator) {
        this.__items.sort(comparator);

        return this.onSort.fire();
      }
    }, {
      key: "get",
      value: function get(index) {
        if (index != null) {
          return this.__items[index];
        } else {
          return this.__items.slice(0);
        }
      }
    }, {
      key: "length",
      value: function length() {
        return this.__items.length;
      }
    }]);

    return Collection;
  }();

  var UniqCollection = /*#__PURE__*/function (_Collection) {
    _inherits(UniqCollection, _Collection);

    var _super = _createSuper(UniqCollection);

    function UniqCollection() {
      _classCallCheck(this, UniqCollection);

      return _super.apply(this, arguments);
    }

    _createClass(UniqCollection, [{
      key: "add",
      value: function add(item) {
        if (indexOf$2.call(this.__items, item) >= 0) {
          return;
        }

        return _get(_getPrototypeOf(UniqCollection.prototype), "add", this).apply(this, arguments);
      }
    }, {
      key: "__replace",
      value: function __replace(oldItem, newItem, i) {
        if (indexOf$2.call(this.__items, newItem) >= 0) {
          return this.remove(oldItem);
        } else {
          return _get(_getPrototypeOf(UniqCollection.prototype), "__replace", this).apply(this, arguments);
        }
      }
    }]);

    return UniqCollection;
  }(Collection);

  var CollectionOfPromises = /*#__PURE__*/function (_UniqCollection) {
    _inherits(CollectionOfPromises, _UniqCollection);

    var _super2 = _createSuper(CollectionOfPromises);

    function CollectionOfPromises() {
      var _thisSuper, _this;

      _classCallCheck(this, CollectionOfPromises);

      _this = _super2.call.apply(_super2, [this].concat(Array.prototype.slice.call(arguments), [true]));
      _this.anyDoneList = $.Callbacks();
      _this.anyFailList = $.Callbacks();
      _this.anyProgressList = $.Callbacks();
      _this._thenArgs = null;

      _this.anyProgressList.add(function (item, firstArgument) {
        return $(item).data('lastProgress', firstArgument);
      });

      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(CollectionOfPromises.prototype)), "init", _thisSuper).call(_thisSuper, arguments[0]);

      return _this;
    }

    _createClass(CollectionOfPromises, [{
      key: "onAnyDone",
      value: function onAnyDone(cb) {
        var file, j, len, ref1, results;
        this.anyDoneList.add(cb);
        ref1 = this.__items;
        results = [];

        for (j = 0, len = ref1.length; j < len; j++) {
          file = ref1[j];

          if (file.state() === 'resolved') {
            results.push(file.done(function () {
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return cb.apply(void 0, [file].concat(args));
            }));
          } else {
            results.push(undefined);
          }
        }

        return results;
      }
    }, {
      key: "onAnyFail",
      value: function onAnyFail(cb) {
        var file, j, len, ref1, results;
        this.anyFailList.add(cb);
        ref1 = this.__items;
        results = [];

        for (j = 0, len = ref1.length; j < len; j++) {
          file = ref1[j];

          if (file.state() === 'rejected') {
            results.push(file.fail(function () {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              return cb.apply(void 0, [file].concat(args));
            }));
          } else {
            results.push(undefined);
          }
        }

        return results;
      }
    }, {
      key: "onAnyProgress",
      value: function onAnyProgress(cb) {
        var file, j, len, ref1, results;
        this.anyProgressList.add(cb);
        ref1 = this.__items;
        results = [];

        for (j = 0, len = ref1.length; j < len; j++) {
          file = ref1[j];
          results.push(cb(file, $(file).data('lastProgress')));
        }

        return results;
      }
    }, {
      key: "lastProgresses",
      value: function lastProgresses() {
        var item, j, len, ref1, results;
        ref1 = this.__items;
        results = [];

        for (j = 0, len = ref1.length; j < len; j++) {
          item = ref1[j];
          results.push($(item).data('lastProgress'));
        }

        return results;
      }
    }, {
      key: "add",
      value: function add(item) {
        if (!(item && item.then)) {
          return;
        }

        if (this._thenArgs) {
          var _item;

          item = (_item = item).then.apply(_item, _toConsumableArray(this._thenArgs));
        }

        _get(_getPrototypeOf(CollectionOfPromises.prototype), "add", this).call(this, item);

        return this.__watchItem(item);
      }
    }, {
      key: "__replace",
      value: function __replace(oldItem, newItem, i) {
        if (!(newItem && newItem.then)) {
          return this.remove(oldItem);
        } else {
          _get(_getPrototypeOf(CollectionOfPromises.prototype), "__replace", this).apply(this, arguments);

          return this.__watchItem(newItem);
        }
      }
    }, {
      key: "__watchItem",
      value: function __watchItem(item) {
        var _this2 = this;

        var handler = function handler(callbacks) {
          return function () {
            if (indexOf$2.call(_this2.__items, item) >= 0) {
              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
              }

              return callbacks.fire.apply(callbacks, [item].concat(args));
            }
          };
        };

        return item.then(handler(this.anyDoneList), handler(this.anyFailList), handler(this.anyProgressList));
      }
    }, {
      key: "autoThen",
      value: function autoThen() {
        var i, item, j, len, ref1, results;

        if (this._thenArgs) {
          throw new Error('CollectionOfPromises.then() could be used only once');
        }

        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        this._thenArgs = args;
        ref1 = this.__items;
        results = [];

        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
          var _item2;

          item = ref1[i];
          results.push(this.__replace(item, (_item2 = item).then.apply(_item2, _toConsumableArray(this._thenArgs)), i));
        }

        return results;
      }
    }]);

    return CollectionOfPromises;
  }(UniqCollection);

  // #
  // # English locale is the default and used as a fallback.
  // #
  var translations = {
    uploading: 'Uploading... Please wait.',
    loadingInfo: 'Loading info...',
    errors: {
      default: 'Error',
      baddata: 'Incorrect value',
      size: 'File too big',
      upload: 'Can’t upload',
      user: 'Upload canceled',
      info: 'Can’t load info',
      image: 'Only images allowed',
      createGroup: 'Can’t create file group',
      deleted: 'File was deleted'
    },
    draghere: 'Drop a file here',
    file: {
      one: '%1 file',
      other: '%1 files'
    },
    buttons: {
      cancel: 'Cancel',
      remove: 'Remove',
      choose: {
        files: {
          one: 'Choose a file',
          other: 'Choose files'
        },
        images: {
          one: 'Choose an image',
          other: 'Choose images'
        }
      }
    },
    dialog: {
      close: 'Close',
      openMenu: 'Open menu',
      done: 'Done',
      showFiles: 'Show files',
      tabs: {
        names: {
          'empty-pubkey': 'Welcome',
          preview: 'Preview',
          file: 'Local Files',
          url: 'Direct Link',
          camera: 'Camera',
          facebook: 'Facebook',
          dropbox: 'Dropbox',
          gdrive: 'Google Drive',
          gphotos: 'Google Photos',
          instagram: 'Instagram',
          vk: 'VK',
          evernote: 'Evernote',
          box: 'Box',
          onedrive: 'OneDrive',
          flickr: 'Flickr',
          huddle: 'Huddle'
        },
        file: {
          drag: 'drag & drop<br>any files',
          nodrop: 'Upload files from your&nbsp;computer',
          cloudsTip: 'Cloud storages<br>and social networks',
          or: 'or',
          button: 'Choose a local file',
          also: 'or choose from'
        },
        url: {
          title: 'Files from the Web',
          line1: 'Grab any file off the web.',
          line2: 'Just provide the link.',
          input: 'Paste your link here...',
          button: 'Upload'
        },
        camera: {
          title: 'File from web camera',
          capture: 'Take a photo',
          mirror: 'Mirror',
          startRecord: 'Record a video',
          stopRecord: 'Stop',
          cancelRecord: 'Cancel',
          retry: 'Request permissions again',
          pleaseAllow: {
            title: 'Please allow access to your camera',
            text: 'You have been prompted to allow camera access from this site.<br>' + 'In order to take pictures with your camera you must approve this request.'
          },
          notFound: {
            title: 'No camera detected',
            text: 'Looks like you have no camera connected to this device.'
          }
        },
        preview: {
          unknownName: 'unknown',
          change: 'Cancel',
          back: 'Back',
          done: 'Add',
          unknown: {
            title: 'Uploading... Please wait for a preview.',
            done: 'Skip preview and accept'
          },
          regular: {
            title: 'Add this file?',
            line1: 'You are about to add the file above.',
            line2: 'Please confirm.'
          },
          image: {
            title: 'Add this image?',
            change: 'Cancel'
          },
          crop: {
            title: 'Crop and add this image',
            done: 'Done',
            free: 'free'
          },
          video: {
            title: 'Add this video?',
            change: 'Cancel'
          },
          error: {
            default: {
              title: 'Oops!',
              text: 'Something went wrong during the upload.',
              back: 'Please try again'
            },
            image: {
              title: 'Only image files are accepted.',
              text: 'Please try again with another file.',
              back: 'Choose image'
            },
            size: {
              title: 'The file you selected exceeds the limit.',
              text: 'Please try again with another file.'
            },
            loadImage: {
              title: 'Error',
              text: 'Can’t load image'
            }
          },
          multiple: {
            title: 'You’ve chosen %files%.',
            question: 'Add %files%?',
            tooManyFiles: 'You’ve chosen too many files. %max% is maximum.',
            tooFewFiles: 'You’ve chosen %files%. At least %min% required.',
            clear: 'Remove all',
            done: 'Add',
            file: {
              preview: 'Preview %file%',
              remove: 'Remove %file%'
            }
          }
        }
      },
      footer: {
        text: 'powered by',
        link: 'uploadcare'
      }
    }
  }; // Pluralization rules taken from:
  // https://unicode.org/cldr/charts/34/supplemental/language_plural_rules.html

  var pluralize = function pluralize(n) {
    if (n === 1) {
      return 'one';
    }

    return 'other';
  };

  var en = {
    pluralize: pluralize,
    translations: translations
  };

  var locales = {
    en: en
  };

  var currentLocale = null;
  var locale = {
    translations: Object.keys(locales).reduce(function (translations, lang) {
      translations[lang] = locales[lang].translations;
      return translations;
    }, {}),
    pluralize: Object.keys(locales).reduce(function (pluralize, lang) {
      pluralize[lang] = locales[lang].pluralize;
      return pluralize;
    }, {}),
    // Backdoor for widget constructor
    rebuild: function rebuild(settings) {
      currentLocale = null;
      return _build(settings);
    },
    t: function t(key, n) {
      var locale, ref, value;
      locale = _build();
      value = translate(key, locale.translations);

      if (value == null && locale.lang !== defaults$1.lang) {
        locale = defaults$1;
        value = translate(key, locale.translations);
      }

      if (n != null) {
        if (locale.pluralize != null) {
          value = ((ref = value[locale.pluralize(n)]) != null ? ref.replace('%1', n) : undefined) || n;
        } else {
          value = '';
        }
      }

      return value || '';
    }
  };
  var defaultLang = 'en';
  var defaults$1 = {
    lang: defaultLang,
    translations: locales[defaultLang].translations,
    pluralize: locales[defaultLang].pluralize
  };

  var _build = function _build(stgs) {
    if (!currentLocale) {
      var settings = build(stgs);
      var lang = settings.locale || defaults$1.lang;
      var translations = $.extend(true, {}, locale.translations[lang], settings.localeTranslations);
      var pluralize = $.isFunction(settings.localePluralize) ? settings.localePluralize : locale.pluralize[lang];
      currentLocale = {
        lang: lang,
        translations: translations,
        pluralize: pluralize
      };
    }

    return currentLocale;
  };

  var translate = function translate(key, node) {
    var path = key.split('.');

    for (var i = 0, len = path.length; i < len; i++) {
      var subkey = path[i];

      if (node == null) {
        return null;
      }

      node = node[subkey];
    }

    return node;
  };

  var FileGroup = /*#__PURE__*/function () {
    function FileGroup(files, settings) {
      var _this = this;

      _classCallCheck(this, FileGroup);

      this.__uuid = null;
      this.settings = build(settings);
      this.__fileColl = new CollectionOfPromises(files);
      this.__allFilesDf = $.when.apply($, _toConsumableArray(this.files()));

      this.__fileInfosDf = function () {
        var file;

        files = function () {
          var j, len, ref, results;
          ref = this.files();
          results = [];

          for (j = 0, len = ref.length; j < len; j++) {
            file = ref[j];
            results.push( // eslint-disable-next-line handle-callback-err
            file.then(null, function (err, info) {
              return $.when(info);
            }));
          }

          return results;
        }.call(_this);

        return $.when.apply($, _toConsumableArray(files));
      }();

      this.__createGroupDf = $.Deferred();

      this.__initApiDeferred();
    }

    _createClass(FileGroup, [{
      key: "files",
      value: function files() {
        return this.__fileColl.get();
      }
    }, {
      key: "__save",
      value: function __save() {
        var _this2 = this;

        if (!this.__saved) {
          this.__saved = true;
          return this.__allFilesDf.done(function () {
            return _this2.__createGroup().done(function (groupInfo) {
              _this2.__uuid = groupInfo.id;
              return _this2.__buildInfo(function (info) {
                if (_this2.settings.imagesOnly && !info.isImage) {
                  return _this2.__createGroupDf.reject('image', info);
                } else {
                  return _this2.__createGroupDf.resolve(info);
                }
              });
            }).fail(function () {
              return _this2.__createGroupDf.reject('createGroup');
            });
          });
        }
      } // returns object similar to File object

    }, {
      key: "promise",
      value: function promise() {
        this.__save();

        return this.__apiDf.promise();
      }
    }, {
      key: "__initApiDeferred",
      value: function __initApiDeferred() {
        var _this3 = this;

        var notify, reject, resolve;
        this.__apiDf = $.Deferred();
        this.__progressState = 'uploading';

        reject = function reject(err) {
          return _this3.__buildInfo(function (info) {
            return _this3.__apiDf.reject(err, info);
          });
        };

        resolve = function resolve(info) {
          return _this3.__apiDf.resolve(info);
        };

        notify = function notify() {
          return _this3.__apiDf.notify(_this3.__progressInfo());
        };

        notify();

        this.__fileColl.onAnyProgress(notify);

        this.__allFilesDf.done(function () {
          _this3.__progressState = 'uploaded';
          return notify();
        }).fail(reject);

        return this.__createGroupDf.done(function (info) {
          _this3.__progressState = 'ready';
          notify();
          return resolve(info);
        }).fail(reject);
      }
    }, {
      key: "__progressInfo",
      value: function __progressInfo() {
        var j, len, progress, progressInfo, progressInfos;
        progress = 0;
        progressInfos = this.__fileColl.lastProgresses();

        for (j = 0, len = progressInfos.length; j < len; j++) {
          progressInfo = progressInfos[j];
          progress += ((progressInfo != null ? progressInfo.progress : undefined) || 0) / progressInfos.length;
        }

        return {
          state: this.__progressState,
          uploadProgress: progress,
          progress: this.__progressState === 'ready' ? 1 : progress * 0.9
        };
      }
    }, {
      key: "__buildInfo",
      value: function __buildInfo(cb) {
        var info;
        info = {
          uuid: this.__uuid,
          cdnUrl: this.__uuid ? "".concat(this.settings.cdnBase, "/").concat(this.__uuid, "/") : null,
          name: locale.t('file', this.__fileColl.length()),
          count: this.__fileColl.length(),
          size: 0,
          isImage: true,
          isStored: true
        };
        return this.__fileInfosDf.done(function () {
          var _info, j, len;

          for (var _len = arguments.length, infos = new Array(_len), _key = 0; _key < _len; _key++) {
            infos[_key] = arguments[_key];
          }

          for (j = 0, len = infos.length; j < len; j++) {
            _info = infos[j];
            info.size += _info.size;

            if (!_info.isImage) {
              info.isImage = false;
            }

            if (!_info.isStored) {
              info.isStored = false;
            }
          }

          return cb(info);
        });
      }
    }, {
      key: "__createGroup",
      value: function __createGroup() {
        var _this4 = this;

        var df;
        df = $.Deferred();

        if (this.__fileColl.length()) {
          this.__fileInfosDf.done(function () {
            for (var _len2 = arguments.length, infos = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              infos[_key2] = arguments[_key2];
            }

            var info;
            return jsonp("".concat(_this4.settings.urlBase, "/group/"), 'POST', {
              pub_key: _this4.settings.publicKey,
              signature: _this4.settings.secureSignature,
              expire: _this4.settings.secureExpire,
              files: function () {
                var j, len, results;
                results = [];

                for (j = 0, len = infos.length; j < len; j++) {
                  info = infos[j];
                  results.push("/".concat(info.uuid, "/").concat(info.cdnUrlModifiers || ''));
                }

                return results;
              }()
            }, {
              headers: {
                'X-UC-User-Agent': _this4.settings._userAgent
              }
            }).fail(function (reason) {
              if (_this4.settings.debugUploads) {
                log("Can't create group.", _this4.settings.publicKey, reason);
              }

              return df.reject();
            }).done(df.resolve);
          });
        } else {
          df.reject();
        }

        return df.promise();
      }
    }, {
      key: "api",
      value: function api() {
        if (!this.__api) {
          this.__api = bindAll(this, ['promise', 'files']);
        }

        return this.__api;
      }
    }]);

    return FileGroup;
  }();

  var SavedFileGroup = /*#__PURE__*/function (_FileGroup) {
    _inherits(SavedFileGroup, _FileGroup);

    var _super = _createSuper(SavedFileGroup);

    function SavedFileGroup(data, settings) {
      var _this5;

      _classCallCheck(this, SavedFileGroup);

      var files;
      files = filesFrom('ready', data.files, settings);
      _this5 = _super.call(this, files, settings);
      _this5.__data = data;
      return _this5;
    }

    _createClass(SavedFileGroup, [{
      key: "__createGroup",
      value: function __createGroup() {
        return wrapToPromise(this.__data);
      }
    }]);

    return SavedFileGroup;
  }(FileGroup);

  var FileGroup$1 = function FileGroup$1() {
    var filesAndGroups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var settings = arguments.length > 1 ? arguments[1] : undefined;
    var file, files, item, j, k, len, len1, ref;
    files = [];

    for (j = 0, len = filesAndGroups.length; j < len; j++) {
      item = filesAndGroups[j];

      if (isFile(item)) {
        files.push(item);
      } else if (isFileGroup(item)) {
        ref = item.files();

        for (k = 0, len1 = ref.length; k < len1; k++) {
          file = ref[k];
          files.push(file);
        }
      }
    }

    return new FileGroup(files, settings).api();
  };

  var loadFileGroup = function loadFileGroup(groupIdOrUrl, settings) {
    var df, id;
    settings = build(settings);
    df = $.Deferred();
    id = groupIdRegex.exec(groupIdOrUrl);

    if (id) {
      jsonp("".concat(settings.urlBase, "/group/info/"), 'GET', {
        jsonerrors: 1,
        pub_key: settings.publicKey,
        group_id: id[0]
      }, {
        headers: {
          'X-UC-User-Agent': settings._userAgent
        }
      }).fail(function (reason) {
        if (settings.debugUploads) {
          log("Can't load group info. Probably removed.", id[0], settings.publicKey, reason);
        }

        return df.reject();
      }).done(function (data) {
        var group;
        group = new SavedFileGroup(data, settings);
        return df.resolve(group.api());
      });
    } else {
      df.reject();
    }

    return df.promise();
  };

  var callbacks = {};
  isWindowDefined() && $(window).on('message', function (_ref) {
    var e = _ref.originalEvent;
    var i, item, len, message, ref, results;

    try {
      message = JSON.parse(e.data);
    } catch (error) {
      return;
    }

    if ((message != null ? message.type : undefined) && message.type in callbacks) {
      ref = callbacks[message.type];
      results = [];

      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];

        if (e.source === item[0]) {
          results.push(item[1](message));
        } else {
          results.push(undefined);
        }
      }

      return results;
    }
  });

  var registerMessage = function registerMessage(type, sender, callback) {
    if (!(type in callbacks)) {
      callbacks[type] = [];
    }

    return callbacks[type].push([sender, callback]);
  };

  var unregisterMessage = function unregisterMessage(type, sender) {
    if (type in callbacks) {
      callbacks[type] = $.grep(callbacks[type], function (item) {
        return item[0] !== sender;
      });
      return callbacks[type];
    }
  };

  var tabsCss = new CssCollector();

  var _namespace = {
    version: version,
    jQuery: $,
    utils: {
      abilities: {
        fileAPI: fileAPI,
        sendFileAPI: sendFileAPI,
        dragAndDrop: dragAndDrop,
        canvas: canvas,
        fileDragAndDrop: fileDragAndDrop,
        iOSVersion: iOSVersion,
        Blob: Blob,
        URL: URL,
        FileReader: FileReader
      },
      Collection: Collection,
      UniqCollection: UniqCollection,
      CollectionOfPromises: CollectionOfPromises,
      imageLoader: imageLoader,
      videoLoader: videoLoader,
      log: log,
      debug: debug,
      warn: warn,
      warnOnce: warnOnce,
      //   commonWarning
      registerMessage: registerMessage,
      unregisterMessage: unregisterMessage,
      unique: unique,
      defer: defer,
      gcd: gcd,
      once: once,
      wrapToPromise: wrapToPromise,
      then: then,
      bindAll: bindAll,
      upperCase: upperCase,
      publicCallbacks: publicCallbacks,
      uuid: uuid,
      splitUrlRegex: splitUrlRegex,
      uuidRegex: uuidRegex,
      groupIdRegex: groupIdRegex,
      cdnUrlRegex: cdnUrlRegex,
      splitCdnUrl: splitCdnUrl,
      escapeRegExp: escapeRegExp,
      globRegexp: globRegexp,
      normalizeUrl: normalizeUrl,
      fitText: fitText,
      fitSizeInCdnLimit: fitSizeInCdnLimit,
      fitSize: fitSize,
      applyCropCoordsToInfo: applyCropCoordsToInfo,
      fileInput: fileInput,
      fileSelectDialog: fileSelectDialog,
      fileSizeLabels: fileSizeLabels,
      readableFileSize: readableFileSize,
      ajaxDefaults: ajaxDefaults,
      jsonp: jsonp,
      canvasToBlob: canvasToBlob,
      taskRunner: taskRunner,
      fixedPipe: fixedPipe,
      isFile: isFile,
      valueToFile: valueToFile,
      image: {
        shrinkFile: shrinkFile,
        shrinkImage: shrinkImage,
        drawFileToCanvas: drawFileToCanvas,
        readJpegChunks: readJpegChunks,
        replaceJpegChunk: replaceJpegChunk,
        getExif: getExif,
        parseExifOrientation: parseExifOrientation,
        hasTransparency: hasTransparency
      },
      pusher: {
        getPusher: getPusher
      },
      isFileGroup: isFileGroup,
      valueToGroup: valueToGroup,
      isFileGroupsEqual: isFileGroupsEqual
    },
    settings: {
      globals: globals,
      build: build,
      common: common,
      waitForSettings: waitForSettings,
      CssCollector: CssCollector
    },
    locale: locale,
    tabsCss: tabsCss,
    files: {
      BaseFile: BaseFile,
      ObjectFile: ObjectFile,
      InputFile: InputFile,
      UrlFile: UrlFile,
      UploadedFile: UploadedFile,
      ReadyFile: ReadyFile,
      FileGroup: FileGroup,
      SavedFileGroup: SavedFileGroup
    },
    Pusher: pusher_1,
    FileGroup: FileGroup$1,
    loadFileGroup: loadFileGroup,
    fileFrom: fileFrom,
    filesFrom: filesFrom,
    __exports: {},
    namespace: function namespace(path, fn) {
      var target = _namespace;

      if (path) {
        var ref = path.split('.');

        for (var i = 0, len = ref.length; i < len; i++) {
          var part = ref[i];

          if (!target[part]) {
            target[part] = {};
          }

          target = target[part];
        }
      }

      return fn(target);
    },
    expose: function expose(key, value) {
      var parts = key.split('.');
      var last = parts.pop();
      var target = _namespace.__exports;
      var source = _namespace;

      for (var i = 0, len = parts.length; i < len; i++) {
        var part = parts[i];

        if (!target[part]) {
          target[part] = {};
        }

        target = target[part];
        source = source != null ? source[part] : undefined;
      }

      target[last] = value || source[last];
    }
  };

  function createPlugin(ns) {
    return function (fn) {
      return fn(ns);
    };
  }

  var plugin = createPlugin(_namespace);

  var uploadcare_api = {
    plugin: plugin,
    version: version,
    jQuery: $,
    // Defaults (not normalized)
    defaults: _objectSpread2(_objectSpread2({}, defaults), {}, {
      allTabs: presets.tabs.all
    }),
    globals: common,
    start: common,
    fileFrom: fileFrom,
    filesFrom: filesFrom,
    FileGroup: FileGroup$1,
    loadFileGroup: loadFileGroup,
    locales: ['en']
  };

  return uploadcare_api;

})));
