{"version":3,"file":"LRUCache.js","sources":["../../../src/ol/structs/LRUCache.js"],"sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\n\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").Event\n * @template T\n */\nclass LRUCache extends EventTarget {\n\n  /**\n   * @param {number=} opt_highWaterMark High water mark.\n   */\n  constructor(opt_highWaterMark) {\n\n    super();\n\n    /**\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n\n  }\n\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.getCount() > this.highWaterMark;\n  }\n\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n    this.dispatchEvent(EventType.CLEAR);\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n\n  /**\n   * @param {function(this: S, T, string, LRUCache): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   * @param {S=} opt_this The object to use as `this` in `f`.\n   * @template S\n   */\n  forEach(f, opt_this) {\n    let entry = this.oldest_;\n    while (entry) {\n      f.call(opt_this, entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  get(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined,\n      15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_),\n      16); // Tried to set a value for a key that is used already\n    const entry = /** @type {Entry} */ ({\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    });\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n\n\n  /**\n   * Prune the cache.\n   */\n  prune() {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  }\n\n}\n\nexport default LRUCache;\n"],"names":["super","let","const"],"mappings":"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"}