{"version":3,"file":"defaultshader.js","sources":["../../../../../src/ol/render/webgl/polygonreplay/defaultshader.js"],"sourcesContent":["/**\n * @module ol/render/webgl/polygonreplay/defaultshader\n */\n// This file is automatically generated, do not edit.\n// Run `make shaders` to generate, and commit the result.\n\nimport {DEBUG as DEBUG_WEBGL} from '../../../webgl.js';\nimport WebGLFragment from '../../../webgl/Fragment.js';\nimport WebGLVertex from '../../../webgl/Vertex.js';\n\nexport const fragment = new WebGLFragment(DEBUG_WEBGL ?\n  'precision mediump float;\\n\\n\\n\\nuniform vec4 u_color;\\nuniform float u_opacity;\\n\\nvoid main(void) {\\n  gl_FragColor = u_color;\\n  float alpha = u_color.a * u_opacity;\\n  if (alpha == 0.0) {\\n    discard;\\n  }\\n  gl_FragColor.a = alpha;\\n}\\n' :\n  'precision mediump float;uniform vec4 e;uniform float f;void main(void){gl_FragColor=e;float alpha=e.a*f;if(alpha==0.0){discard;}gl_FragColor.a=alpha;}');\n\nexport const vertex = new WebGLVertex(DEBUG_WEBGL ?\n  '\\n\\nattribute vec2 a_position;\\n\\nuniform mat4 u_projectionMatrix;\\nuniform mat4 u_offsetScaleMatrix;\\nuniform mat4 u_offsetRotateMatrix;\\n\\nvoid main(void) {\\n  gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\\n}\\n\\n\\n' :\n  'attribute vec2 a;uniform mat4 b;uniform mat4 c;uniform mat4 d;void main(void){gl_Position=b*vec4(a,0.0,1.0);}');\n"],"names":["const"],"mappings":"AAAA;;;;;;AAMA,QAAQ,KAAK,IAAI,WAAW,OAAO,mBAAmB,CAAC;AACvD,OAAO,aAAa,MAAM,4BAA4B,CAAC;AACvD,OAAO,WAAW,MAAM,0BAA0B,CAAC;;AAEnD,OAAOA,GAAK,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAC,WAAW;EACnD,mPAAmP;EACnP,wJAAwJ,CAAC,CAAC;;AAE5J,OAAOA,GAAK,CAAC,MAAM,GAAG,IAAI,WAAW,CAAC,WAAW;EAC/C,2OAA2O;EAC3O,+GAA+G,CAAC,CAAC;"}