{"version":3,"file":"TileLayer.js","sources":["../../../../src/ol/renderer/canvas/TileLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport {getUid} from '../../util.js';\nimport LayerType from '../../LayerType.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {containsExtent, createEmpty, equals, getIntersection, isEmpty} from '../../extent.js';\nimport IntermediateCanvasRenderer from './IntermediateCanvas.js';\nimport {create as createTransform, compose as composeTransform} from '../../transform.js';\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n */\nclass CanvasTileLayerRenderer extends IntermediateCanvasRenderer {\n\n  /**\n   * @param {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} tileLayer Tile layer.\n   * @param {boolean=} opt_noContext Skip the context creation.\n   */\n  constructor(tileLayer, opt_noContext) {\n\n    super(tileLayer);\n\n    /**\n     * @protected\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = opt_noContext ? null : createCanvasContext2D();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.oversampling_;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tmpExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.imageTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.zDirection = 0;\n\n  }\n\n  /**\n   * @private\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile_(tile) {\n    const tileLayer = /** @type {import(\"../../layer/Tile.js\").default} */ (this.getLayer());\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return tileState == TileState.LOADED ||\n        tileState == TileState.EMPTY ||\n        tileState == TileState.ERROR && !useInterimTilesOnError;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileLayer = /** @type {import(\"../../layer/Tile.js\").default} */ (this.getLayer());\n    const tileSource = /** @type {import(\"../../source/Tile.js\").default} */ (tileLayer.getSource());\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (!tileLayer.getUseInterimTilesOnError()) {\n        // When useInterimTilesOnError is false, we consider the error tile as loaded.\n        tile.setState(TileState.LOADED);\n      } else if (tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile_(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  prepareFrame(frameState, layerState) {\n\n    const pixelRatio = frameState.pixelRatio;\n    const size = frameState.size;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n\n    const tileLayer = /** @type {import(\"../../layer/Tile.js\").default} */ (this.getLayer());\n    const tileSource = /** @type {import(\"../../source/Tile.js\").default} */ (tileLayer.getSource());\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, this.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n    let oversampling = Math.round(viewResolution / tileResolution) || 1;\n    let extent = frameState.extent;\n\n    if (layerState.extent !== undefined) {\n      extent = getIntersection(extent, layerState.extent);\n    }\n    if (isEmpty(extent)) {\n      // Return false to prevent the rendering of the layer.\n      return false;\n    }\n\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n    const imageExtent = tileGrid.getTileRangeExtent(z, tileRange);\n\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n\n    const findLoadedTiles = this.createLoadedTileFinder(\n      tileSource, projection, tilesToDrawByZ);\n\n    const hints = frameState.viewHints;\n    const animatingOrInteracting = hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING];\n\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    let tile, x, y;\n    for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        if (Date.now() - frameState.time > 16 && animatingOrInteracting) {\n          continue;\n        }\n        tile = this.getTile(z, x, y, pixelRatio, projection);\n        if (this.isDrawableTile_(tile)) {\n          const uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            const inTransition = tile.inTransition(uid);\n            if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\n          tile.tileCoord, tmpTileRange, tmpExtent);\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(\n            tile.tileCoord, findLoadedTiles, null, tmpTileRange, tmpExtent);\n        }\n\n      }\n    }\n\n    const renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;\n    if (!(this.renderedResolution && Date.now() - frameState.time > 16 && animatingOrInteracting) && (\n      this.newTiles_ ||\n          !(this.renderedExtent_ && containsExtent(this.renderedExtent_, extent)) ||\n          this.renderedRevision != sourceRevision ||\n          oversampling != this.oversampling_ ||\n          !animatingOrInteracting && renderedResolution != this.renderedResolution\n    )) {\n\n      const context = this.context;\n      if (context) {\n        const tilePixelSize = tileSource.getTilePixelSize(z, pixelRatio, projection);\n        const width = Math.round(tileRange.getWidth() * tilePixelSize[0] / oversampling);\n        const height = Math.round(tileRange.getHeight() * tilePixelSize[1] / oversampling);\n        const canvas = context.canvas;\n        if (canvas.width != width || canvas.height != height) {\n          this.oversampling_ = oversampling;\n          canvas.width = width;\n          canvas.height = height;\n        } else {\n          if ((this.renderedExtent_ && !equals(imageExtent, this.renderedExtent_)) ||\n              this.renderedRevision != sourceRevision) {\n            context.clearRect(0, 0, width, height);\n          }\n          oversampling = this.oversampling_;\n        }\n      }\n\n      this.renderedTiles.length = 0;\n      /** @type {Array<number>} */\n      const zs = Object.keys(tilesToDrawByZ).map(Number);\n      zs.sort(function(a, b) {\n        if (a === z) {\n          return 1;\n        } else if (b === z) {\n          return -1;\n        } else {\n          return a > b ? 1 : a < b ? -1 : 0;\n        }\n      });\n      let currentResolution, currentScale, currentTilePixelSize, currentZ, i, ii;\n      let tileExtent, tileGutter, tilesToDraw, w, h;\n      for (i = 0, ii = zs.length; i < ii; ++i) {\n        currentZ = zs[i];\n        currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n        currentResolution = tileGrid.getResolution(currentZ);\n        currentScale = currentResolution / tileResolution;\n        tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n        tilesToDraw = tilesToDrawByZ[currentZ];\n        for (const tileCoordKey in tilesToDraw) {\n          tile = tilesToDraw[tileCoordKey];\n          tileExtent = tileGrid.getTileCoordExtent(tile.getTileCoord(), tmpExtent);\n          x = (tileExtent[0] - imageExtent[0]) / tileResolution * tilePixelRatio / oversampling;\n          y = (imageExtent[3] - tileExtent[3]) / tileResolution * tilePixelRatio / oversampling;\n          w = currentTilePixelSize[0] * currentScale / oversampling;\n          h = currentTilePixelSize[1] * currentScale / oversampling;\n          this.drawTileImage(tile, frameState, layerState, x, y, w, h, tileGutter, z === currentZ);\n          this.renderedTiles.push(tile);\n        }\n      }\n\n      this.renderedRevision = sourceRevision;\n      this.renderedResolution = tileResolution * pixelRatio / tilePixelRatio * oversampling;\n      this.renderedExtent_ = imageExtent;\n    }\n\n    const scale = this.renderedResolution / viewResolution;\n    const transform = composeTransform(this.imageTransform_,\n      pixelRatio * size[0] / 2, pixelRatio * size[1] / 2,\n      scale, scale,\n      0,\n      (this.renderedExtent_[0] - viewCenter[0]) / this.renderedResolution * pixelRatio,\n      (viewCenter[1] - this.renderedExtent_[3]) / this.renderedResolution * pixelRatio);\n    composeTransform(this.coordinateToCanvasPixelTransform,\n      pixelRatio * size[0] / 2 - transform[4], pixelRatio * size[1] / 2 - transform[5],\n      pixelRatio / viewResolution, -pixelRatio / viewResolution,\n      0,\n      -viewCenter[0], -viewCenter[1]);\n\n\n    this.updateUsedTiles(frameState.usedTiles, tileSource, z, tileRange);\n    this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio,\n      projection, extent, z, tileLayer.getPreload());\n    this.scheduleExpireCache(frameState, tileSource);\n\n    return this.renderedTiles.length > 0;\n  }\n\n  /**\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../layer/Layer.js\").State} layerState Layer state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */\n  drawTileImage(tile, frameState, layerState, x, y, w, h, gutter, transition) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = getUid(this);\n    const alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;\n    const tileLayer = /** @type {import(\"../../layer/Tile.js\").default} */ (this.getLayer());\n    const tileSource = /** @type {import(\"../../source/Tile.js\").default} */ (tileLayer.getSource());\n    if (alpha === 1 && !tileSource.getOpaque(frameState.viewState.projection)) {\n      this.context.clearRect(x, y, w, h);\n    }\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(image, gutter, gutter,\n      image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (alpha !== 1) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageTransform() {\n    return this.imageTransform_;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return /** @type {import(\"../../ImageTile.js\").default} */ (tile).getImage();\n  }\n}\n\n\n/**\n * Determine if this renderer handles the provided layer.\n * @param {import(\"../../layer/Layer.js\").default} layer The candidate layer.\n * @return {boolean} The renderer can render the layer.\n */\nCanvasTileLayerRenderer['handles'] = function(layer) {\n  return layer.getType() === LayerType.TILE;\n};\n\n\n/**\n * Create a layer renderer.\n * @param {import(\"../Map.js\").default} mapRenderer The map renderer.\n * @param {import(\"../../layer/Layer.js\").default} layer The layer to be rendererd.\n * @return {CanvasTileLayerRenderer} The layer renderer.\n */\nCanvasTileLayerRenderer['create'] = function(mapRenderer, layer) {\n  return new CanvasTileLayerRenderer(/** @type {import(\"../../layer/Tile.js\").default} */ (layer));\n};\n\n\n/**\n * @function\n * @return {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default}\n */\nCanvasTileLayerRenderer.prototype.getLayer;\n\n\nexport default CanvasTileLayerRenderer;\n"],"names":["super","const","let"],"mappings":"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"}