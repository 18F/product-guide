{"version":3,"file":"size.js","sources":["../../src/ol/size.js"],"sourcesContent":["/**\n * @module ol/size\n */\n\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\n  return opt_size;\n}\n\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size=} opt_size Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = opt_size[1] = /** @type {number} */ (size);\n    }\n    return opt_size;\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,SAAS,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE;EAC1C,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;GACnB;EACD,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EAChC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EAChC,OAAO,QAAQ,CAAC;CACjB;;;;;;;;AAQD,OAAO,SAAS,OAAO,CAAC,IAAI,EAAE;EAC5B,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;CACnC;;;;;;;;;;AAUD,OAAO,SAAS,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;EAC3C,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;GACnB;EACD,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1C,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1C,OAAO,QAAQ,CAAC;CACjB;;;;;;;;;;;;AAYD,OAAO,SAAS,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE;EACrC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IACvB,OAAO,IAAI,CAAC;GACb,MAAM;IACL,IAAI,QAAQ,KAAK,SAAS,EAAE;MAC1B,QAAQ,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACzB,MAAM;MACL,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;KAC1D;IACD,OAAO,QAAQ,CAAC;GACjB;CACF;"}