{"version":3,"file":"WMTS.js","sources":["../../../src/ol/tilegrid/WMTS.js"],"sourcesContent":["/**\n * @module ol/tilegrid/WMTS\n */\n\nimport {find} from '../array.js';\nimport {get as getProjection} from '../proj.js';\nimport TileGrid from './TileGrid.js';\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and upwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and upwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define the grid's extent together with the `origin`.\n * An `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. Note that when the top-left corner of\n * the `extent` is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates increase upwards.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n * @property {Array<number>} [widths] Number of tile columns that cover the grid's\n * extent for each zoom level. Only required when used with a source that has `wrapX`\n * set to `true`, and only when the grid's origin differs from the one of the\n * projection's extent. The array length has to match the length of the `resolutions`\n * array, i.e. each resolution will have a matching entry here.\n */\n\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent=} opt_extent An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>=} opt_matrixLimits An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(matrixSet, opt_extent, opt_matrixLimits) {\n\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  const matrixLimits = opt_matrixLimits !== undefined ? opt_matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')) ||\n      getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  matrixSet[matrixIdsPropName].sort(function(a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function(elt) {\n\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = find(matrixLimits, function(elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (elt[identifierPropName].indexOf(':') === -1) {\n          return matrixSet[identifierPropName] + ':' + elt[identifierPropName] === elt_ml[matrixIdsPropName];\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution = elt[scaleDenominatorPropName] * 0.28E-3 / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0]]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(tileWidth == tileHeight ?\n        tileWidth : [tileWidth, tileHeight]);\n      // top-left origin, so height is negative\n      sizes.push([elt['MatrixWidth'], -elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: opt_extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes\n  });\n}\n"],"names":["super","const","let"],"mappings":"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"}