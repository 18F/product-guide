{"version":3,"file":"interpolate.js","sources":["../../../../src/ol/geom/flat/interpolate.js"],"sourcesContent":["/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>=} opt_dest Destination.\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {\n  let pointX = NaN;\n  let pointY = NaN;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    pointX = flatCoordinates[offset];\n    pointY = flatCoordinates[offset + 1];\n  } else if (n == 2) {\n    pointX = (1 - fraction) * flatCoordinates[offset] +\n        fraction * flatCoordinates[offset + stride];\n    pointY = (1 - fraction) * flatCoordinates[offset + 1] +\n        fraction * flatCoordinates[offset + stride + 1];\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      const t = (target - cumulativeLengths[-index - 2]) /\n          (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      const o = offset + (-index - 2) * stride;\n      pointX = lerp(\n        flatCoordinates[o], flatCoordinates[o + stride], t);\n      pointY = lerp(\n        flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);\n    } else {\n      pointX = flatCoordinates[offset + index * stride];\n      pointY = flatCoordinates[offset + index * stride + 1];\n    }\n  }\n  if (opt_dest) {\n    opt_dest[0] = pointX;\n    opt_dest[1] = pointY;\n    return opt_dest;\n  } else {\n    return [pointX, pointY];\n  }\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i],\n      flatCoordinates[lo * stride + i], t));\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates, offset, end, stride, m, false);\n    }\n    offset = end;\n  }\n  return null;\n}\n"],"names":["let","const"],"mappings":"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"}