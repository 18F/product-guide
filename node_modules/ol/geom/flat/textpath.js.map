{"version":3,"file":"textpath.js","sources":["../../../../src/ol/geom/flat/textpath.js"],"sourcesContent":["/**\n * @module ol/geom/flat/textpath\n */\nimport {lerp} from '../../math.js';\n\n\n/**\n * @param {Array<number>} flatCoordinates Path to put text on.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @param {string} text Text to place on the path.\n * @param {function(string):number} measure Measure function returning the\n * width of the character passed as 1st argument.\n * @param {number} startM m along the path where the text starts.\n * @param {number} maxAngle Max angle between adjacent chars in radians.\n * @return {Array<Array<*>>} The result array of null if `maxAngle` was\n * exceeded. Entries of the array are x, y, anchorX, angle, chunk.\n */\nexport function drawTextOnPath(\n  flatCoordinates, offset, end, stride, text, measure, startM, maxAngle) {\n  const result = [];\n\n  // Keep text upright\n  const reverse = flatCoordinates[offset] > flatCoordinates[end - stride];\n\n  const numChars = text.length;\n\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  offset += stride;\n  let x2 = flatCoordinates[offset];\n  let y2 = flatCoordinates[offset + 1];\n  let segmentM = 0;\n  let segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n\n  let chunk = '';\n  let chunkLength = 0;\n  let data, index, previousAngle;\n  for (let i = 0; i < numChars; ++i) {\n    index = reverse ? numChars - i - 1 : i;\n    const char = text.charAt(index);\n    chunk = reverse ? char + chunk : chunk + char;\n    const charLength = measure(chunk) - chunkLength;\n    chunkLength += charLength;\n    const charM = startM + charLength / 2;\n    while (offset < end - stride && segmentM + segmentLength < charM) {\n      x1 = x2;\n      y1 = y2;\n      offset += stride;\n      x2 = flatCoordinates[offset];\n      y2 = flatCoordinates[offset + 1];\n      segmentM += segmentLength;\n      segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    }\n    const segmentPos = charM - segmentM;\n    let angle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      angle += angle > 0 ? -Math.PI : Math.PI;\n    }\n    if (previousAngle !== undefined) {\n      let delta = angle - previousAngle;\n      delta += (delta > Math.PI) ? -2 * Math.PI : (delta < -Math.PI) ? 2 * Math.PI : 0;\n      if (Math.abs(delta) > maxAngle) {\n        return null;\n      }\n    }\n    const interpolate = segmentPos / segmentLength;\n    const x = lerp(x1, x2, interpolate);\n    const y = lerp(y1, y2, interpolate);\n    if (previousAngle == angle) {\n      if (reverse) {\n        data[0] = x;\n        data[1] = y;\n        data[2] = charLength / 2;\n      }\n      data[4] = chunk;\n    } else {\n      chunk = char;\n      chunkLength = charLength;\n      data = [x, y, charLength / 2, angle, chunk];\n      if (reverse) {\n        result.unshift(data);\n      } else {\n        result.push(data);\n      }\n      previousAngle = angle;\n    }\n    startM += charLength;\n  }\n  return result;\n}\n"],"names":["const","let"],"mappings":"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"}