{"version":3,"file":"MultiLineString.js","sources":["../../../src/ol/geom/MultiLineString.js"],"sourcesContent":["/**\n * @module ol/geom/MultiLineString\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestArrayPoint, arrayMaxSquaredDelta} from './flat/closest.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {interpolatePoint, lineStringsCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `opt_layout` and `opt_ends` are also accepted.)\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @param {Array<number>=} opt_ends Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n    } else if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n      this.ends_ = opt_ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {\n    if ((this.layout != GeometryLayout.XYM &&\n         this.layout != GeometryLayout.XYZM) ||\n        this.flatCoordinates.length === 0) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0,\n      this.ends_, this.stride, m, extrapolate, interpolate);\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(this.flatCoordinates.slice(\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.MULTI_LINE_STRING;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\n\nexport default MultiLineString;\n"],"names":["super","let","const"],"mappings":"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"}