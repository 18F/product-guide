{"version":3,"file":"Polygon.js","sources":["../../../src/ol/geom/Polygon.js"],"sourcesContent":["/**\n * @module ol/geom/Polygon\n */\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {offset as sphereOffset} from '../sphere.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {assignClosestArrayPoint, arrayMaxSquaredDelta} from './flat/closest.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingIsOriented, orientLinearRings} from './flat/orient.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {modulo} from '../math.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `opt_layout` and `opt_ends` are also accepted.)\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));\n      this.ends_ = opt_ends;\n    } else {\n      this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n    }\n\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @override\n   * @api\n   */\n  clone() {\n    return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @override\n   * @api\n   */\n  getCoordinates(opt_right) {\n    let flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(\n        flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(\n      flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,\n        flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(this.flatCoordinates.slice(\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingIsOriented(\n        flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length =\n            orientLinearRings(\n              this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates, 0, this.ends_, this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  getType() {\n    return GeometryType.POLYGON;\n  }\n\n  /**\n   * @inheritDoc\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout=} opt_layout Layout.\n   * @override\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\n\nexport default Polygon;\n\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  const n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates =\n      [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  const sides = opt_sides ? opt_sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = opt_angle ? opt_angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI / sides);\n    flatCoordinates[offset] = center[0] + (radius * Math.cos(angle));\n    flatCoordinates[offset + 1] = center[1] + (radius * Math.sin(angle));\n  }\n  polygon.changed();\n}\n"],"names":["super","let","const"],"mappings":"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"}