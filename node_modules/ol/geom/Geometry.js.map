{"version":3,"file":"Geometry.js","sources":["../../../src/ol/geom/Geometry.js"],"sourcesContent":["/**\n * @module ol/geom/Geometry\n */\nimport {abstract} from '../util.js';\nimport BaseObject from '../Object.js';\nimport {createEmpty, getHeight, returnOrUpdate} from '../extent.js';\nimport {transform2D} from './flat/transform.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport Units from '../proj/Units.js';\nimport {create as createTransform, compose as composeTransform} from '../transform.js';\n\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {Object<string, Geometry>}\n     */\n    this.simplifiedGeometryCache = {};\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return false;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_closestPoint Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, opt_closestPoint) {\n    const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      this.extent_ = this.computeExtent(this.extent_);\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, opt_extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number=} opt_sy The scaling factor in the y-direction (defaults to\n   *     sx).\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_anchor The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the the {@link\n   * https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm\n   * Douglas Peucker} algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to each coordinate of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn = sourceProj.getUnits() == Units.TILE_PIXELS ?\n      function(inCoordinates, outCoordinates, stride) {\n        const pixelExtent = sourceProj.getExtent();\n        const projectedExtent = sourceProj.getWorldExtent();\n        const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n        composeTransform(tmpTransform,\n          projectedExtent[0], projectedExtent[3],\n          scale, -scale, 0,\n          0, 0);\n        transform2D(inCoordinates, 0, inCoordinates.length, stride,\n          tmpTransform, outCoordinates);\n        return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);\n      } :\n      getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n\n}\n\n\nexport default Geometry;\n"],"names":["const","super"],"mappings":"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"}