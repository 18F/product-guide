{"version":3,"file":"WKT.js","sources":["../../../src/ol/format/WKT.js"],"sourcesContent":["/**\n * @module ol/format/WKT\n */\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from './Feature.js';\nimport TextFeature from './TextFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\n\n\n/**\n * Geometry constructors\n * @enum {function (new:import(\"../geom/Geometry.js\").default, Array, GeometryLayout)}\n */\nconst GeometryConstructor = {\n  'POINT': Point,\n  'LINESTRING': LineString,\n  'POLYGON': Polygon,\n  'MULTIPOINT': MultiPoint,\n  'MULTILINESTRING': MultiLineString,\n  'MULTIPOLYGON': MultiPolygon\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into\n * multiple features on reading.\n */\n\n/**\n * @typedef {Object} Token\n * @property {number} type\n * @property {number|string} [value]\n * @property {number} position\n */\n\n/**\n * @const\n * @type {string}\n */\nconst EMPTY = 'EMPTY';\n\n\n/**\n * @const\n * @type {string}\n */\nconst Z = 'Z';\n\n\n/**\n * @const\n * @type {string}\n */\nconst M = 'M';\n\n\n/**\n * @const\n * @type {string}\n */\nconst ZM = 'ZM';\n\n\n/**\n * @const\n * @enum {number}\n */\nconst TokenType = {\n  TEXT: 1,\n  LEFT_PAREN: 2,\n  RIGHT_PAREN: 3,\n  NUMBER: 4,\n  COMMA: 5,\n  EOF: 6\n};\n\n/**\n * @const\n * @type {Object<string, string>}\n */\nconst WKTGeometryType = {};\nfor (const type in GeometryType) {\n  WKTGeometryType[type] = GeometryType[type].toUpperCase();\n}\n\n\n/**\n * Class to tokenize a WKT string.\n */\nclass Lexer {\n\n  /**\n   * @param {string} wkt WKT string.\n   */\n  constructor(wkt) {\n\n    /**\n     * @type {string}\n     */\n    this.wkt = wkt;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.index_ = -1;\n  }\n\n  /**\n   * @param {string} c Character.\n   * @return {boolean} Whether the character is alphabetic.\n   * @private\n   */\n  isAlpha_(c) {\n    return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z';\n  }\n\n  /**\n   * @param {string} c Character.\n   * @param {boolean=} opt_decimal Whether the string number\n   *     contains a dot, i.e. is a decimal number.\n   * @return {boolean} Whether the character is numeric.\n   * @private\n   */\n  isNumeric_(c, opt_decimal) {\n    const decimal = opt_decimal !== undefined ? opt_decimal : false;\n    return c >= '0' && c <= '9' || c == '.' && !decimal;\n  }\n\n  /**\n   * @param {string} c Character.\n   * @return {boolean} Whether the character is whitespace.\n   * @private\n   */\n  isWhiteSpace_(c) {\n    return c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\n  }\n\n  /**\n   * @return {string} Next string character.\n   * @private\n   */\n  nextChar_() {\n    return this.wkt.charAt(++this.index_);\n  }\n\n  /**\n   * Fetch and return the next token.\n   * @return {!Token} Next string token.\n   */\n  nextToken() {\n    const c = this.nextChar_();\n    const position = this.index_;\n    /** @type {number|string} */\n    let value = c;\n    let type;\n\n    if (c == '(') {\n      type = TokenType.LEFT_PAREN;\n    } else if (c == ',') {\n      type = TokenType.COMMA;\n    } else if (c == ')') {\n      type = TokenType.RIGHT_PAREN;\n    } else if (this.isNumeric_(c) || c == '-') {\n      type = TokenType.NUMBER;\n      value = this.readNumber_();\n    } else if (this.isAlpha_(c)) {\n      type = TokenType.TEXT;\n      value = this.readText_();\n    } else if (this.isWhiteSpace_(c)) {\n      return this.nextToken();\n    } else if (c === '') {\n      type = TokenType.EOF;\n    } else {\n      throw new Error('Unexpected character: ' + c);\n    }\n\n    return {position: position, value: value, type: type};\n  }\n\n  /**\n   * @return {number} Numeric token value.\n   * @private\n   */\n  readNumber_() {\n    let c;\n    const index = this.index_;\n    let decimal = false;\n    let scientificNotation = false;\n    do {\n      if (c == '.') {\n        decimal = true;\n      } else if (c == 'e' || c == 'E') {\n        scientificNotation = true;\n      }\n      c = this.nextChar_();\n    } while (\n      this.isNumeric_(c, decimal) ||\n        // if we haven't detected a scientific number before, 'e' or 'E'\n        // hint that we should continue to read\n        !scientificNotation && (c == 'e' || c == 'E') ||\n        // once we know that we have a scientific number, both '-' and '+'\n        // are allowed\n        scientificNotation && (c == '-' || c == '+')\n    );\n    return parseFloat(this.wkt.substring(index, this.index_--));\n  }\n\n  /**\n   * @return {string} String token value.\n   * @private\n   */\n  readText_() {\n    let c;\n    const index = this.index_;\n    do {\n      c = this.nextChar_();\n    } while (this.isAlpha_(c));\n    return this.wkt.substring(index, this.index_--).toUpperCase();\n  }\n}\n\n/**\n * Class to parse the tokens from the WKT string.\n */\nclass Parser {\n\n  /**\n   * @param {Lexer} lexer The lexer.\n   */\n  constructor(lexer) {\n\n    /**\n     * @type {Lexer}\n     * @private\n     */\n    this.lexer_ = lexer;\n\n    /**\n     * @type {Token}\n     * @private\n     */\n    this.token_;\n\n    /**\n     * @type {GeometryLayout}\n     * @private\n     */\n    this.layout_ = GeometryLayout.XY;\n  }\n\n  /**\n   * Fetch the next token form the lexer and replace the active token.\n   * @private\n   */\n  consume_() {\n    this.token_ = this.lexer_.nextToken();\n  }\n\n  /**\n   * Tests if the given type matches the type of the current token.\n   * @param {TokenType} type Token type.\n   * @return {boolean} Whether the token matches the given type.\n   */\n  isTokenType(type) {\n    const isMatch = this.token_.type == type;\n    return isMatch;\n  }\n\n  /**\n   * If the given type matches the current token, consume it.\n   * @param {TokenType} type Token type.\n   * @return {boolean} Whether the token matches the given type.\n   */\n  match(type) {\n    const isMatch = this.isTokenType(type);\n    if (isMatch) {\n      this.consume_();\n    }\n    return isMatch;\n  }\n\n  /**\n   * Try to parse the tokens provided by the lexer.\n   * @return {import(\"../geom/Geometry.js\").default} The geometry.\n   */\n  parse() {\n    this.consume_();\n    const geometry = this.parseGeometry_();\n    return geometry;\n  }\n\n  /**\n   * Try to parse the dimensional info.\n   * @return {GeometryLayout} The layout.\n   * @private\n   */\n  parseGeometryLayout_() {\n    let layout = GeometryLayout.XY;\n    const dimToken = this.token_;\n    if (this.isTokenType(TokenType.TEXT)) {\n      const dimInfo = dimToken.value;\n      if (dimInfo === Z) {\n        layout = GeometryLayout.XYZ;\n      } else if (dimInfo === M) {\n        layout = GeometryLayout.XYM;\n      } else if (dimInfo === ZM) {\n        layout = GeometryLayout.XYZM;\n      }\n      if (layout !== GeometryLayout.XY) {\n        this.consume_();\n      }\n    }\n    return layout;\n  }\n\n  /**\n   * @return {!Array<import(\"../geom/Geometry.js\").default>} A collection of geometries.\n   * @private\n   */\n  parseGeometryCollectionText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const geometries = [];\n      do {\n        geometries.push(this.parseGeometry_());\n      } while (this.match(TokenType.COMMA));\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return geometries;\n      }\n    } else if (this.isEmptyGeometry_()) {\n      return [];\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {Array<number>} All values in a point.\n   * @private\n   */\n  parsePointText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parsePoint_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    } else if (this.isEmptyGeometry_()) {\n      return null;\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {!Array<!Array<number>>} All points in a linestring.\n   * @private\n   */\n  parseLineStringText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parsePointList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    } else if (this.isEmptyGeometry_()) {\n      return [];\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {!Array<!Array<!Array<number>>>} All points in a polygon.\n   * @private\n   */\n  parsePolygonText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parseLineStringTextList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    } else if (this.isEmptyGeometry_()) {\n      return [];\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {!Array<!Array<number>>} All points in a multipoint.\n   * @private\n   */\n  parseMultiPointText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      let coordinates;\n      if (this.token_.type == TokenType.LEFT_PAREN) {\n        coordinates = this.parsePointTextList_();\n      } else {\n        coordinates = this.parsePointList_();\n      }\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    } else if (this.isEmptyGeometry_()) {\n      return [];\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {!Array<!Array<!Array<number>>>} All linestring points\n   *                                          in a multilinestring.\n   * @private\n   */\n  parseMultiLineStringText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parseLineStringTextList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    } else if (this.isEmptyGeometry_()) {\n      return [];\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {!Array<!Array<!Array<!Array<number>>>>} All polygon points in a multipolygon.\n   * @private\n   */\n  parseMultiPolygonText_() {\n    if (this.match(TokenType.LEFT_PAREN)) {\n      const coordinates = this.parsePolygonTextList_();\n      if (this.match(TokenType.RIGHT_PAREN)) {\n        return coordinates;\n      }\n    } else if (this.isEmptyGeometry_()) {\n      return [];\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {!Array<number>} A point.\n   * @private\n   */\n  parsePoint_() {\n    const coordinates = [];\n    const dimensions = this.layout_.length;\n    for (let i = 0; i < dimensions; ++i) {\n      const token = this.token_;\n      if (this.match(TokenType.NUMBER)) {\n        coordinates.push(/** @type {number} */ (token.value));\n      } else {\n        break;\n      }\n    }\n    if (coordinates.length == dimensions) {\n      return coordinates;\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n\n  /**\n   * @return {!Array<!Array<number>>} An array of points.\n   * @private\n   */\n  parsePointList_() {\n    const coordinates = [this.parsePoint_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parsePoint_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {!Array<!Array<number>>} An array of points.\n   * @private\n   */\n  parsePointTextList_() {\n    const coordinates = [this.parsePointText_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parsePointText_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {!Array<!Array<!Array<number>>>} An array of points.\n   * @private\n   */\n  parseLineStringTextList_() {\n    const coordinates = [this.parseLineStringText_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parseLineStringText_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {!Array<!Array<!Array<!Array<number>>>>} An array of points.\n   * @private\n   */\n  parsePolygonTextList_() {\n    const coordinates = [this.parsePolygonText_()];\n    while (this.match(TokenType.COMMA)) {\n      coordinates.push(this.parsePolygonText_());\n    }\n    return coordinates;\n  }\n\n  /**\n   * @return {boolean} Whether the token implies an empty geometry.\n   * @private\n   */\n  isEmptyGeometry_() {\n    const isEmpty = this.isTokenType(TokenType.TEXT) &&\n        this.token_.value == EMPTY;\n    if (isEmpty) {\n      this.consume_();\n    }\n    return isEmpty;\n  }\n\n  /**\n   * Create an error message for an unexpected token error.\n   * @return {string} Error message.\n   * @private\n   */\n  formatErrorMessage_() {\n    return 'Unexpected `' + this.token_.value + '` at position ' +\n        this.token_.position + ' in `' + this.lexer_.wkt + '`';\n  }\n\n  /**\n   * @return {!import(\"../geom/Geometry.js\").default} The geometry.\n   * @private\n   */\n  parseGeometry_() {\n    const token = this.token_;\n    if (this.match(TokenType.TEXT)) {\n      const geomType = token.value;\n      this.layout_ = this.parseGeometryLayout_();\n      if (geomType == 'GEOMETRYCOLLECTION') {\n        const geometries = this.parseGeometryCollectionText_();\n        return new GeometryCollection(geometries);\n      } else {\n        const ctor = GeometryConstructor[geomType];\n        if (!ctor) {\n          throw new Error('Invalid geometry type: ' + geomType);\n        }\n\n        let coordinates;\n        switch (geomType) {\n          case 'POINT': {\n            coordinates = this.parsePointText_();\n            break;\n          }\n          case 'LINESTRING': {\n            coordinates = this.parseLineStringText_();\n            break;\n          }\n          case 'POLYGON': {\n            coordinates = this.parsePolygonText_();\n            break;\n          }\n          case 'MULTIPOINT': {\n            coordinates = this.parseMultiPointText_();\n            break;\n          }\n          case 'MULTILINESTRING': {\n            coordinates = this.parseMultiLineStringText_();\n            break;\n          }\n          case 'MULTIPOLYGON': {\n            coordinates = this.parseMultiPolygonText_();\n            break;\n          }\n          default: {\n            throw new Error('Invalid geometry type: ' + geomType);\n          }\n        }\n\n        if (!coordinates) {\n          if (ctor === GeometryConstructor['POINT']) {\n            coordinates = [NaN, NaN];\n          } else {\n            coordinates = [];\n          }\n        }\n        return new ctor(coordinates, this.layout_);\n      }\n    }\n    throw new Error(this.formatErrorMessage_());\n  }\n}\n\n\n/**\n * @classdesc\n * Geometry format for reading and writing data in the `WellKnownText` (WKT)\n * format.\n *\n * @api\n */\nclass WKT extends TextFeature {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n\n    /**\n     * Split GeometryCollection into multiple features.\n     * @type {boolean}\n     * @private\n     */\n    this.splitCollection_ = options.splitCollection !== undefined ?\n      options.splitCollection : false;\n\n  }\n\n  /**\n   * Parse a WKT string.\n   * @param {string} wkt WKT string.\n   * @return {import(\"../geom/Geometry.js\").default|undefined}\n   *     The geometry created.\n   * @private\n   */\n  parse_(wkt) {\n    const lexer = new Lexer(wkt);\n    const parser = new Parser(lexer);\n    return parser.parse();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeatureFromText(text, opt_options) {\n    const geom = this.readGeometryFromText(text, opt_options);\n    if (geom) {\n      const feature = new Feature();\n      feature.setGeometry(geom);\n      return feature;\n    }\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromText(text, opt_options) {\n    let geometries = [];\n    const geometry = this.readGeometryFromText(text, opt_options);\n    if (this.splitCollection_ &&\n        geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {\n      geometries = (/** @type {GeometryCollection} */ (geometry))\n        .getGeometriesArray();\n    } else {\n      geometries = [geometry];\n    }\n    const features = [];\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const feature = new Feature();\n      feature.setGeometry(geometries[i]);\n      features.push(feature);\n    }\n    return features;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readGeometryFromText(text, opt_options) {\n    const geometry = this.parse_(text);\n    if (geometry) {\n      return (\n        /** @type {import(\"../geom/Geometry.js\").default} */ (transformWithOptions(geometry, false, opt_options))\n      );\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  writeFeatureText(feature, opt_options) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      return this.writeGeometryText(geometry, opt_options);\n    }\n    return '';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  writeFeaturesText(features, opt_options) {\n    if (features.length == 1) {\n      return this.writeFeatureText(features[0], opt_options);\n    }\n    const geometries = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      geometries.push(features[i].getGeometry());\n    }\n    const collection = new GeometryCollection(geometries);\n    return this.writeGeometryText(collection, opt_options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  writeGeometryText(geometry, opt_options) {\n    return encode(/** @type {import(\"../geom/Geometry.js\").default} */ (\n      transformWithOptions(geometry, true, opt_options)));\n  }\n}\n\n\n/**\n * @param {Point} geom Point geometry.\n * @return {string} Coordinates part of Point as WKT.\n */\nfunction encodePointGeometry(geom) {\n  const coordinates = geom.getCoordinates();\n  if (coordinates.length === 0) {\n    return '';\n  }\n  return coordinates.join(' ');\n}\n\n\n/**\n * @param {MultiPoint} geom MultiPoint geometry.\n * @return {string} Coordinates part of MultiPoint as WKT.\n */\nfunction encodeMultiPointGeometry(geom) {\n  const array = [];\n  const components = geom.getPoints();\n  for (let i = 0, ii = components.length; i < ii; ++i) {\n    array.push('(' + encodePointGeometry(components[i]) + ')');\n  }\n  return array.join(',');\n}\n\n\n/**\n * @param {GeometryCollection} geom GeometryCollection geometry.\n * @return {string} Coordinates part of GeometryCollection as WKT.\n */\nfunction encodeGeometryCollectionGeometry(geom) {\n  const array = [];\n  const geoms = geom.getGeometries();\n  for (let i = 0, ii = geoms.length; i < ii; ++i) {\n    array.push(encode(geoms[i]));\n  }\n  return array.join(',');\n}\n\n\n/**\n * @param {LineString|import(\"../geom/LinearRing.js\").default} geom LineString geometry.\n * @return {string} Coordinates part of LineString as WKT.\n */\nfunction encodeLineStringGeometry(geom) {\n  const coordinates = geom.getCoordinates();\n  const array = [];\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    array.push(coordinates[i].join(' '));\n  }\n  return array.join(',');\n}\n\n\n/**\n * @param {MultiLineString} geom MultiLineString geometry.\n * @return {string} Coordinates part of MultiLineString as WKT.\n */\nfunction encodeMultiLineStringGeometry(geom) {\n  const array = [];\n  const components = geom.getLineStrings();\n  for (let i = 0, ii = components.length; i < ii; ++i) {\n    array.push('(' + encodeLineStringGeometry(components[i]) + ')');\n  }\n  return array.join(',');\n}\n\n\n/**\n * @param {Polygon} geom Polygon geometry.\n * @return {string} Coordinates part of Polygon as WKT.\n */\nfunction encodePolygonGeometry(geom) {\n  const array = [];\n  const rings = geom.getLinearRings();\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    array.push('(' + encodeLineStringGeometry(rings[i]) + ')');\n  }\n  return array.join(',');\n}\n\n\n/**\n * @param {MultiPolygon} geom MultiPolygon geometry.\n * @return {string} Coordinates part of MultiPolygon as WKT.\n */\nfunction encodeMultiPolygonGeometry(geom) {\n  const array = [];\n  const components = geom.getPolygons();\n  for (let i = 0, ii = components.length; i < ii; ++i) {\n    array.push('(' + encodePolygonGeometry(components[i]) + ')');\n  }\n  return array.join(',');\n}\n\n/**\n * @param {import(\"../geom/SimpleGeometry.js\").default} geom SimpleGeometry geometry.\n * @return {string} Potential dimensional information for WKT type.\n */\nfunction encodeGeometryLayout(geom) {\n  const layout = geom.getLayout();\n  let dimInfo = '';\n  if (layout === GeometryLayout.XYZ || layout === GeometryLayout.XYZM) {\n    dimInfo += Z;\n  }\n  if (layout === GeometryLayout.XYM || layout === GeometryLayout.XYZM) {\n    dimInfo += M;\n  }\n  return dimInfo;\n}\n\n\n/**\n * @const\n * @type {Object<string, function(import(\"../geom/Geometry.js\").default): string>}\n */\nconst GeometryEncoder = {\n  'Point': encodePointGeometry,\n  'LineString': encodeLineStringGeometry,\n  'Polygon': encodePolygonGeometry,\n  'MultiPoint': encodeMultiPointGeometry,\n  'MultiLineString': encodeMultiLineStringGeometry,\n  'MultiPolygon': encodeMultiPolygonGeometry,\n  'GeometryCollection': encodeGeometryCollectionGeometry\n};\n\n\n/**\n * Encode a geometry as WKT.\n * @param {!import(\"../geom/Geometry.js\").default} geom The geometry to encode.\n * @return {string} WKT string for the geometry.\n */\nfunction encode(geom) {\n  let type = geom.getType();\n  const geometryEncoder = GeometryEncoder[type];\n  const enc = geometryEncoder(geom);\n  type = type.toUpperCase();\n  if (typeof /** @type {?} */ (geom).getFlatCoordinates === 'function') {\n    const dimInfo = encodeGeometryLayout(/** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geom));\n    if (dimInfo.length > 0) {\n      type += ' ' + dimInfo;\n    }\n  }\n  if (enc.length === 0) {\n    return type + ' ' + EMPTY;\n  }\n  return type + '(' + enc + ')';\n}\n\n\nexport default WKT;\n"],"names":["const","let","super"],"mappings":"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"}