{"version":3,"file":"TopoJSON.js","sources":["../../../src/ol/format/TopoJSON.js"],"sourcesContent":["/**\n * @module ol/format/TopoJSON\n */\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from './Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {import(\"topojson-specification\").Topology} TopoJSONTopology\n * @typedef {import(\"topojson-specification\").GeometryCollection} TopoJSONGeometryCollection\n * @typedef {import(\"topojson-specification\").GeometryObject} TopoJSONGeometry\n * @typedef {import(\"topojson-specification\").Point} TopoJSONPoint\n * @typedef {import(\"topojson-specification\").MultiPoint} TopoJSONMultiPoint\n * @typedef {import(\"topojson-specification\").LineString} TopoJSONLineString\n * @typedef {import(\"topojson-specification\").MultiLineString} TopoJSONMultiLineString\n * @typedef {import(\"topojson-specification\").Polygon} TopoJSONPolygon\n * @typedef {import(\"topojson-specification\").MultiPolygon} TopoJSONMultiPolygon\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {string} [layerName] Set the name of the TopoJSON topology\n * `objects`'s children as feature property with the specified name. This means\n * that when set to `'layer'`, a topology like\n * ```\n * {\n *   \"type\": \"Topology\",\n *   \"objects\": {\n *     \"example\": {\n *       \"type\": \"GeometryCollection\",\n *       \"geometries\": []\n *     }\n *   }\n * }\n * ```\n * will result in features that have a property `'layer'` set to `'example'`.\n * When not set, no property will be added to features.\n * @property {Array<string>} [layers] Names of the TopoJSON topology's\n * `objects`'s children to read features from.  If not provided, features will\n * be read from all children.\n */\n\n\n/**\n * @classdesc\n * Feature format for reading data in the TopoJSON format.\n *\n * @api\n */\nclass TopoJSON extends JSONFeature {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.layerName_ = options.layerName;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.layers_ = options.layers ? options.layers : null;\n\n    /**\n     * @inheritDoc\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ?\n        options.dataProjection : 'EPSG:4326');\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromObject(object, opt_options) {\n    if (object.type == 'Topology') {\n      const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);\n      let transform, scale = null, translate = null;\n      if (topoJSONTopology['transform']) {\n        transform = topoJSONTopology['transform'];\n        scale = transform['scale'];\n        translate = transform['translate'];\n      }\n      const arcs = topoJSONTopology['arcs'];\n      if (transform) {\n        transformArcs(arcs, scale, translate);\n      }\n      /** @type {Array<Feature>} */\n      const features = [];\n      const topoJSONFeatures = topoJSONTopology['objects'];\n      const property = this.layerName_;\n      let feature;\n      for (const objectName in topoJSONFeatures) {\n        if (this.layers_ && this.layers_.indexOf(objectName) == -1) {\n          continue;\n        }\n        if (topoJSONFeatures[objectName].type === 'GeometryCollection') {\n          feature = /** @type {TopoJSONGeometryCollection} */ (topoJSONFeatures[objectName]);\n          features.push.apply(features, readFeaturesFromGeometryCollection(\n            feature, arcs, scale, translate, property, objectName, opt_options));\n        } else {\n          feature = /** @type {TopoJSONGeometry} */ (topoJSONFeatures[objectName]);\n          features.push(readFeatureFromGeometry(\n            feature, arcs, scale, translate, property, objectName, opt_options));\n        }\n      }\n      return features;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromObject(object) {\n    return this.dataProjection;\n  }\n\n}\n\n\n/**\n * @const\n * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import(\"../geom/Geometry.js\").default>}\n */\nconst GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry\n};\n\n\n/**\n * Concatenate arcs into a coordinate array.\n * @param {Array<number>} indices Indices of arcs to concatenate.  Negative\n *     values indicate arcs need to be reversed.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs (already\n *     transformed).\n * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates array.\n */\nfunction concatenateArcs(indices, arcs) {\n  /** @type {Array<import(\"../coordinate.js\").Coordinate>} */\n  const coordinates = [];\n  let index, arc;\n  for (let i = 0, ii = indices.length; i < ii; ++i) {\n    index = indices[i];\n    if (i > 0) {\n      // splicing together arcs, discard last point\n      coordinates.pop();\n    }\n    if (index >= 0) {\n      // forward arc\n      arc = arcs[index];\n    } else {\n      // reverse arc\n      arc = arcs[~index].slice().reverse();\n    }\n    coordinates.push.apply(coordinates, arc);\n  }\n  // provide fresh copies of coordinate arrays\n  for (let j = 0, jj = coordinates.length; j < jj; ++j) {\n    coordinates[j] = coordinates[j].slice();\n  }\n  return coordinates;\n}\n\n\n/**\n * Create a point from a TopoJSON geometry object.\n *\n * @param {TopoJSONPoint} object TopoJSON object.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @return {Point} Geometry.\n */\nfunction readPointGeometry(object, scale, translate) {\n  const coordinates = object['coordinates'];\n  if (scale && translate) {\n    transformVertex(coordinates, scale, translate);\n  }\n  return new Point(coordinates);\n}\n\n\n/**\n * Create a multi-point from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiPoint} object TopoJSON object.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @return {MultiPoint} Geometry.\n */\nfunction readMultiPointGeometry(object, scale, translate) {\n  const coordinates = object['coordinates'];\n  if (scale && translate) {\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n      transformVertex(coordinates[i], scale, translate);\n    }\n  }\n  return new MultiPoint(coordinates);\n}\n\n\n/**\n * Create a linestring from a TopoJSON geometry object.\n *\n * @param {TopoJSONLineString} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {LineString} Geometry.\n */\nfunction readLineStringGeometry(object, arcs) {\n  const coordinates = concatenateArcs(object['arcs'], arcs);\n  return new LineString(coordinates);\n}\n\n\n/**\n * Create a multi-linestring from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiLineString} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {MultiLineString} Geometry.\n */\nfunction readMultiLineStringGeometry(object, arcs) {\n  const coordinates = [];\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\n  }\n  return new MultiLineString(coordinates);\n}\n\n\n/**\n * Create a polygon from a TopoJSON geometry object.\n *\n * @param {TopoJSONPolygon} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {Polygon} Geometry.\n */\nfunction readPolygonGeometry(object, arcs) {\n  const coordinates = [];\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    coordinates[i] = concatenateArcs(object['arcs'][i], arcs);\n  }\n  return new Polygon(coordinates);\n}\n\n\n/**\n * Create a multi-polygon from a TopoJSON geometry object.\n *\n * @param {TopoJSONMultiPolygon} object TopoJSON object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @return {MultiPolygon} Geometry.\n */\nfunction readMultiPolygonGeometry(object, arcs) {\n  const coordinates = [];\n  for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {\n    // for each polygon\n    const polyArray = object['arcs'][i];\n    const ringCoords = [];\n    for (let j = 0, jj = polyArray.length; j < jj; ++j) {\n      // for each ring\n      ringCoords[j] = concatenateArcs(polyArray[j], arcs);\n    }\n    coordinates[i] = ringCoords;\n  }\n  return new MultiPolygon(coordinates);\n}\n\n\n/**\n * Create features from a TopoJSON GeometryCollection object.\n *\n * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry\n *     object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\n *     object to.\n * @param {string} name Name of the `Topology`'s child object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {Array<Feature>} Array of features.\n */\nfunction readFeaturesFromGeometryCollection(collection, arcs, scale, translate, property, name, opt_options) {\n  const geometries = collection['geometries'];\n  const features = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    features[i] = readFeatureFromGeometry(\n      geometries[i], arcs, scale, translate, property, name, opt_options);\n  }\n  return features;\n}\n\n\n/**\n * Create a feature from a TopoJSON geometry object.\n *\n * @param {TopoJSONGeometry} object TopoJSON geometry object.\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\n *     object to.\n * @param {string} name Name of the `Topology`'s child object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {Feature} Feature.\n */\nfunction readFeatureFromGeometry(object, arcs, scale, translate, property, name, opt_options) {\n  let geometry;\n  const type = object.type;\n  const geometryReader = GEOMETRY_READERS[type];\n  if ((type === 'Point') || (type === 'MultiPoint')) {\n    geometry = geometryReader(object, scale, translate);\n  } else {\n    geometry = geometryReader(object, arcs);\n  }\n  const feature = new Feature();\n  feature.setGeometry(/** @type {import(\"../geom/Geometry.js\").default} */ (\n    transformWithOptions(geometry, false, opt_options)));\n  if (object.id !== undefined) {\n    feature.setId(object.id);\n  }\n  let properties = object.properties;\n  if (property) {\n    if (!properties) {\n      properties = {};\n    }\n    properties[property] = name;\n  }\n  if (properties) {\n    feature.setProperties(properties);\n  }\n  return feature;\n}\n\n\n/**\n * Apply a linear transform to array of arcs.  The provided array of arcs is\n * modified in place.\n *\n * @param {Array<Array<import(\"../coordinate.js\").Coordinate>>} arcs Array of arcs.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\nfunction transformArcs(arcs, scale, translate) {\n  for (let i = 0, ii = arcs.length; i < ii; ++i) {\n    transformArc(arcs[i], scale, translate);\n  }\n}\n\n\n/**\n * Apply a linear transform to an arc.  The provided arc is modified in place.\n *\n * @param {Array<import(\"../coordinate.js\").Coordinate>} arc Arc.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\nfunction transformArc(arc, scale, translate) {\n  let x = 0;\n  let y = 0;\n  for (let i = 0, ii = arc.length; i < ii; ++i) {\n    const vertex = arc[i];\n    x += vertex[0];\n    y += vertex[1];\n    vertex[0] = x;\n    vertex[1] = y;\n    transformVertex(vertex, scale, translate);\n  }\n}\n\n\n/**\n * Apply a linear transform to a vertex.  The provided vertex is modified in\n * place.\n *\n * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n * @param {Array<number>} scale Scale for each dimension.\n * @param {Array<number>} translate Translation for each dimension.\n */\nfunction transformVertex(vertex, scale, translate) {\n  vertex[0] = vertex[0] * scale[0] + translate[0];\n  vertex[1] = vertex[1] * scale[1] + translate[1];\n}\n\n\nexport default TopoJSON;\n"],"names":["super","const","let"],"mappings":"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"}