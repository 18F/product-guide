{"version":3,"file":"GeoJSON.js","sources":["../../../src/ol/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n\nimport {assert} from '../asserts.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from './Feature.js';\nimport JSONFeature from './JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport GeometryType from '../geom/GeometryType.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n  * @api\n */\nclass GeoJSON extends JSONFeature {\n\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n\n    const options = opt_options ? opt_options : {};\n\n    super();\n\n    /**\n     * @inheritDoc\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ?\n        options.dataProjection : 'EPSG:4326');\n\n    if (options.featureProjection) {\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeatureFromObject(object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties']);\n    }\n    return feature;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readFeaturesFromObject(object, opt_options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n    return features;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readGeometryFromObject(object, opt_options) {\n    return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return (\n      /** @type {import(\"../proj/Projection.js\").default} */ (projection)\n    );\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeature} Object.\n   * @override\n   * @api\n   */\n  writeFeatureObject(feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n    }\n\n    const properties = feature.getProperties();\n    delete properties[feature.getGeometryName()];\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @override\n   * @api\n   */\n  writeFeaturesObject(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @override\n   * @api\n   */\n  writeGeometryObject(geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  }\n}\n\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case GeometryType.POINT: {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geometry = readLineStringGeometry(/** @type {GeoJSONLineString} */ (object));\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geometry = readMultiPointGeometry(/** @type {GeoJSONMultiPoint} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geometry = readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geometry = readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon} */ (object));\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geometry = readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */ (object));\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object.type);\n    }\n  }\n  return /** @type {import(\"../geom/Geometry.js\").default} */ (transformWithOptions(geometry, false, opt_options));\n}\n\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function(geometry) {\n      return readGeometry(geometry, opt_options);\n    });\n  return new GeometryCollection(geometries);\n}\n\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (transformWithOptions(geometry, true, opt_options));\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case GeometryType.POINT: {\n      geoJSON = writePointGeometry(/** @type {Point} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geoJSON = writeLineStringGeometry(/** @type {LineString} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geoJSON = writePolygonGeometry(/** @type {Polygon} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geoJSON = writeMultiPointGeometry(/** @type {MultiPoint} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geoJSON = writeMultiLineStringGeometry(/** @type {MultiLineString} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geoJSON = writeMultiPolygonGeometry(/** @type {MultiPolygon} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geoJSON = writeGeometryCollectionGeometry(/** @type {GeometryCollection} */ (geometry), opt_options);\n      break;\n    }\n    case GeometryType.CIRCLE: {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: []\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function(geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n\n\nexport default GeoJSON;\n"],"names":["const","super","let"],"mappings":"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"}