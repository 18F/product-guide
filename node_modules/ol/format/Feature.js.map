{"version":3,"file":"Feature.js","sources":["../../../src/ol/format/Feature.js"],"sourcesContent":["/**\n * @module ol/format/Feature\n */\nimport {assign} from '../obj.js';\nimport {abstract} from '../util.js';\nimport {get as getProjection, equivalent as equivalentProjection, transformExtent} from '../proj.js';\n\n\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent of the tile being read. This is only used and\n * required for {@link module:ol/format/MVT}.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n\n\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\nclass FeatureFormat {\n  constructor() {\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = null;\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.defaultFeatureProjection = null;\n\n  }\n\n  /**\n   * Adds the data projection to the read options.\n   * @param {Document|Node|Object|string} source Source.\n   * @param {ReadOptions=} opt_options Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */\n  getReadOptions(source, opt_options) {\n    let options;\n    if (opt_options) {\n      options = {\n        dataProjection: opt_options.dataProjection ?\n          opt_options.dataProjection : this.readProjection(source),\n        featureProjection: opt_options.featureProjection\n      };\n    }\n    return this.adaptOptions(options);\n  }\n\n  /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */\n  adaptOptions(options) {\n    return assign({\n      dataProjection: this.dataProjection,\n      featureProjection: this.defaultFeatureProjection\n    }, options);\n  }\n\n  /**\n   * Get the extent from the source of the last {@link readFeatures} call.\n   * @return {import(\"../extent.js\").Extent} Tile extent.\n   */\n  getLastExtent() {\n    return null;\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"./FormatType.js\").default} Format.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Node|Object|string} source Source.\n   * @param {ReadOptions=} opt_options Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */\n  readFeature(source, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Node|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions=} opt_options Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  readFeatures(source, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Node|Object|string} source Source.\n   * @param {ReadOptions=} opt_options Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometry(source, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Node|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjection(source) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions=} opt_options Write options.\n   * @return {string} Result.\n   */\n  writeFeature(feature, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions=} opt_options Write options.\n   * @return {string} Result.\n   */\n  writeFeatures(features, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions=} opt_options Write options.\n   * @return {string} Result.\n   */\n  writeGeometry(geometry, opt_options) {\n    return abstract();\n  }\n}\n\nexport default FeatureFormat;\n\n/**\n * @param {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {(WriteOptions|ReadOptions)=} opt_options Options.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent} Transformed geometry.\n */\nexport function transformWithOptions(geometry, write, opt_options) {\n  const featureProjection = opt_options ?\n    getProjection(opt_options.featureProjection) : null;\n  const dataProjection = opt_options ?\n    getProjection(opt_options.dataProjection) : null;\n  /**\n   * @type {import(\"../geom/Geometry.js\").default|import(\"../extent.js\").Extent}\n   */\n  let transformed;\n  if (featureProjection && dataProjection &&\n      !equivalentProjection(featureProjection, dataProjection)) {\n    if (Array.isArray(geometry)) {\n      // FIXME this is necessary because GML treats extents\n      // as geometries\n      transformed = transformExtent(\n        geometry,\n        dataProjection,\n        featureProjection);\n    } else {\n      transformed = (write ? /** @type {import(\"../geom/Geometry\").default} */ (geometry).clone() : geometry).transform(\n        write ? featureProjection : dataProjection,\n        write ? dataProjection : featureProjection);\n    }\n  } else {\n    transformed = geometry;\n  }\n  if (write && opt_options && /** @type {WriteOptions} */ (opt_options).decimals !== undefined &&\n    !Array.isArray(transformed)) {\n    const power = Math.pow(10, /** @type {WriteOptions} */ (opt_options).decimals);\n    // if decimals option on write, round each coordinate appropriately\n    /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */\n    const transform = function(coordinates) {\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\n      }\n      return coordinates;\n    };\n    if (transformed === geometry) {\n      transformed = /** @type {import(\"../geom/Geometry\").default} */ (geometry).clone();\n    }\n    transformed.applyTransform(transform);\n  }\n  return transformed;\n}\n"],"names":["let","const"],"mappings":"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"}