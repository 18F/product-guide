{"version":3,"file":"XMLFeature.js","sources":["../../../src/ol/format/XMLFeature.js"],"sourcesContent":["/**\n * @module ol/format/XMLFeature\n */\nimport {abstract} from '../util.js';\nimport {extend} from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport {isDocument, parse} from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @abstract\n */\nclass XMLFeature extends FeatureFormat {\n  constructor() {\n    super();\n\n    /**\n     * @type {XMLSerializer}\n     * @private\n     */\n    this.xmlSerializer_ = new XMLSerializer();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getType() {\n    return FormatType.XML;\n  }\n\n  /**\n   * Read a single feature.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeatureFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeatureFromDocument(/** @type {Document} */ (source), opt_options);\n    } else {\n      return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromDocument(doc, opt_options) {\n    const features = this.readFeaturesFromDocument(doc, opt_options);\n    if (features.length > 0) {\n      return features[0];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromNode(node, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read all features from a feature collection.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, opt_options) {\n    if (!source) {\n      return [];\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFeaturesFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readFeaturesFromDocument(\n        /** @type {Document} */ (source), opt_options);\n    } else {\n      return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromDocument(doc, opt_options) {\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    const features = [];\n    for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        extend(features, this.readFeaturesFromNode(n, opt_options));\n      }\n    }\n    return features;\n  }\n\n  /**\n   * @abstract\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromNode(node, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  readGeometry(source, opt_options) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readGeometryFromDocument(doc, opt_options);\n    } else if (isDocument(source)) {\n      return this.readGeometryFromDocument(\n        /** @type {Document} */ (source), opt_options);\n    } else {\n      return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromDocument(doc, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromNode(node, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Read the projection from the source.\n   *\n   * @param {Document|Node|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    if (!source) {\n      return null;\n    } else if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readProjectionFromDocument(doc);\n    } else if (isDocument(source)) {\n      return this.readProjectionFromDocument(/** @type {Document} */ (source));\n    } else {\n      return this.readProjectionFromNode(/** @type {Node} */ (source));\n    }\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromDocument(doc) {\n    return this.dataProjection;\n  }\n\n  /**\n   * @param {Node} node Node.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromNode(node) {\n    return this.dataProjection;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  writeFeature(feature, opt_options) {\n    const node = this.writeFeatureNode(feature, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @protected\n   * @return {Node} Node.\n   */\n  writeFeatureNode(feature, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {string} Result.\n   * @api\n   */\n  writeFeatures(features, opt_options) {\n    const node = this.writeFeaturesNode(features, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n  writeFeaturesNode(features, opt_options) {\n    return null; // not implemented\n  }\n\n  /**\n   * @inheritDoc\n   */\n  writeGeometry(geometry, opt_options) {\n    const node = this.writeGeometryNode(geometry, opt_options);\n    return this.xmlSerializer_.serializeToString(node);\n  }\n\n  /**\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Options.\n   * @return {Node} Node.\n   */\n  writeGeometryNode(geometry, opt_options) {\n    return null; // not implemented\n  }\n}\n\n\nexport default XMLFeature;\n"],"names":["super","const","let"],"mappings":"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"}