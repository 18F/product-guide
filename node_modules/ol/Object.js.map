{"version":3,"file":"Object.js","sources":["../../src/ol/Object.js"],"sourcesContent":["/**\n * @module ol/Object\n */\nimport {getUid} from './util.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport Event from './events/Event.js';\nimport {assign} from './obj.js';\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n\n  }\n\n}\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n\n  /**\n   * @param {Object<string, *>=} opt_values An object with key-value pairs.\n   */\n  constructor(opt_values) {\n    super();\n\n    // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {!Object<string, *>}\n     */\n    this.values_ = {};\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return Object.keys(this.values_);\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return assign({}, this.values_);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = getChangeEventType(key);\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  set(key, value, opt_silent) {\n    if (opt_silent) {\n      this.values_[key] = value;\n    } else {\n      const oldValue = this.values_[key];\n      this.values_[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean=} opt_silent Update without triggering an event.\n   * @api\n   */\n  setProperties(values, opt_silent) {\n    for (const key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean=} opt_silent Unset without triggering an event.\n   * @api\n   */\n  unset(key, opt_silent) {\n    if (key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\n\n/**\n * @type {Object<string, string>}\n */\nconst changeEventTypeCache = {};\n\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\nexport function getChangeEventType(key) {\n  return changeEventTypeCache.hasOwnProperty(key) ?\n    changeEventTypeCache[key] :\n    (changeEventTypeCache[key] = 'change:' + key);\n}\n\n\nexport default BaseObject;\n"],"names":["super","let","const"],"mappings":"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"}