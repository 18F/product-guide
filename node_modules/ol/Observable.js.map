{"version":3,"file":"Observable.js","sources":["../../src/ol/Observable.js"],"sourcesContent":["/**\n * @module ol/Observable\n */\nimport {listen, unlistenByKey, unlisten, listenOnce} from './events.js';\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").Event\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  on(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  once(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listenOnce(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listenOnce(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  un(type, listener) {\n    if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        unlisten(this, type[i], listener);\n      }\n      return;\n    } else {\n      unlisten(this, /** @type {string} */ (type), listener);\n    }\n  }\n}\n\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\n\nexport default Observable;\n"],"names":["super","const","let"],"mappings":"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"}