{"version":3,"file":"Feature.js","sources":["../../src/ol/Feature.js"],"sourcesContent":["/**\n * @module ol/Feature\n */\nimport {assert} from './asserts.js';\nimport {listen, unlisten, unlistenByKey} from './events.js';\nimport EventType from './events/EventType.js';\nimport BaseObject, {getChangeEventType} from './Object.js';\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n */\nclass Feature extends BaseObject {\n  /**\n   * @param {import(\"./geom/Geometry.js\").default|Object<string, *>=} opt_geometryOrProperties\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */\n  constructor(opt_geometryOrProperties) {\n\n    super();\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    this.style_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.geometryChangeKey_ = null;\n\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n\n    if (opt_geometryOrProperties) {\n      if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {\n        const geometry = /** @type {import(\"./geom/Geometry.js\").default} */ (opt_geometryOrProperties);\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        const properties = opt_geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature} The clone.\n   * @api\n   */\n  clone() {\n    const clone = new Feature(this.getProperties());\n    clone.setGeometryName(this.getGeometryName());\n    const geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(geometry.clone());\n    }\n    const style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  }\n\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {import(\"./geom/Geometry.js\").default|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  getGeometry() {\n    return (\n      /** @type {import(\"./geom/Geometry.js\").default|undefined} */ (this.get(this.geometryName_))\n    );\n  }\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  getGeometryName() {\n    return this.geometryName_;\n  }\n\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike} The feature style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChanged_() {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    const geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry,\n        EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {import(\"./geom/Geometry.js\").default|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  setGeometry(geometry) {\n    this.set(this.geometryName_, geometry);\n  }\n\n  /**\n   * Set the style for the feature.  This can be a single style object, an array\n   * of styles, or a function that takes a resolution and returns an array of\n   * styles. If it is `null` the feature has no style (a `null` style).\n   * @param {import(\"./style/Style.js\").StyleLike} style Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  setStyle(style) {\n    this.style_ = style;\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n    this.changed();\n  }\n\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~Event#event:change\n   */\n  setId(id) {\n    this.id_ = id;\n    this.changed();\n  }\n\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  setGeometryName(name) {\n    unlisten(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.geometryName_ = name;\n    listen(\n      this, getChangeEventType(this.geometryName_),\n      this.handleGeometryChanged_, this);\n    this.handleGeometryChanged_();\n  }\n}\n\n\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array<import(\"./style/Style.js\").default>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof /** @type {?} */ (obj).getZIndex === 'function',\n        41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n      const style = /** @type {import(\"./style/Style.js\").default} */ (obj);\n      styles = [style];\n    }\n    return function() {\n      return styles;\n    };\n  }\n}\nexport default Feature;\n"],"names":["super","const","let"],"mappings":"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"}