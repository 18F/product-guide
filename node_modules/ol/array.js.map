{"version":3,"file":"array.js","sources":["../../src/ol/array.js"],"sourcesContent":["/**\n * @module ol/array\n */\n\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function=} opt_comparator Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, opt_comparator) {\n  let mid, cmp;\n  const comparator = opt_comparator || numberSafeCompareFunction;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) { /* Too low. */\n      low = mid + 1;\n\n    } else { /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function numberSafeCompareFunction(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n\n/**\n * Whether the array contains the given object.\n * @param {Array<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\nexport function includes(arr, obj) {\n  return arr.indexOf(obj) >= 0;\n}\n\n\n/**\n * @param {Array<number>} arr Array.\n * @param {number} target Target.\n * @param {number} direction 0 means return the nearest, > 0\n *    means return the largest nearest, < 0 means return the\n *    smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  const n = arr.length;\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    let i;\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n    return n - 1;\n  }\n}\n\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n\n/**\n * @param {Array<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE|null} The element found or null.\n */\nexport function find(arr, func) {\n  const length = arr.length >>> 0;\n  let value;\n\n  for (let i = 0; i < length; i++) {\n    value = arr[i];\n    if (func(value, i, arr)) {\n      return value;\n    }\n  }\n  return null;\n}\n\n\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n/**\n * Sort the passed array such that the relative order of equal elements is preverved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function(a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n\n/**\n * @param {Array<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\nexport function findIndex(arr, func) {\n  let index;\n  const found = !arr.every(function(el, idx) {\n    index = idx;\n    return !func(el, idx, arr);\n  });\n  return found ? index : -1;\n}\n\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function=} opt_func Comparison function.\n * @param {boolean=} opt_strict Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, opt_func, opt_strict) {\n  const compare = opt_func || numberSafeCompareFunction;\n  return arr.every(function(currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || opt_strict && res === 0);\n  });\n}\n"],"names":["let","const"],"mappings":"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"}