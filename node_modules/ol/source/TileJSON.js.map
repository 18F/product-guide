{"version":3,"file":"TileJSON.js","sources":["../../../src/ol/source/TileJSON.js"],"sourcesContent":["/**\n * @module ol/source/TileJSON\n */\n// FIXME check order of async callbacks\n\n/**\n * See http://mapbox.com/developers/api/.\n */\n\n\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {assert} from '../asserts.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n\n/**\n * @typedef {Object} Config\n * @property {string} [name] The name.\n * @property {string} [description] The description.\n * @property {string} [version] The version.\n * @property {string} [attribution] The attribution.\n * @property {string} [template] The template.\n * @property {string} [legend] The legend.\n * @property {string} [scheme] The scheme.\n * @property {Array<string>} tiles The tile URL templates.\n * @property {Array<string>} [grids] Optional grids.\n * @property {number} [minzoom] Minimum zoom level.\n * @property {number} [maxzoom] Maximum zoom level.\n * @property {Array<number>} [bounds] Optional bounds.\n * @property {Array<number>} [center] Optional center.\n */\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize=2048] Cache size.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n\n/**\n * @classdesc\n * Layer source for tile data in TileJSON format.\n * @api\n */\nclass TileJSON extends TileImage {\n  /**\n   * @param {Options} options TileJSON options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n\n    /**\n     * @type {Config}\n     * @private\n     */\n    this.tileJSON_ = null;\n\n\n    if (options.url) {\n      if (options.jsonp) {\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this));\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      let response;\n      try {\n        response = /** @type {TileJSON} */(JSON.parse(client.responseText));\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * @return {Config} The tilejson object.\n   * @api\n   */\n  getTileJSON() {\n    return this.tileJSON_;\n  }\n\n  /**\n   * @protected\n   * @param {Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\n\n    if (tileJSON['attribution'] !== undefined && !this.getAttributions()) {\n      const attributionExtent = extent !== undefined ?\n        extent : epsg4326Projection.getExtent();\n\n      this.setAttributions(function(frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n\n    }\n    this.tileJSON_ = tileJSON;\n    this.setState(SourceState.READY);\n\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState(SourceState.ERROR);\n  }\n}\n\n\nexport default TileJSON;\n"],"names":["super","const","let"],"mappings":"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"}