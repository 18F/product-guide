{"version":3,"file":"BingMaps.js","sources":["../../../src/ol/source/BingMaps.js"],"sourcesContent":["/**\n * @module ol/source/BingMaps\n */\n\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {jsonp as requestJSONP} from '../net.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport {createOrUpdate, quadKey} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' +\n      'href=\"https://www.microsoft.com/maps/product/terms.html\">' +\n      'Terms of Use</a>';\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize=2048] Cache size.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources\n */\n\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n\n    const url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\n        this.imagerySet_ +\n        '?uriScheme=https&include=ImageryProviders&key=' + this.apiKey_ +\n        '&c=' + this.culture_;\n\n    requestJSONP(url, this.handleImageryMetadataResponse.bind(this), undefined,\n      'jsonp');\n\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (response.statusCode != 200 ||\n        response.statusDescription != 'OK' ||\n        response.authenticationResultCode != 'ValidCredentials' ||\n        response.resourceSets.length != 1 ||\n        response.resourceSets[0].resources.length != 1) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize = resource.imageWidth == resource.imageHeight ?\n      resource.imageWidth / scale :\n      [resource.imageWidth / scale, resource.imageHeight / scale];\n\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    this.tileGrid = tileGrid;\n\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    this.tileUrlFunction = createFromTileUrlFunctions(\n      resource.imageUrlSubdomains.map(function(subdomain) {\n        const quadKeyTileCoord = [0, 0, 0];\n        const imageUrl = resource.imageUrl\n          .replace('{subdomain}', subdomain)\n          .replace('{culture}', culture);\n        return (\n          /**\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n           * @param {number} pixelRatio Pixel ratio.\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\n           * @return {string|undefined} Tile URL.\n           */\n          function(tileCoord, pixelRatio, projection) {\n            if (!tileCoord) {\n              return undefined;\n            } else {\n              createOrUpdate(tileCoord[0], tileCoord[1], -tileCoord[2] - 1, quadKeyTileCoord);\n              let url = imageUrl;\n              if (hidpi) {\n                url += '&dpi=d1&device=mobile';\n              }\n              return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n            }\n          }\n        );\n      }));\n\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(\n        getProjection('EPSG:4326'), this.getProjection());\n\n      this.setAttributions(function(frameState) {\n        const attributions = [];\n        const viewState = frameState.viewState;\n        const tileGrid = this.getTileGrid();\n        const tileCoord = tileGrid.getTileCoordForCoordAndResolution(viewState.center, viewState.resolution);\n        const zoom = tileCoord[0];\n        resource.imageryProviders.map(function(imageryProvider) {\n          let intersecting = false;\n          const coverageAreas = imageryProvider.coverageAreas;\n          for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            const coverageArea = coverageAreas[i];\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              const bbox = coverageArea.bbox;\n              const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              const extent = applyTransform(epsg4326Extent, transform);\n              if (intersects(extent, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      }.bind(this));\n    }\n\n    this.setState(SourceState.READY);\n  }\n}\n\nexport default BingMaps;\n"],"names":["const","super","let"],"mappings":"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"}