{"version":3,"file":"ImageMapGuide.js","sources":["../../../src/ol/source/ImageMapGuide.js"],"sourcesContent":["/**\n * @module ol/source/ImageMapGuide\n */\n\nimport ImageWrapper from '../Image.js';\nimport {listen} from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getHeight, getWidth, scaleFromCenter} from '../extent.js';\nimport {assign} from '../obj.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [url] The mapagent url.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {number} [displayDpi=96] The display resolution.\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {Object} [params] Additional parameters.\n */\n\n\n/**\n * @classdesc\n * Source for images from Mapguide servers\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\nclass ImageMapGuide extends ImageSource {\n  /**\n   * @param {Options} options ImageMapGuide options.\n   */\n  constructor(options) {\n\n    super({\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.displayDpi_ = options.displayDpi !== undefined ?\n      options.displayDpi : 96;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n      options.imageLoadFunction : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.metersPerUnit_ = options.metersPerUnit !== undefined ?\n      options.metersPerUnit : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useOverlay_ = options.useOverlay !== undefined ?\n      options.useOverlay : false;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    let image = this.image_;\n    if (image &&\n        this.renderedRevision_ == this.getRevision() &&\n        image.getResolution() == resolution &&\n        image.getPixelRatio() == pixelRatio &&\n        containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    if (this.ratio_ != 1) {\n      extent = extent.slice();\n      scaleFromCenter(extent, this.ratio_);\n    }\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    if (this.url_ !== undefined) {\n      const imageUrl = this.getUrl(this.url_, this.params_, extent, size,\n        projection);\n      image = new ImageWrapper(extent, resolution, pixelRatio,\n        imageUrl, this.crossOrigin_,\n        this.imageLoadFunction_);\n      listen(image, EventType.CHANGE,\n        this.handleImageChange, this);\n    } else {\n      image = null;\n    }\n    this.image_ = image;\n    this.renderedRevision_ = this.getRevision();\n\n    return image;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.changed();\n  }\n\n  /**\n   * @param {string} baseUrl The mapagent url.\n   * @param {Object<string, string|number>} params Request parameters.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string} The mapagent map image request URL.\n   */\n  getUrl(baseUrl, params, extent, size, projection) {\n    const scale = getScale(extent, size,\n      this.metersPerUnit_, this.displayDpi_);\n    const center = getCenter(extent);\n    const baseParams = {\n      'OPERATION': this.useOverlay_ ? 'GETDYNAMICMAPOVERLAYIMAGE' : 'GETMAPIMAGE',\n      'VERSION': '2.0.0',\n      'LOCALE': 'en',\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\n      'CLIP': '1',\n      'SETDISPLAYDPI': this.displayDpi_,\n      'SETDISPLAYWIDTH': Math.round(size[0]),\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\n      'SETVIEWSCALE': scale,\n      'SETVIEWCENTERX': center[0],\n      'SETVIEWCENTERY': center[1]\n    };\n    assign(baseParams, params);\n    return appendParams(baseUrl, baseParams);\n  }\n\n  /**\n   * Set the image load function of the MapGuide source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n}\n\n\n/**\n * @param {import(\"../extent.js\").Extent} extent The map extents.\n * @param {import(\"../size.js\").Size} size The viewport size.\n * @param {number} metersPerUnit The meters-per-unit value.\n * @param {number} dpi The display resolution.\n * @return {number} The computed map scale.\n */\nfunction getScale(extent, size, metersPerUnit, dpi) {\n  const mcsW = getWidth(extent);\n  const mcsH = getHeight(extent);\n  const devW = size[0];\n  const devH = size[1];\n  const mpp = 0.0254 / dpi;\n  if (devH * mcsW > devW * mcsH) {\n    return mcsW * metersPerUnit / (devW * mpp); // width limited\n  } else {\n    return mcsH * metersPerUnit / (devH * mpp); // height limited\n  }\n}\n\n\nexport default ImageMapGuide;\n"],"names":["super","let","const"],"mappings":"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"}