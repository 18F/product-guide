{"version":3,"file":"Raster.js","sources":["../../../src/ol/source/Raster.js"],"sourcesContent":["/**\n * @module ol/source/Raster\n */\nimport {getUid} from '../util.js';\nimport ImageCanvas from '../ImageCanvas.js';\nimport TileQueue from '../TileQueue.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {listen} from '../events.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport {Processor} from 'pixelworks/lib/index';\nimport {equals, getCenter, getHeight, getWidth} from '../extent.js';\nimport LayerType from '../LayerType.js';\nimport ImageLayer from '../layer/Image.js';\nimport TileLayer from '../layer/Tile.js';\nimport {assign} from '../obj.js';\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\nimport ImageSource from './Image.js';\nimport SourceState from './State.js';\nimport {create as createTransform} from '../transform.js';\n\n\n/**\n * A function that takes an array of input data, performs some operation, and\n * returns an array of output data.\n * For `pixel` type operations, the function will be called with an array of\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\n * range of 0 - 255. It should return a single pixel array.\n * For `'image'` type operations, functions will be called with an array of\n * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}\n * and should return a single {@link ImageData\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations\n * are called with a second \"data\" argument, which can be used for storage.  The\n * data object is accessible from raster events, where it can be initialized in\n * \"beforeoperations\" and accessed again in \"afteroperations\".\n *\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\n *     (Array<number>|ImageData)} Operation\n */\n\n\n/**\n * @enum {string}\n */\nconst RasterEventType = {\n  /**\n   * Triggered before operations are run.\n   * @event ol/source/Raster~RasterSourceEvent#beforeoperations\n   * @api\n   */\n  BEFOREOPERATIONS: 'beforeoperations',\n\n  /**\n   * Triggered after operations are run.\n   * @event ol/source/Raster~RasterSourceEvent#afteroperations\n   * @api\n   */\n  AFTEROPERATIONS: 'afteroperations'\n};\n\n\n/**\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\n * @enum {string}\n */\nconst RasterOperationType = {\n  PIXEL: 'pixel',\n  IMAGE: 'image'\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Raster} instances are instances of this\n * type.\n */\nclass RasterSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Object} data An object made available to operations.\n   */\n  constructor(type, frameState, data) {\n    super(type);\n\n    /**\n     * The raster extent.\n     * @type {import(\"../extent.js\").Extent}\n     * @api\n     */\n    this.extent = frameState.extent;\n\n    /**\n     * The pixel resolution (map units per pixel).\n     * @type {number}\n     * @api\n     */\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\n\n    /**\n     * An object made available to all operations.  This can be used by operations\n     * as a storage object (e.g. for calculating statistics).\n     * @type {Object}\n     * @api\n     */\n    this.data = data;\n\n  }\n\n}\n\n/**\n * @typedef {Object} Options\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\n * sources or layers. Vector layers must be configured with `renderMode: 'image'`.\n * @property {Operation} [operation] Raster operation.\n * The operation will be called with data from input sources\n * and the output will be assigned to the raster source.\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\n * @property {number} [threads] By default, operations will be run in a single worker thread.\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\n * be run in multiple worker threads.  Note that there is additional overhead in\n * transferring data to multiple workers, and that depending on the user's\n * system, it may not be possible to parallelize the work.\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\n * Supported values are `'pixel'` and `'image'`.  By default,\n * `'pixel'` operations are assumed, and operations will be called with an\n * array of pixels from input sources.  If set to `'image'`, operations will\n * be called with an array of ImageData objects from input sources.\n */\n\n\n/**\n * @classdesc\n * A source that transforms data from any number of input sources using an\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\n * output pixel values.\n *\n * @fires ol/source/Raster~RasterSourceEvent\n * @api\n */\nclass RasterSource extends ImageSource {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super({\n      projection: null\n    });\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.worker_ = null;\n\n    /**\n     * @private\n     * @type {RasterOperationType}\n     */\n    this.operationType_ = options.operationType !== undefined ?\n      options.operationType : RasterOperationType.PIXEL;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\n\n    /**\n     * @private\n     * @type {Array<import(\"../renderer/canvas/Layer.js\").default>}\n     */\n    this.renderers_ = createRenderers(options.sources);\n\n    for (let r = 0, rr = this.renderers_.length; r < rr; ++r) {\n      listen(this.renderers_[r], EventType.CHANGE,\n        this.changed, this);\n    }\n\n    /**\n     * @private\n     * @type {import(\"../TileQueue.js\").default}\n     */\n    this.tileQueue_ = new TileQueue(\n      function() {\n        return 1;\n      },\n      this.changed.bind(this));\n\n    const layerStatesArray = getLayerStatesArray(this.renderers_);\n\n    /**\n     * @type {Object<string, import(\"../layer/Layer.js\").State>}\n     */\n    const layerStates = {};\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];\n    }\n\n    /**\n     * The most recently requested frame state.\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     * @private\n     */\n    this.requestedFrameState_;\n\n    /**\n     * The most recently rendered image canvas.\n     * @type {import(\"../ImageCanvas.js\").default}\n     * @private\n     */\n    this.renderedImageCanvas_ = null;\n\n    /**\n     * The most recently rendered revision.\n     * @type {number}\n     */\n    this.renderedRevision_;\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").FrameState}\n     */\n    this.frameState_ = {\n      animate: false,\n      coordinateToPixelTransform: createTransform(),\n      extent: null,\n      focus: null,\n      index: 0,\n      layerStates: layerStates,\n      layerStatesArray: layerStatesArray,\n      pixelRatio: 1,\n      pixelToCoordinateTransform: createTransform(),\n      postRenderFunctions: [],\n      size: [0, 0],\n      skippedFeatureUids: {},\n      tileQueue: this.tileQueue_,\n      time: Date.now(),\n      usedTiles: {},\n      viewState: /** @type {import(\"../View.js\").State} */ ({\n        rotation: 0\n      }),\n      viewHints: [],\n      wantedTiles: {}\n    };\n\n    if (options.operation !== undefined) {\n      this.setOperation(options.operation, options.lib);\n    }\n\n  }\n\n  /**\n   * Set the operation.\n   * @param {Operation} operation New operation.\n   * @param {Object=} opt_lib Functions that will be available to operations run\n   *     in a worker.\n   * @api\n   */\n  setOperation(operation, opt_lib) {\n    this.worker_ = new Processor({\n      operation: operation,\n      imageOps: this.operationType_ === RasterOperationType.IMAGE,\n      queue: 1,\n      lib: opt_lib,\n      threads: this.threads_\n    });\n    this.changed();\n  }\n\n  /**\n   * Update the stored frame state.\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\n   * @param {number} resolution The view resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n   * @return {import(\"../PluggableMap.js\").FrameState} The updated frame state.\n   * @private\n   */\n  updateFrameState_(extent, resolution, projection) {\n\n    const frameState = /** @type {import(\"../PluggableMap.js\").FrameState} */ (assign({}, this.frameState_));\n\n    frameState.viewState = /** @type {import(\"../View.js\").State} */ (assign({}, frameState.viewState));\n\n    const center = getCenter(extent);\n\n    frameState.extent = extent.slice();\n    frameState.focus = center;\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\n    frameState.time = Date.now();\n    frameState.animate = false;\n\n    const viewState = frameState.viewState;\n    viewState.center = center;\n    viewState.projection = projection;\n    viewState.resolution = resolution;\n    return frameState;\n  }\n\n  /**\n   * Determine if all sources are ready.\n   * @return {boolean} All sources are ready.\n   * @private\n   */\n  allSourcesReady_() {\n    let ready = true;\n    let source;\n    for (let i = 0, ii = this.renderers_.length; i < ii; ++i) {\n      source = this.renderers_[i].getLayer().getSource();\n      if (source.getState() !== SourceState.READY) {\n        ready = false;\n        break;\n      }\n    }\n    return ready;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    if (!this.allSourcesReady_()) {\n      return null;\n    }\n\n    const frameState = this.updateFrameState_(extent, resolution, projection);\n    this.requestedFrameState_ = frameState;\n\n    // check if we can't reuse the existing ol/ImageCanvas\n    if (this.renderedImageCanvas_) {\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\n      if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\n        this.renderedImageCanvas_ = null;\n      }\n    }\n\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\n      this.processSources_();\n    }\n\n    frameState.tileQueue.loadMoreTiles(16, 16);\n\n    if (frameState.animate) {\n      requestAnimationFrame(this.changed.bind(this));\n    }\n\n    return this.renderedImageCanvas_;\n  }\n\n  /**\n   * Start processing source data.\n   * @private\n   */\n  processSources_() {\n    const frameState = this.requestedFrameState_;\n    const len = this.renderers_.length;\n    const imageDatas = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      const imageData = getImageData(\n        this.renderers_[i], frameState, frameState.layerStatesArray[i]);\n      if (imageData) {\n        imageDatas[i] = imageData;\n      } else {\n        return;\n      }\n    }\n\n    const data = {};\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\n    this.worker_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\n  }\n\n  /**\n   * Called when pixel processing is complete.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n   * @param {Error} err Any error during processing.\n   * @param {ImageData} output The output image data.\n   * @param {Object} data The user data.\n   * @private\n   */\n  onWorkerComplete_(frameState, err, output, data) {\n    if (err || !output) {\n      return;\n    }\n\n    // do nothing if extent or resolution changed\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    if (resolution !== this.requestedFrameState_.viewState.resolution ||\n        !equals(extent, this.requestedFrameState_.extent)) {\n      return;\n    }\n\n    let context;\n    if (this.renderedImageCanvas_) {\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\n    } else {\n      const width = Math.round(getWidth(extent) / resolution);\n      const height = Math.round(getHeight(extent) / resolution);\n      context = createCanvasContext2D(width, height);\n      this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\n    }\n    context.putImageData(output, 0, 0);\n\n    this.changed();\n    this.renderedRevision_ = this.getRevision();\n\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\n  }\n\n  /**\n   * @override\n   */\n  getImageInternal() {\n    return null; // not implemented\n  }\n}\n\n\n/**\n * A reusable canvas context.\n * @type {CanvasRenderingContext2D}\n * @private\n */\nlet sharedContext = null;\n\n\n/**\n * Get image data from a renderer.\n * @param {import(\"../renderer/canvas/Layer.js\").default} renderer Layer renderer.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState The frame state.\n * @param {import(\"../layer/Layer.js\").State} layerState The layer state.\n * @return {ImageData} The image data.\n */\nfunction getImageData(renderer, frameState, layerState) {\n  if (!renderer.prepareFrame(frameState, layerState)) {\n    return null;\n  }\n  const width = frameState.size[0];\n  const height = frameState.size[1];\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(width, height);\n  } else {\n    const canvas = sharedContext.canvas;\n    if (canvas.width !== width || canvas.height !== height) {\n      sharedContext = createCanvasContext2D(width, height);\n    } else {\n      sharedContext.clearRect(0, 0, width, height);\n    }\n  }\n  renderer.composeFrame(frameState, layerState, sharedContext);\n  return sharedContext.getImageData(0, 0, width, height);\n}\n\n\n/**\n * Get a list of layer states from a list of renderers.\n * @param {Array<import(\"../renderer/canvas/Layer.js\").default>} renderers Layer renderers.\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\n */\nfunction getLayerStatesArray(renderers) {\n  return renderers.map(function(renderer) {\n    return renderer.getLayer().getLayerState();\n  });\n}\n\n\n/**\n * Create renderers for all sources.\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\n * @return {Array<import(\"../renderer/canvas/Layer.js\").default>} Array of layer renderers.\n */\nfunction createRenderers(sources) {\n  const len = sources.length;\n  const renderers = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    renderers[i] = createRenderer(sources[i]);\n  }\n  return renderers;\n}\n\n\n/**\n * Create a renderer for the provided source.\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\n * @return {import(\"../renderer/canvas/Layer.js\").default} The renderer.\n */\nfunction createRenderer(layerOrSource) {\n  const tileSource = /** @type {import(\"./Tile.js\").default} */ (layerOrSource);\n  const imageSource = /** @type {import(\"./Image.js\").default} */ (layerOrSource);\n  const layer = /** @type {import(\"../layer/Layer.js\").default} */ (layerOrSource);\n  let renderer = null;\n  if (typeof tileSource.getTile === 'function') {\n    renderer = createTileRenderer(tileSource);\n  } else if (typeof imageSource.getImage === 'function') {\n    renderer = createImageRenderer(imageSource);\n  } else if (layer.getType() === LayerType.TILE) {\n    renderer = new CanvasTileLayerRenderer(/** @type {import(\"../layer/Tile.js\").default} */ (layer));\n  } else if (layer.getType() == LayerType.IMAGE || layer.getType() == LayerType.VECTOR) {\n    renderer = new CanvasImageLayerRenderer(/** @type {import(\"../layer/Image.js\").default} */ (layer));\n  }\n  return renderer;\n}\n\n\n/**\n * Create an image renderer for the provided source.\n * @param {import(\"./Image.js\").default} source The source.\n * @return {import(\"../renderer/canvas/Layer.js\").default} The renderer.\n */\nfunction createImageRenderer(source) {\n  const layer = new ImageLayer({source: source});\n  return new CanvasImageLayerRenderer(layer);\n}\n\n\n/**\n * Create a tile renderer for the provided source.\n * @param {import(\"./Tile.js\").default} source The source.\n * @return {import(\"../renderer/canvas/Layer.js\").default} The renderer.\n */\nfunction createTileRenderer(source) {\n  const layer = new TileLayer({source: source});\n  return new CanvasTileLayerRenderer(layer);\n}\n\n\nexport default RasterSource;\n"],"names":["const","super","let"],"mappings":"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"}