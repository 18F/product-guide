"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _immutable = require("immutable");

var _reactPolyglot = require("react-polyglot");

var _reactRedux = require("react-redux");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _collections = require("../../actions/collections");

var _editorialWorkflow = require("../../actions/editorialWorkflow");

var _reducers = require("../../reducers");

var _publishModes = require("../../constants/publishModes");

var _WorkflowList = _interopRequireDefault(require("./WorkflowList"));

var _core = require("@emotion/core");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const WorkflowContainer = (0, _styledBase.default)("div", {
  target: "eg19in30",
  label: "WorkflowContainer"
})("padding:", _netlifyCmsUiDefault.lengths.pageMargin, " 0;height:100vh;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJCb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAuaXNSZXF1aXJlZCxcbiAgICBpc0VkaXRvcmlhbFdvcmtmbG93OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdW5wdWJsaXNoZWRFbnRyaWVzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcuZ2V0KCdwdWJsaXNoX21vZGUnKSA9PT0gRURJVE9SSUFMX1dPUktGTE9XO1xuICBjb25zdCBpc09wZW5BdXRob3JpbmcgPSBnbG9iYWxVSS5nZXQoJ3VzZU9wZW5BdXRob3JpbmcnLCBmYWxzZSk7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTop = (0, _styledBase.default)("div", {
  target: "eg19in31",
  label: "WorkflowTop"
})(_netlifyCmsUiDefault.components.cardTop, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdDOEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAuaXNSZXF1aXJlZCxcbiAgICBpc0VkaXRvcmlhbFdvcmtmbG93OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdW5wdWJsaXNoZWRFbnRyaWVzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcuZ2V0KCdwdWJsaXNoX21vZGUnKSA9PT0gRURJVE9SSUFMX1dPUktGTE9XO1xuICBjb25zdCBpc09wZW5BdXRob3JpbmcgPSBnbG9iYWxVSS5nZXQoJ3VzZU9wZW5BdXRob3JpbmcnLCBmYWxzZSk7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTopRow = (0, _styledBase.default)("div", {
  target: "eg19in32",
  label: "WorkflowTopRow"
})("display:flex;justify-content:space-between;span[role='button']{", _netlifyCmsUiDefault.shadows.dropDeep, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DaUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAuaXNSZXF1aXJlZCxcbiAgICBpc0VkaXRvcmlhbFdvcmtmbG93OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdW5wdWJsaXNoZWRFbnRyaWVzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcuZ2V0KCdwdWJsaXNoX21vZGUnKSA9PT0gRURJVE9SSUFMX1dPUktGTE9XO1xuICBjb25zdCBpc09wZW5BdXRob3JpbmcgPSBnbG9iYWxVSS5nZXQoJ3VzZU9wZW5BdXRob3JpbmcnLCBmYWxzZSk7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTopHeading = (0, _styledBase.default)("h1", {
  target: "eg19in33",
  label: "WorkflowTopHeading"
})(_netlifyCmsUiDefault.components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZDb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAuaXNSZXF1aXJlZCxcbiAgICBpc0VkaXRvcmlhbFdvcmtmbG93OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdW5wdWJsaXNoZWRFbnRyaWVzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcuZ2V0KCdwdWJsaXNoX21vZGUnKSA9PT0gRURJVE9SSUFMX1dPUktGTE9XO1xuICBjb25zdCBpc09wZW5BdXRob3JpbmcgPSBnbG9iYWxVSS5nZXQoJ3VzZU9wZW5BdXRob3JpbmcnLCBmYWxzZSk7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTopDescription = (0, _styledBase.default)("p", {
  target: "eg19in34",
  label: "WorkflowTopDescription"
})(_netlifyCmsUiDefault.components.cardTopDescription, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlEdUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnQWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnQWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJ1JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnQ29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAuaXNSZXF1aXJlZCxcbiAgICBpc0VkaXRvcmlhbFdvcmtmbG93OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAgIGlzT3BlbkF1dGhvcmluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gICAgdW5wdWJsaXNoZWRFbnRyaWVzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcuZ2V0KCdwdWJsaXNoX21vZGUnKSA9PT0gRURJVE9SSUFMX1dPUktGTE9XO1xuICBjb25zdCBpc09wZW5BdXRob3JpbmcgPSBnbG9iYWxVSS5nZXQoJ3VzZU9wZW5BdXRob3JpbmcnLCBmYWxzZSk7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));

class Workflow extends _react.Component {
  componentDidMount() {
    const {
      loadUnpublishedEntries,
      isEditorialWorkflow,
      collections
    } = this.props;

    if (isEditorialWorkflow) {
      loadUnpublishedEntries(collections);
    }
  }

  render() {
    const {
      isEditorialWorkflow,
      isOpenAuthoring,
      isFetching,
      unpublishedEntries,
      updateUnpublishedEntryStatus,
      publishUnpublishedEntry,
      deleteUnpublishedEntry,
      collections,
      t
    } = this.props;
    if (!isEditorialWorkflow) return null;
    if (isFetching) return (0, _core.jsx)(_netlifyCmsUiDefault.Loader, {
      active: true
    }, t('workflow.workflow.loading'));
    const reviewCount = unpublishedEntries.get('pending_review').size;
    const readyCount = unpublishedEntries.get('pending_publish').size;
    return (0, _core.jsx)(WorkflowContainer, null, (0, _core.jsx)(WorkflowTop, null, (0, _core.jsx)(WorkflowTopRow, null, (0, _core.jsx)(WorkflowTopHeading, null, t('workflow.workflow.workflowHeading')), (0, _core.jsx)(_netlifyCmsUiDefault.Dropdown, {
      dropdownWidth: "160px",
      dropdownPosition: "left",
      dropdownTopOverlap: "40px",
      renderButton: () => (0, _core.jsx)(_netlifyCmsUiDefault.StyledDropdownButton, null, t('workflow.workflow.newPost'))
    }, collections.filter(collection => collection.get('create')).toList().map(collection => (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
      key: collection.get('name'),
      label: collection.get('label'),
      onClick: () => (0, _collections.createNewEntry)(collection.get('name'))
    })))), (0, _core.jsx)(WorkflowTopDescription, null, t('workflow.workflow.description', {
      smart_count: reviewCount,
      readyCount
    }))), (0, _core.jsx)(_WorkflowList.default, {
      entries: unpublishedEntries,
      handleChangeStatus: updateUnpublishedEntryStatus,
      handlePublish: publishUnpublishedEntry,
      handleDelete: deleteUnpublishedEntry,
      isOpenAuthoring: isOpenAuthoring,
      collections: collections
    }));
  }

}

_defineProperty(Workflow, "propTypes", {
  collections: _reactImmutableProptypes.default.orderedMap.isRequired,
  isEditorialWorkflow: _propTypes.default.bool.isRequired,
  isOpenAuthoring: _propTypes.default.bool,
  isFetching: _propTypes.default.bool,
  unpublishedEntries: _reactImmutableProptypes.default.map,
  loadUnpublishedEntries: _propTypes.default.func.isRequired,
  updateUnpublishedEntryStatus: _propTypes.default.func.isRequired,
  publishUnpublishedEntry: _propTypes.default.func.isRequired,
  deleteUnpublishedEntry: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired
});

function mapStateToProps(state) {
  const {
    collections,
    config,
    globalUI
  } = state;

  const isEditorialWorkflow = config.get('publish_mode') === _publishModes.EDITORIAL_WORKFLOW;

  const isOpenAuthoring = globalUI.get('useOpenAuthoring', false);
  const returnObj = {
    collections,
    isEditorialWorkflow,
    isOpenAuthoring
  };

  if (isEditorialWorkflow) {
    returnObj.isFetching = state.editorialWorkflow.getIn(['pages', 'isFetching'], false);
    /*
     * Generates an ordered Map of the available status as keys.
     * Each key containing a Sequence of available unpubhlished entries
     * Eg.: OrderedMap{'draft':Seq(), 'pending_review':Seq(), 'pending_publish':Seq()}
     */

    returnObj.unpublishedEntries = _publishModes.status.reduce((acc, currStatus) => {
      const entries = (0, _reducers.selectUnpublishedEntriesByStatus)(state, currStatus);
      return acc.set(currStatus, entries);
    }, (0, _immutable.OrderedMap)());
  }

  return returnObj;
}

var _default = (0, _reactRedux.connect)(mapStateToProps, {
  loadUnpublishedEntries: _editorialWorkflow.loadUnpublishedEntries,
  updateUnpublishedEntryStatus: _editorialWorkflow.updateUnpublishedEntryStatus,
  publishUnpublishedEntry: _editorialWorkflow.publishUnpublishedEntry,
  deleteUnpublishedEntry: _editorialWorkflow.deleteUnpublishedEntry
})((0, _reactPolyglot.translate)()(Workflow));

exports.default = _default;