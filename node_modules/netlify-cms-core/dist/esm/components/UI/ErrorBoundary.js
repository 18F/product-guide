"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ErrorBoundary = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _truncate2 = _interopRequireDefault(require("lodash/truncate"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactPolyglot = require("react-polyglot");

var _yaml = _interopRequireDefault(require("yaml"));

var _copyTextToClipboard = _interopRequireDefault(require("copy-text-to-clipboard"));

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ISSUE_URL = 'https://github.com/netlify/netlify-cms/issues/new?';

const getIssueTemplate = ({
  version,
  provider,
  browser,
  config
}) => `
**Describe the bug**

**To Reproduce**

**Expected behavior**

**Screenshots**

**Applicable Versions:**
 - Netlify CMS version: \`${version}\`
 - Git provider: \`${provider}\`
 - Browser version: \`${browser}\`

**CMS configuration**
\`\`\`
${config}
\`\`\`

**Additional context**
`;

const buildIssueTemplate = ({
  config
}) => {
  let version = '';

  if (typeof NETLIFY_CMS_VERSION === 'string') {
    version = `netlify-cms@${NETLIFY_CMS_VERSION}`;
  } else if (typeof "2.12.19" === 'string') {
    version = `netlify-cms-app@${"2.12.19"}`;
  }

  const template = getIssueTemplate({
    version,
    provider: config.getIn(['backend', 'name']),
    browser: navigator.userAgent,
    config: _yaml.default.stringify(config.toJS())
  });
  return template;
};

const buildIssueUrl = ({
  title,
  config
}) => {
  try {
    const body = buildIssueTemplate({
      config
    });
    const params = new URLSearchParams();
    params.append('title', (0, _truncate2.default)(title, {
      length: 100
    }));
    params.append('body', (0, _truncate2.default)(body, {
      length: 4000,
      omission: '\n...'
    }));
    params.append('labels', 'type: bug');
    return `${ISSUE_URL}${params.toString()}`;
  } catch (e) {
    console.log(e);
    return `${ISSUE_URL}template=bug_report.md`;
  }
};

const ErrorBoundaryContainer = (0, _styledBase.default)("div", {
  target: "e177kfaq0",
  label: "ErrorBoundaryContainer"
})("padding:40px;h1{font-size:28px;color:", _netlifyCmsUiDefault.colors.text, ";}h2{font-size:20px;}strong{color:", _netlifyCmsUiDefault.colors.textLead, ";font-weight:500;}hr{width:200px;margin:30px 0;border:0;height:1px;background-color:", _netlifyCmsUiDefault.colors.text, ";}a{color:", _netlifyCmsUiDefault.colors.active, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUV5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcbmNvbnN0IGdldElzc3VlVGVtcGxhdGUgPSAoeyB2ZXJzaW9uLCBwcm92aWRlciwgYnJvd3NlciwgY29uZmlnIH0pID0+IGBcbioqRGVzY3JpYmUgdGhlIGJ1ZyoqXG5cbioqVG8gUmVwcm9kdWNlKipcblxuKipFeHBlY3RlZCBiZWhhdmlvcioqXG5cbioqU2NyZWVuc2hvdHMqKlxuXG4qKkFwcGxpY2FibGUgVmVyc2lvbnM6KipcbiAtIE5ldGxpZnkgQ01TIHZlcnNpb246IFxcYCR7dmVyc2lvbn1cXGBcbiAtIEdpdCBwcm92aWRlcjogXFxgJHtwcm92aWRlcn1cXGBcbiAtIEJyb3dzZXIgdmVyc2lvbjogXFxgJHticm93c2VyfVxcYFxuXG4qKkNNUyBjb25maWd1cmF0aW9uKipcblxcYFxcYFxcYFxuJHtjb25maWd9XG5cXGBcXGBcXGBcblxuKipBZGRpdGlvbmFsIGNvbnRleHQqKlxuYDtcblxuY29uc3QgYnVpbGRJc3N1ZVRlbXBsYXRlID0gKHsgY29uZmlnIH0pID0+IHtcbiAgbGV0IHZlcnNpb24gPSAnJztcbiAgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXNAJHtORVRMSUZZX0NNU19WRVJTSU9OfWA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIE5FVExJRllfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXMtYXBwQCR7TkVUTElGWV9DTVNfQVBQX1ZFUlNJT059YDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZSA9IGdldElzc3VlVGVtcGxhdGUoe1xuICAgIHZlcnNpb24sXG4gICAgcHJvdmlkZXI6IGNvbmZpZy5nZXRJbihbJ2JhY2tlbmQnLCAnbmFtZSddKSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zdHJpbmdpZnkoY29uZmlnLnRvSlMoKSksXG4gIH0pO1xuXG4gIHJldHVybiB0ZW1wbGF0ZTtcbn07XG5cbmNvbnN0IGJ1aWxkSXNzdWVVcmwgPSAoeyB0aXRsZSwgY29uZmlnIH0pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYnVpbGRJc3N1ZVRlbXBsYXRlKHsgY29uZmlnIH0pO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ3RpdGxlJywgdHJ1bmNhdGUodGl0bGUsIHsgbGVuZ3RoOiAxMDAgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2JvZHknLCB0cnVuY2F0ZShib2R5LCB7IGxlbmd0aDogNDAwMCwgb21pc3Npb246ICdcXG4uLi4nIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdsYWJlbHMnLCAndHlwZTogYnVnJyk7XG5cbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfSR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9dGVtcGxhdGU9YnVnX3JlcG9ydC5tZGA7XG4gIH1cbn07XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuY29uc3QgUmVjb3ZlcmVkRW50cnkgPSAoeyBlbnRyeSwgdCB9KSA9PiB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjb25maWc6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgZXJyb3JNZXNzYWdlOiAnJyxcbiAgICBiYWNrdXA6ICcnLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICByZXR1cm4geyBoYXNFcnJvcjogdHJ1ZSwgZXJyb3JNZXNzYWdlOiBlcnJvci50b1N0cmluZygpIH07XG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93QmFja3VwKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSAhPT0gbmV4dFN0YXRlLmVycm9yTWVzc2FnZSB8fCB0aGlzLnN0YXRlLmJhY2t1cCAhPT0gbmV4dFN0YXRlLmJhY2t1cFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgY29uc3QgYmFja3VwID0gYXdhaXQgbG9jYWxGb3JhZ2UuZ2V0SXRlbSgnYmFja3VwJyk7XG4gICAgICBiYWNrdXAgJiYgY29uc29sZS5sb2coYmFja3VwKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBiYWNrdXAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGFzRXJyb3IsIGVycm9yTWVzc2FnZSwgYmFja3VwIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgc2hvd0JhY2t1cCwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxFcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICAgICA8aDE+e3QoJ3VpLmVycm9yQm91bmRhcnkudGl0bGUnKX08L2gxPlxuICAgICAgICA8cD5cbiAgICAgICAgICA8c3Bhbj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzJyl9PC9zcGFuPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBocmVmPXtidWlsZElzc3VlVXJsKHsgdGl0bGU6IGVycm9yTWVzc2FnZSwgY29uZmlnOiB0aGlzLnByb3BzLmNvbmZpZyB9KX1cbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiaXNzdWUtdXJsXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZXBvcnRJdCcpfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5wcml2YWN5V2FybmluZycpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxQcml2YWN5V2FybmluZyBrZXk9e2luZGV4fT57aXRlbX08L1ByaXZhY3lXYXJuaW5nPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICA8L3A+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlsc0hlYWRpbmcnKX08L2gyPlxuICAgICAgICA8cD57ZXJyb3JNZXNzYWdlfTwvcD5cbiAgICAgICAge2JhY2t1cCAmJiBzaG93QmFja3VwICYmIDxSZWNvdmVyZWRFbnRyeSBlbnRyeT17YmFja3VwfSB0PXt0fSAvPn1cbiAgICAgIDwvRXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEVycm9yQm91bmRhcnkpO1xuIl19 */"));
const PrivacyWarning = (0, _styledBase.default)("span", {
  target: "e177kfaq1",
  label: "PrivacyWarning"
})("color:", _netlifyCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUdrQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcbmNvbnN0IGdldElzc3VlVGVtcGxhdGUgPSAoeyB2ZXJzaW9uLCBwcm92aWRlciwgYnJvd3NlciwgY29uZmlnIH0pID0+IGBcbioqRGVzY3JpYmUgdGhlIGJ1ZyoqXG5cbioqVG8gUmVwcm9kdWNlKipcblxuKipFeHBlY3RlZCBiZWhhdmlvcioqXG5cbioqU2NyZWVuc2hvdHMqKlxuXG4qKkFwcGxpY2FibGUgVmVyc2lvbnM6KipcbiAtIE5ldGxpZnkgQ01TIHZlcnNpb246IFxcYCR7dmVyc2lvbn1cXGBcbiAtIEdpdCBwcm92aWRlcjogXFxgJHtwcm92aWRlcn1cXGBcbiAtIEJyb3dzZXIgdmVyc2lvbjogXFxgJHticm93c2VyfVxcYFxuXG4qKkNNUyBjb25maWd1cmF0aW9uKipcblxcYFxcYFxcYFxuJHtjb25maWd9XG5cXGBcXGBcXGBcblxuKipBZGRpdGlvbmFsIGNvbnRleHQqKlxuYDtcblxuY29uc3QgYnVpbGRJc3N1ZVRlbXBsYXRlID0gKHsgY29uZmlnIH0pID0+IHtcbiAgbGV0IHZlcnNpb24gPSAnJztcbiAgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXNAJHtORVRMSUZZX0NNU19WRVJTSU9OfWA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIE5FVExJRllfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXMtYXBwQCR7TkVUTElGWV9DTVNfQVBQX1ZFUlNJT059YDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZSA9IGdldElzc3VlVGVtcGxhdGUoe1xuICAgIHZlcnNpb24sXG4gICAgcHJvdmlkZXI6IGNvbmZpZy5nZXRJbihbJ2JhY2tlbmQnLCAnbmFtZSddKSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zdHJpbmdpZnkoY29uZmlnLnRvSlMoKSksXG4gIH0pO1xuXG4gIHJldHVybiB0ZW1wbGF0ZTtcbn07XG5cbmNvbnN0IGJ1aWxkSXNzdWVVcmwgPSAoeyB0aXRsZSwgY29uZmlnIH0pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYnVpbGRJc3N1ZVRlbXBsYXRlKHsgY29uZmlnIH0pO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ3RpdGxlJywgdHJ1bmNhdGUodGl0bGUsIHsgbGVuZ3RoOiAxMDAgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2JvZHknLCB0cnVuY2F0ZShib2R5LCB7IGxlbmd0aDogNDAwMCwgb21pc3Npb246ICdcXG4uLi4nIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdsYWJlbHMnLCAndHlwZTogYnVnJyk7XG5cbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfSR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9dGVtcGxhdGU9YnVnX3JlcG9ydC5tZGA7XG4gIH1cbn07XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuY29uc3QgUmVjb3ZlcmVkRW50cnkgPSAoeyBlbnRyeSwgdCB9KSA9PiB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjb25maWc6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgZXJyb3JNZXNzYWdlOiAnJyxcbiAgICBiYWNrdXA6ICcnLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICByZXR1cm4geyBoYXNFcnJvcjogdHJ1ZSwgZXJyb3JNZXNzYWdlOiBlcnJvci50b1N0cmluZygpIH07XG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93QmFja3VwKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSAhPT0gbmV4dFN0YXRlLmVycm9yTWVzc2FnZSB8fCB0aGlzLnN0YXRlLmJhY2t1cCAhPT0gbmV4dFN0YXRlLmJhY2t1cFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgY29uc3QgYmFja3VwID0gYXdhaXQgbG9jYWxGb3JhZ2UuZ2V0SXRlbSgnYmFja3VwJyk7XG4gICAgICBiYWNrdXAgJiYgY29uc29sZS5sb2coYmFja3VwKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBiYWNrdXAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGFzRXJyb3IsIGVycm9yTWVzc2FnZSwgYmFja3VwIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgc2hvd0JhY2t1cCwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxFcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICAgICA8aDE+e3QoJ3VpLmVycm9yQm91bmRhcnkudGl0bGUnKX08L2gxPlxuICAgICAgICA8cD5cbiAgICAgICAgICA8c3Bhbj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzJyl9PC9zcGFuPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBocmVmPXtidWlsZElzc3VlVXJsKHsgdGl0bGU6IGVycm9yTWVzc2FnZSwgY29uZmlnOiB0aGlzLnByb3BzLmNvbmZpZyB9KX1cbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiaXNzdWUtdXJsXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZXBvcnRJdCcpfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5wcml2YWN5V2FybmluZycpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxQcml2YWN5V2FybmluZyBrZXk9e2luZGV4fT57aXRlbX08L1ByaXZhY3lXYXJuaW5nPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICA8L3A+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlsc0hlYWRpbmcnKX08L2gyPlxuICAgICAgICA8cD57ZXJyb3JNZXNzYWdlfTwvcD5cbiAgICAgICAge2JhY2t1cCAmJiBzaG93QmFja3VwICYmIDxSZWNvdmVyZWRFbnRyeSBlbnRyeT17YmFja3VwfSB0PXt0fSAvPn1cbiAgICAgIDwvRXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEVycm9yQm91bmRhcnkpO1xuIl19 */"));
const CopyButton = (0, _styledBase.default)("button", {
  target: "e177kfaq2",
  label: "CopyButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.default, ";", _netlifyCmsUiDefault.buttons.gray, ";display:block;margin:12px 0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUdnQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHlhbWwgZnJvbSAneWFtbCc7XG5pbXBvcnQgeyB0cnVuY2F0ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY29weVRvQ2xpcGJvYXJkIGZyb20gJ2NvcHktdGV4dC10by1jbGlwYm9hcmQnO1xuaW1wb3J0IHsgbG9jYWxGb3JhZ2UgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItdXRpbCc7XG5pbXBvcnQgeyBidXR0b25zLCBjb2xvcnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9uZXRsaWZ5L25ldGxpZnktY21zL2lzc3Vlcy9uZXc/JztcbmNvbnN0IGdldElzc3VlVGVtcGxhdGUgPSAoeyB2ZXJzaW9uLCBwcm92aWRlciwgYnJvd3NlciwgY29uZmlnIH0pID0+IGBcbioqRGVzY3JpYmUgdGhlIGJ1ZyoqXG5cbioqVG8gUmVwcm9kdWNlKipcblxuKipFeHBlY3RlZCBiZWhhdmlvcioqXG5cbioqU2NyZWVuc2hvdHMqKlxuXG4qKkFwcGxpY2FibGUgVmVyc2lvbnM6KipcbiAtIE5ldGxpZnkgQ01TIHZlcnNpb246IFxcYCR7dmVyc2lvbn1cXGBcbiAtIEdpdCBwcm92aWRlcjogXFxgJHtwcm92aWRlcn1cXGBcbiAtIEJyb3dzZXIgdmVyc2lvbjogXFxgJHticm93c2VyfVxcYFxuXG4qKkNNUyBjb25maWd1cmF0aW9uKipcblxcYFxcYFxcYFxuJHtjb25maWd9XG5cXGBcXGBcXGBcblxuKipBZGRpdGlvbmFsIGNvbnRleHQqKlxuYDtcblxuY29uc3QgYnVpbGRJc3N1ZVRlbXBsYXRlID0gKHsgY29uZmlnIH0pID0+IHtcbiAgbGV0IHZlcnNpb24gPSAnJztcbiAgaWYgKHR5cGVvZiBORVRMSUZZX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXNAJHtORVRMSUZZX0NNU19WRVJTSU9OfWA7XG4gIH0gZWxzZSBpZiAodHlwZW9mIE5FVExJRllfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgbmV0bGlmeS1jbXMtYXBwQCR7TkVUTElGWV9DTVNfQVBQX1ZFUlNJT059YDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZSA9IGdldElzc3VlVGVtcGxhdGUoe1xuICAgIHZlcnNpb24sXG4gICAgcHJvdmlkZXI6IGNvbmZpZy5nZXRJbihbJ2JhY2tlbmQnLCAnbmFtZSddKSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zdHJpbmdpZnkoY29uZmlnLnRvSlMoKSksXG4gIH0pO1xuXG4gIHJldHVybiB0ZW1wbGF0ZTtcbn07XG5cbmNvbnN0IGJ1aWxkSXNzdWVVcmwgPSAoeyB0aXRsZSwgY29uZmlnIH0pID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYnVpbGRJc3N1ZVRlbXBsYXRlKHsgY29uZmlnIH0pO1xuXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ3RpdGxlJywgdHJ1bmNhdGUodGl0bGUsIHsgbGVuZ3RoOiAxMDAgfSkpO1xuICAgIHBhcmFtcy5hcHBlbmQoJ2JvZHknLCB0cnVuY2F0ZShib2R5LCB7IGxlbmd0aDogNDAwMCwgb21pc3Npb246ICdcXG4uLi4nIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdsYWJlbHMnLCAndHlwZTogYnVnJyk7XG5cbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfSR7cGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIHJldHVybiBgJHtJU1NVRV9VUkx9dGVtcGxhdGU9YnVnX3JlcG9ydC5tZGA7XG4gIH1cbn07XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuY29uc3QgUmVjb3ZlcmVkRW50cnkgPSAoeyBlbnRyeSwgdCB9KSA9PiB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjb25maWc6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBoYXNFcnJvcjogZmFsc2UsXG4gICAgZXJyb3JNZXNzYWdlOiAnJyxcbiAgICBiYWNrdXA6ICcnLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICByZXR1cm4geyBoYXNFcnJvcjogdHJ1ZSwgZXJyb3JNZXNzYWdlOiBlcnJvci50b1N0cmluZygpIH07XG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG93QmFja3VwKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnN0YXRlLmVycm9yTWVzc2FnZSAhPT0gbmV4dFN0YXRlLmVycm9yTWVzc2FnZSB8fCB0aGlzLnN0YXRlLmJhY2t1cCAhPT0gbmV4dFN0YXRlLmJhY2t1cFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgY29uc3QgYmFja3VwID0gYXdhaXQgbG9jYWxGb3JhZ2UuZ2V0SXRlbSgnYmFja3VwJyk7XG4gICAgICBiYWNrdXAgJiYgY29uc29sZS5sb2coYmFja3VwKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBiYWNrdXAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGFzRXJyb3IsIGVycm9yTWVzc2FnZSwgYmFja3VwIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgc2hvd0JhY2t1cCwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxFcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICAgICA8aDE+e3QoJ3VpLmVycm9yQm91bmRhcnkudGl0bGUnKX08L2gxPlxuICAgICAgICA8cD5cbiAgICAgICAgICA8c3Bhbj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzJyl9PC9zcGFuPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBocmVmPXtidWlsZElzc3VlVXJsKHsgdGl0bGU6IGVycm9yTWVzc2FnZSwgY29uZmlnOiB0aGlzLnByb3BzLmNvbmZpZyB9KX1cbiAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgIGRhdGEtdGVzdGlkPVwiaXNzdWUtdXJsXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZXBvcnRJdCcpfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5cbiAgICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5wcml2YWN5V2FybmluZycpXG4gICAgICAgICAgICAuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxQcml2YWN5V2FybmluZyBrZXk9e2luZGV4fT57aXRlbX08L1ByaXZhY3lXYXJuaW5nPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICkpfVxuICAgICAgICA8L3A+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlsc0hlYWRpbmcnKX08L2gyPlxuICAgICAgICA8cD57ZXJyb3JNZXNzYWdlfTwvcD5cbiAgICAgICAge2JhY2t1cCAmJiBzaG93QmFja3VwICYmIDxSZWNvdmVyZWRFbnRyeSBlbnRyeT17YmFja3VwfSB0PXt0fSAvPn1cbiAgICAgIDwvRXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKEVycm9yQm91bmRhcnkpO1xuIl19 */"));

const RecoveredEntry = ({
  entry,
  t
}) => {
  console.log(entry);
  return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.recoveredEntry.heading')), (0, _core.jsx)("strong", null, t('ui.errorBoundary.recoveredEntry.warning')), (0, _core.jsx)(CopyButton, {
    onClick: () => (0, _copyTextToClipboard.default)(entry)
  }, t('ui.errorBoundary.recoveredEntry.copyButtonLabel')), (0, _core.jsx)("pre", null, (0, _core.jsx)("code", null, entry)));
};

class ErrorBoundary extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      hasError: false,
      errorMessage: '',
      backup: ''
    });
  }

  static getDerivedStateFromError(error) {
    console.error(error);
    return {
      hasError: true,
      errorMessage: error.toString()
    };
  }

  shouldComponentUpdate(nextProps, nextState) {
    if (this.props.showBackup) {
      return this.state.errorMessage !== nextState.errorMessage || this.state.backup !== nextState.backup;
    }

    return true;
  }

  async componentDidUpdate() {
    if (this.props.showBackup) {
      const backup = await _netlifyCmsLibUtil.localForage.getItem('backup');
      backup && console.log(backup);
      this.setState({
        backup
      });
    }
  }

  render() {
    const {
      hasError,
      errorMessage,
      backup
    } = this.state;
    const {
      showBackup,
      t
    } = this.props;

    if (!hasError) {
      return this.props.children;
    }

    return (0, _core.jsx)(ErrorBoundaryContainer, null, (0, _core.jsx)("h1", null, t('ui.errorBoundary.title')), (0, _core.jsx)("p", null, (0, _core.jsx)("span", null, t('ui.errorBoundary.details')), (0, _core.jsx)("a", {
      href: buildIssueUrl({
        title: errorMessage,
        config: this.props.config
      }),
      target: "_blank",
      rel: "noopener noreferrer",
      "data-testid": "issue-url"
    }, t('ui.errorBoundary.reportIt'))), (0, _core.jsx)("p", null, t('ui.errorBoundary.privacyWarning').split('\n').map((item, index) => (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(PrivacyWarning, {
      key: index
    }, item), (0, _core.jsx)("br", null)))), (0, _core.jsx)("hr", null), (0, _core.jsx)("h2", null, t('ui.errorBoundary.detailsHeading')), (0, _core.jsx)("p", null, errorMessage), backup && showBackup && (0, _core.jsx)(RecoveredEntry, {
      entry: backup,
      t: t
    }));
  }

}

exports.ErrorBoundary = ErrorBoundary;

_defineProperty(ErrorBoundary, "propTypes", {
  children: _propTypes.default.node,
  t: _propTypes.default.func.isRequired,
  config: _reactImmutableProptypes.default.map.isRequired
});

var _default = (0, _reactPolyglot.translate)()(ErrorBoundary);

exports.default = _default;