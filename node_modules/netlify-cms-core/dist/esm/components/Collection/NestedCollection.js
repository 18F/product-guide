"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NestedCollection = exports.updateNode = exports.getTreeData = exports.walk = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _react = _interopRequireDefault(require("react"));

var _immutable = require("immutable");

var _core = require("@emotion/core");

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _path = require("path");

var _netlifyCmsLibWidgets = require("netlify-cms-lib-widgets");

var _collections = require("../../reducers/collections");

var _entries = require("../../reducers/entries");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const {
  addFileTemplateFields
} = _netlifyCmsLibWidgets.stringTemplate;
const NodeTitleContainer = (0, _styledBase.default)("div", {
  target: "eqdmagz0",
  label: "NodeTitleContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1n2mv2k",
  styles: "display:flex;justify-content:center;align-items:center;"
} : {
  name: "1n2mv2k",
  styles: "display:flex;justify-content:center;align-items:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const NodeTitle = (0, _styledBase.default)("div", {
  target: "eqdmagz1",
  label: "NodeTitle"
})(process.env.NODE_ENV === "production" ? {
  name: "15ro776",
  styles: "margin-right:4px;"
} : {
  name: "15ro776",
  styles: "margin-right:4px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vTmVzdGVkQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1QjRCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vTmVzdGVkQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGRpcm5hbWUsIHNlcCB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgc3RyaW5nVGVtcGxhdGUgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItd2lkZ2V0cyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcbmltcG9ydCB7IHNlbGVjdEVudHJpZXMgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9lbnRyaWVzJztcbmltcG9ydCB7IEljb24sIGNvbG9ycywgY29tcG9uZW50cyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBzb3J0QnkgfSBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCB7IGFkZEZpbGVUZW1wbGF0ZUZpZWxkcyB9ID0gc3RyaW5nVGVtcGxhdGU7XG5cbmNvbnN0IE5vZGVUaXRsZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgTm9kZVRpdGxlID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiA0cHg7XG5gO1xuXG5jb25zdCBDYXJldCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAycHg7XG5gO1xuXG5jb25zdCBDYXJldERvd24gPSBzdHlsZWQoQ2FyZXQpYFxuICAke2NvbXBvbmVudHMuY2FyZXREb3dufTtcbiAgY29sb3I6IGN1cnJlbnRDb2xvcjtcbmA7XG5cbmNvbnN0IENhcmV0UmlnaHQgPSBzdHlsZWQoQ2FyZXQpYFxuICAke2NvbXBvbmVudHMuY2FyZXRSaWdodH07XG4gIGNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIGxlZnQ6IDJweDtcbmA7XG5cbmNvbnN0IFRyZWVOYXZMaW5rID0gc3R5bGVkKE5hdkxpbmspYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDhweDtcbiAgcGFkZGluZy1sZWZ0OiAke3Byb3BzID0+IHByb3BzLmRlcHRoICogMjAgKyAxMn1weDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuXG4gICR7SWNvbn0ge1xuICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICB9XG5cbiAgJHtwcm9wcyA9PiBjc3NgXG4gICAgJjpob3ZlcixcbiAgICAmOmFjdGl2ZSxcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmFjdGl2ZUJhY2tncm91bmR9O1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gICAgfVxuICBgfTtcbmA7XG5cbmNvbnN0IGdldE5vZGVUaXRsZSA9IG5vZGUgPT4ge1xuICBjb25zdCB0aXRsZSA9IG5vZGUuaXNSb290XG4gICAgPyBub2RlLnRpdGxlXG4gICAgOiBub2RlLmNoaWxkcmVuLmZpbmQoYyA9PiAhYy5pc0RpciAmJiBjLnRpdGxlKT8udGl0bGUgfHwgbm9kZS50aXRsZTtcbiAgcmV0dXJuIHRpdGxlO1xufTtcblxuY29uc3QgVHJlZU5vZGUgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbiwgdHJlZURhdGEsIGRlcHRoID0gMCwgb25Ub2dnbGUgfSA9IHByb3BzO1xuICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG5cbiAgY29uc3Qgc29ydGVkRGF0YSA9IHNvcnRCeSh0cmVlRGF0YSwgZ2V0Tm9kZVRpdGxlKTtcbiAgcmV0dXJuIHNvcnRlZERhdGEubWFwKG5vZGUgPT4ge1xuICAgIGNvbnN0IGxlYWYgPSBub2RlLmNoaWxkcmVuLmxlbmd0aCA8PSAxICYmICFub2RlLmNoaWxkcmVuWzBdPy5pc0RpciAmJiBkZXB0aCA+IDA7XG4gICAgaWYgKGxlYWYpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgdG8gPSBgL2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbk5hbWV9YDtcbiAgICBpZiAoZGVwdGggPiAwKSB7XG4gICAgICB0byA9IGAke3RvfS9maWx0ZXIke25vZGUucGF0aH1gO1xuICAgIH1cbiAgICBjb25zdCB0aXRsZSA9IGdldE5vZGVUaXRsZShub2RlKTtcblxuICAgIGNvbnN0IGhhc0NoaWxkcmVuID0gZGVwdGggPT09IDAgfHwgbm9kZS5jaGlsZHJlbi5zb21lKGMgPT4gYy5jaGlsZHJlbi5zb21lKGMgPT4gYy5pc0RpcikpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e25vZGUucGF0aH0+XG4gICAgICAgIDxUcmVlTmF2TGlua1xuICAgICAgICAgIGV4YWN0XG4gICAgICAgICAgdG89e3RvfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblRvZ2dsZSh7IG5vZGUsIGV4cGFuZGVkOiAhbm9kZS5leHBhbmRlZCB9KX1cbiAgICAgICAgICBkZXB0aD17ZGVwdGh9XG4gICAgICAgICAgZGF0YS10ZXN0aWQ9e25vZGUucGF0aH1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAgPE5vZGVUaXRsZUNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxOb2RlVGl0bGU+e3RpdGxlfTwvTm9kZVRpdGxlPlxuICAgICAgICAgICAge2hhc0NoaWxkcmVuICYmIChub2RlLmV4cGFuZGVkID8gPENhcmV0RG93biAvPiA6IDxDYXJldFJpZ2h0IC8+KX1cbiAgICAgICAgICA8L05vZGVUaXRsZUNvbnRhaW5lcj5cbiAgICAgICAgPC9UcmVlTmF2TGluaz5cbiAgICAgICAge25vZGUuZXhwYW5kZWQgJiYgKFxuICAgICAgICAgIDxUcmVlTm9kZVxuICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgIGRlcHRoPXtkZXB0aCArIDF9XG4gICAgICAgICAgICB0cmVlRGF0YT17bm9kZS5jaGlsZHJlbn1cbiAgICAgICAgICAgIG9uVG9nZ2xlPXtvblRvZ2dsZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9KTtcbn07XG5cblRyZWVOb2RlLnByb3BUeXBlcyA9IHtcbiAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBkZXB0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgdHJlZURhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBjb25zdCB3YWxrID0gKHRyZWVEYXRhLCBjYWxsYmFjaykgPT4ge1xuICBjb25zdCB0cmF2ZXJzZSA9IGNoaWxkcmVuID0+IHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBjYWxsYmFjayhjaGlsZCk7XG4gICAgICB0cmF2ZXJzZShjaGlsZC5jaGlsZHJlbik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0cmF2ZXJzZSh0cmVlRGF0YSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VHJlZURhdGEgPSAoY29sbGVjdGlvbiwgZW50cmllcykgPT4ge1xuICBjb25zdCBjb2xsZWN0aW9uRm9sZGVyID0gY29sbGVjdGlvbi5nZXQoJ2ZvbGRlcicpO1xuICBjb25zdCByb290Rm9sZGVyID0gJy8nO1xuICBjb25zdCBlbnRyaWVzT2JqID0gZW50cmllc1xuICAgIC50b0pTKClcbiAgICAubWFwKGUgPT4gKHsgLi4uZSwgcGF0aDogZS5wYXRoLnN1YnN0cmluZyhjb2xsZWN0aW9uRm9sZGVyLmxlbmd0aCkgfSkpO1xuXG4gIGNvbnN0IGRpcnMgPSBlbnRyaWVzT2JqLnJlZHVjZSgoYWNjLCBlbnRyeSkgPT4ge1xuICAgIGxldCBkaXIgPSBkaXJuYW1lKGVudHJ5LnBhdGgpO1xuICAgIHdoaWxlICghYWNjW2Rpcl0gJiYgZGlyICYmIGRpciAhPT0gcm9vdEZvbGRlcikge1xuICAgICAgY29uc3QgcGFydHMgPSBkaXIuc3BsaXQoc2VwKTtcbiAgICAgIGFjY1tkaXJdID0gcGFydHMucG9wKCk7XG4gICAgICBkaXIgPSBwYXJ0cy5sZW5ndGggJiYgcGFydHMuam9pbihzZXApO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgaWYgKGNvbGxlY3Rpb24uZ2V0SW4oWyduZXN0ZWQnLCAnc3VtbWFyeSddKSkge1xuICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLnNldCgnc3VtbWFyeScsIGNvbGxlY3Rpb24uZ2V0SW4oWyduZXN0ZWQnLCAnc3VtbWFyeSddKSk7XG4gIH0gZWxzZSB7XG4gICAgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24uZGVsZXRlKCdzdW1tYXJ5Jyk7XG4gIH1cblxuICBjb25zdCBmbGF0RGF0YSA9IFtcbiAgICB7XG4gICAgICB0aXRsZTogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICBwYXRoOiByb290Rm9sZGVyLFxuICAgICAgaXNEaXI6IHRydWUsXG4gICAgICBpc1Jvb3Q6IHRydWUsXG4gICAgfSxcbiAgICAuLi5PYmplY3QuZW50cmllcyhkaXJzKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gKHtcbiAgICAgIHRpdGxlOiB2YWx1ZSxcbiAgICAgIHBhdGg6IGtleSxcbiAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgaXNSb290OiBmYWxzZSxcbiAgICB9KSksXG4gICAgLi4uZW50cmllc09iai5tYXAoKGUsIGluZGV4KSA9PiB7XG4gICAgICBsZXQgZW50cnlNYXAgPSBlbnRyaWVzLmdldChpbmRleCk7XG4gICAgICBlbnRyeU1hcCA9IGVudHJ5TWFwLnNldChcbiAgICAgICAgJ2RhdGEnLFxuICAgICAgICBhZGRGaWxlVGVtcGxhdGVGaWVsZHMoZW50cnlNYXAuZ2V0KCdwYXRoJyksIGVudHJ5TWFwLmdldCgnZGF0YScpKSxcbiAgICAgICk7XG4gICAgICBjb25zdCB0aXRsZSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5TWFwKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmUsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICBpc0RpcjogZmFsc2UsXG4gICAgICAgIGlzUm9vdDogZmFsc2UsXG4gICAgICB9O1xuICAgIH0pLFxuICBdO1xuXG4gIGNvbnN0IHBhcmVudHNUb0NoaWxkcmVuID0gZmxhdERhdGEucmVkdWNlKChhY2MsIG5vZGUpID0+IHtcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhdGggPT09IHJvb3RGb2xkZXIgPyAnJyA6IGRpcm5hbWUobm9kZS5wYXRoKTtcbiAgICBpZiAoYWNjW3BhcmVudF0pIHtcbiAgICAgIGFjY1twYXJlbnRdLnB1c2gobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1twYXJlbnRdID0gW25vZGVdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgY29uc3QgcmVkdWNlciA9IChhY2MsIHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IHZhbHVlO1xuICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgIGlmIChwYXJlbnRzVG9DaGlsZHJlbltub2RlLnBhdGhdKSB7XG4gICAgICBjaGlsZHJlbiA9IHBhcmVudHNUb0NoaWxkcmVuW25vZGUucGF0aF0ucmVkdWNlKHJlZHVjZXIsIFtdKTtcbiAgICB9XG5cbiAgICBhY2MucHVzaCh7IC4uLm5vZGUsIGNoaWxkcmVuIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgY29uc3QgdHJlZURhdGEgPSBwYXJlbnRzVG9DaGlsZHJlblsnJ10ucmVkdWNlKHJlZHVjZXIsIFtdKTtcblxuICByZXR1cm4gdHJlZURhdGE7XG59O1xuXG5leHBvcnQgY29uc3QgdXBkYXRlTm9kZSA9ICh0cmVlRGF0YSwgbm9kZSwgY2FsbGJhY2spID0+IHtcbiAgbGV0IHN0b3AgPSBmYWxzZTtcblxuICBjb25zdCB1cGRhdGVyID0gbm9kZXMgPT4ge1xuICAgIGlmIChzdG9wKSB7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChub2Rlc1tpXS5wYXRoID09PSBub2RlLnBhdGgpIHtcbiAgICAgICAgbm9kZXNbaV0gPSBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICAgIH1cbiAgICB9XG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHVwZGF0ZXIobm9kZS5jaGlsZHJlbikpO1xuICAgIHJldHVybiBub2RlcztcbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcihbLi4udHJlZURhdGFdKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBOZXN0ZWRDb2xsZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgZW50cmllczogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QuaXNSZXF1aXJlZCxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0cmVlRGF0YTogZ2V0VHJlZURhdGEodGhpcy5wcm9wcy5jb2xsZWN0aW9uLCB0aGlzLnByb3BzLmVudHJpZXMpLFxuICAgICAgc2VsZWN0ZWQ6IG51bGwsXG4gICAgICB1c2VGaWx0ZXI6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGVudHJpZXMsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKFxuICAgICAgY29sbGVjdGlvbiAhPT0gcHJldlByb3BzLmNvbGxlY3Rpb24gfHxcbiAgICAgIGVudHJpZXMgIT09IHByZXZQcm9wcy5lbnRyaWVzIHx8XG4gICAgICBmaWx0ZXJUZXJtICE9PSBwcmV2UHJvcHMuZmlsdGVyVGVybVxuICAgICkge1xuICAgICAgY29uc3QgZXhwYW5kZWQgPSB7fTtcbiAgICAgIHdhbGsodGhpcy5zdGF0ZS50cmVlRGF0YSwgbm9kZSA9PiB7XG4gICAgICAgIGlmIChub2RlLmV4cGFuZGVkKSB7XG4gICAgICAgICAgZXhwYW5kZWRbbm9kZS5wYXRoXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgdHJlZURhdGEgPSBnZXRUcmVlRGF0YShjb2xsZWN0aW9uLCBlbnRyaWVzKTtcblxuICAgICAgY29uc3QgcGF0aCA9IGAvJHtmaWx0ZXJUZXJtfWA7XG4gICAgICB3YWxrKHRyZWVEYXRhLCBub2RlID0+IHtcbiAgICAgICAgaWYgKGV4cGFuZGVkW25vZGUucGF0aF0gfHwgKHRoaXMuc3RhdGUudXNlRmlsdGVyICYmIHBhdGguc3RhcnRzV2l0aChub2RlLnBhdGgpKSkge1xuICAgICAgICAgIG5vZGUuZXhwYW5kZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0cmVlRGF0YSB9KTtcbiAgICB9XG4gIH1cblxuICBvblRvZ2dsZSA9ICh7IG5vZGUsIGV4cGFuZGVkIH0pID0+IHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuc2VsZWN0ZWQgfHwgdGhpcy5zdGF0ZS5zZWxlY3RlZC5wYXRoID09PSBub2RlLnBhdGggfHwgZXhwYW5kZWQpIHtcbiAgICAgIGNvbnN0IHRyZWVEYXRhID0gdXBkYXRlTm9kZSh0aGlzLnN0YXRlLnRyZWVEYXRhLCBub2RlLCBub2RlID0+ICh7XG4gICAgICAgIC4uLm5vZGUsXG4gICAgICAgIGV4cGFuZGVkLFxuICAgICAgfSkpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRyZWVEYXRhLCBzZWxlY3RlZDogbm9kZSwgdXNlRmlsdGVyOiBmYWxzZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZG9uJ3QgY29sbGFwc2Ugbm9uIHNlbGVjdGVkIG5vZGVzIHdoZW4gY2xpY2tlZFxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkOiBub2RlLCB1c2VGaWx0ZXI6IGZhbHNlIH0pO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0cmVlRGF0YSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24gfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gPFRyZWVOb2RlIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IHRyZWVEYXRhPXt0cmVlRGF0YX0gb25Ub2dnbGU9e3RoaXMub25Ub2dnbGV9IC8+O1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9uIH0gPSBvd25Qcm9wcztcbiAgY29uc3QgZW50cmllcyA9IHNlbGVjdEVudHJpZXMoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbikgfHwgTGlzdCgpO1xuICByZXR1cm4geyBlbnRyaWVzIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBudWxsKShOZXN0ZWRDb2xsZWN0aW9uKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Caret = (0, _styledBase.default)("div", {
  target: "eqdmagz2",
  label: "Caret"
})(process.env.NODE_ENV === "production" ? {
  name: "wmzlvu",
  styles: "position:relative;top:2px;"
} : {
  name: "wmzlvu",
  styles: "position:relative;top:2px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vTmVzdGVkQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyQndCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vTmVzdGVkQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IE5hdkxpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IGRpcm5hbWUsIHNlcCB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgc3RyaW5nVGVtcGxhdGUgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItd2lkZ2V0cyc7XG5pbXBvcnQgeyBzZWxlY3RFbnRyeUNvbGxlY3Rpb25UaXRsZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL2NvbGxlY3Rpb25zJztcbmltcG9ydCB7IHNlbGVjdEVudHJpZXMgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9lbnRyaWVzJztcbmltcG9ydCB7IEljb24sIGNvbG9ycywgY29tcG9uZW50cyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBzb3J0QnkgfSBmcm9tICdsb2Rhc2gnO1xuXG5jb25zdCB7IGFkZEZpbGVUZW1wbGF0ZUZpZWxkcyB9ID0gc3RyaW5nVGVtcGxhdGU7XG5cbmNvbnN0IE5vZGVUaXRsZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgTm9kZVRpdGxlID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiA0cHg7XG5gO1xuXG5jb25zdCBDYXJldCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAycHg7XG5gO1xuXG5jb25zdCBDYXJldERvd24gPSBzdHlsZWQoQ2FyZXQpYFxuICAke2NvbXBvbmVudHMuY2FyZXREb3dufTtcbiAgY29sb3I6IGN1cnJlbnRDb2xvcjtcbmA7XG5cbmNvbnN0IENhcmV0UmlnaHQgPSBzdHlsZWQoQ2FyZXQpYFxuICAke2NvbXBvbmVudHMuY2FyZXRSaWdodH07XG4gIGNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIGxlZnQ6IDJweDtcbmA7XG5cbmNvbnN0IFRyZWVOYXZMaW5rID0gc3R5bGVkKE5hdkxpbmspYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmb250LXNpemU6IDE0cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDhweDtcbiAgcGFkZGluZy1sZWZ0OiAke3Byb3BzID0+IHByb3BzLmRlcHRoICogMjAgKyAxMn1weDtcbiAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZmZmO1xuXG4gICR7SWNvbn0ge1xuICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICB9XG5cbiAgJHtwcm9wcyA9PiBjc3NgXG4gICAgJjpob3ZlcixcbiAgICAmOmFjdGl2ZSxcbiAgICAmLiR7cHJvcHMuYWN0aXZlQ2xhc3NOYW1lfSB7XG4gICAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmFjdGl2ZUJhY2tncm91bmR9O1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICM0ODYzYzY7XG4gICAgfVxuICBgfTtcbmA7XG5cbmNvbnN0IGdldE5vZGVUaXRsZSA9IG5vZGUgPT4ge1xuICBjb25zdCB0aXRsZSA9IG5vZGUuaXNSb290XG4gICAgPyBub2RlLnRpdGxlXG4gICAgOiBub2RlLmNoaWxkcmVuLmZpbmQoYyA9PiAhYy5pc0RpciAmJiBjLnRpdGxlKT8udGl0bGUgfHwgbm9kZS50aXRsZTtcbiAgcmV0dXJuIHRpdGxlO1xufTtcblxuY29uc3QgVHJlZU5vZGUgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbiwgdHJlZURhdGEsIGRlcHRoID0gMCwgb25Ub2dnbGUgfSA9IHByb3BzO1xuICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24uZ2V0KCduYW1lJyk7XG5cbiAgY29uc3Qgc29ydGVkRGF0YSA9IHNvcnRCeSh0cmVlRGF0YSwgZ2V0Tm9kZVRpdGxlKTtcbiAgcmV0dXJuIHNvcnRlZERhdGEubWFwKG5vZGUgPT4ge1xuICAgIGNvbnN0IGxlYWYgPSBub2RlLmNoaWxkcmVuLmxlbmd0aCA8PSAxICYmICFub2RlLmNoaWxkcmVuWzBdPy5pc0RpciAmJiBkZXB0aCA+IDA7XG4gICAgaWYgKGxlYWYpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgdG8gPSBgL2NvbGxlY3Rpb25zLyR7Y29sbGVjdGlvbk5hbWV9YDtcbiAgICBpZiAoZGVwdGggPiAwKSB7XG4gICAgICB0byA9IGAke3RvfS9maWx0ZXIke25vZGUucGF0aH1gO1xuICAgIH1cbiAgICBjb25zdCB0aXRsZSA9IGdldE5vZGVUaXRsZShub2RlKTtcblxuICAgIGNvbnN0IGhhc0NoaWxkcmVuID0gZGVwdGggPT09IDAgfHwgbm9kZS5jaGlsZHJlbi5zb21lKGMgPT4gYy5jaGlsZHJlbi5zb21lKGMgPT4gYy5pc0RpcikpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e25vZGUucGF0aH0+XG4gICAgICAgIDxUcmVlTmF2TGlua1xuICAgICAgICAgIGV4YWN0XG4gICAgICAgICAgdG89e3RvfVxuICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cInNpZGViYXItYWN0aXZlXCJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblRvZ2dsZSh7IG5vZGUsIGV4cGFuZGVkOiAhbm9kZS5leHBhbmRlZCB9KX1cbiAgICAgICAgICBkZXB0aD17ZGVwdGh9XG4gICAgICAgICAgZGF0YS10ZXN0aWQ9e25vZGUucGF0aH1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY29uIHR5cGU9XCJ3cml0ZVwiIC8+XG4gICAgICAgICAgPE5vZGVUaXRsZUNvbnRhaW5lcj5cbiAgICAgICAgICAgIDxOb2RlVGl0bGU+e3RpdGxlfTwvTm9kZVRpdGxlPlxuICAgICAgICAgICAge2hhc0NoaWxkcmVuICYmIChub2RlLmV4cGFuZGVkID8gPENhcmV0RG93biAvPiA6IDxDYXJldFJpZ2h0IC8+KX1cbiAgICAgICAgICA8L05vZGVUaXRsZUNvbnRhaW5lcj5cbiAgICAgICAgPC9UcmVlTmF2TGluaz5cbiAgICAgICAge25vZGUuZXhwYW5kZWQgJiYgKFxuICAgICAgICAgIDxUcmVlTm9kZVxuICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgIGRlcHRoPXtkZXB0aCArIDF9XG4gICAgICAgICAgICB0cmVlRGF0YT17bm9kZS5jaGlsZHJlbn1cbiAgICAgICAgICAgIG9uVG9nZ2xlPXtvblRvZ2dsZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9KTtcbn07XG5cblRyZWVOb2RlLnByb3BUeXBlcyA9IHtcbiAgY29sbGVjdGlvbjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBkZXB0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgdHJlZURhdGE6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuICBvblRvZ2dsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmV4cG9ydCBjb25zdCB3YWxrID0gKHRyZWVEYXRhLCBjYWxsYmFjaykgPT4ge1xuICBjb25zdCB0cmF2ZXJzZSA9IGNoaWxkcmVuID0+IHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBjYWxsYmFjayhjaGlsZCk7XG4gICAgICB0cmF2ZXJzZShjaGlsZC5jaGlsZHJlbik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0cmF2ZXJzZSh0cmVlRGF0YSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VHJlZURhdGEgPSAoY29sbGVjdGlvbiwgZW50cmllcykgPT4ge1xuICBjb25zdCBjb2xsZWN0aW9uRm9sZGVyID0gY29sbGVjdGlvbi5nZXQoJ2ZvbGRlcicpO1xuICBjb25zdCByb290Rm9sZGVyID0gJy8nO1xuICBjb25zdCBlbnRyaWVzT2JqID0gZW50cmllc1xuICAgIC50b0pTKClcbiAgICAubWFwKGUgPT4gKHsgLi4uZSwgcGF0aDogZS5wYXRoLnN1YnN0cmluZyhjb2xsZWN0aW9uRm9sZGVyLmxlbmd0aCkgfSkpO1xuXG4gIGNvbnN0IGRpcnMgPSBlbnRyaWVzT2JqLnJlZHVjZSgoYWNjLCBlbnRyeSkgPT4ge1xuICAgIGxldCBkaXIgPSBkaXJuYW1lKGVudHJ5LnBhdGgpO1xuICAgIHdoaWxlICghYWNjW2Rpcl0gJiYgZGlyICYmIGRpciAhPT0gcm9vdEZvbGRlcikge1xuICAgICAgY29uc3QgcGFydHMgPSBkaXIuc3BsaXQoc2VwKTtcbiAgICAgIGFjY1tkaXJdID0gcGFydHMucG9wKCk7XG4gICAgICBkaXIgPSBwYXJ0cy5sZW5ndGggJiYgcGFydHMuam9pbihzZXApO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgaWYgKGNvbGxlY3Rpb24uZ2V0SW4oWyduZXN0ZWQnLCAnc3VtbWFyeSddKSkge1xuICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLnNldCgnc3VtbWFyeScsIGNvbGxlY3Rpb24uZ2V0SW4oWyduZXN0ZWQnLCAnc3VtbWFyeSddKSk7XG4gIH0gZWxzZSB7XG4gICAgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24uZGVsZXRlKCdzdW1tYXJ5Jyk7XG4gIH1cblxuICBjb25zdCBmbGF0RGF0YSA9IFtcbiAgICB7XG4gICAgICB0aXRsZTogY29sbGVjdGlvbi5nZXQoJ2xhYmVsJyksXG4gICAgICBwYXRoOiByb290Rm9sZGVyLFxuICAgICAgaXNEaXI6IHRydWUsXG4gICAgICBpc1Jvb3Q6IHRydWUsXG4gICAgfSxcbiAgICAuLi5PYmplY3QuZW50cmllcyhkaXJzKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gKHtcbiAgICAgIHRpdGxlOiB2YWx1ZSxcbiAgICAgIHBhdGg6IGtleSxcbiAgICAgIGlzRGlyOiB0cnVlLFxuICAgICAgaXNSb290OiBmYWxzZSxcbiAgICB9KSksXG4gICAgLi4uZW50cmllc09iai5tYXAoKGUsIGluZGV4KSA9PiB7XG4gICAgICBsZXQgZW50cnlNYXAgPSBlbnRyaWVzLmdldChpbmRleCk7XG4gICAgICBlbnRyeU1hcCA9IGVudHJ5TWFwLnNldChcbiAgICAgICAgJ2RhdGEnLFxuICAgICAgICBhZGRGaWxlVGVtcGxhdGVGaWVsZHMoZW50cnlNYXAuZ2V0KCdwYXRoJyksIGVudHJ5TWFwLmdldCgnZGF0YScpKSxcbiAgICAgICk7XG4gICAgICBjb25zdCB0aXRsZSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5TWFwKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmUsXG4gICAgICAgIHRpdGxlLFxuICAgICAgICBpc0RpcjogZmFsc2UsXG4gICAgICAgIGlzUm9vdDogZmFsc2UsXG4gICAgICB9O1xuICAgIH0pLFxuICBdO1xuXG4gIGNvbnN0IHBhcmVudHNUb0NoaWxkcmVuID0gZmxhdERhdGEucmVkdWNlKChhY2MsIG5vZGUpID0+IHtcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhdGggPT09IHJvb3RGb2xkZXIgPyAnJyA6IGRpcm5hbWUobm9kZS5wYXRoKTtcbiAgICBpZiAoYWNjW3BhcmVudF0pIHtcbiAgICAgIGFjY1twYXJlbnRdLnB1c2gobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1twYXJlbnRdID0gW25vZGVdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgY29uc3QgcmVkdWNlciA9IChhY2MsIHZhbHVlKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IHZhbHVlO1xuICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgIGlmIChwYXJlbnRzVG9DaGlsZHJlbltub2RlLnBhdGhdKSB7XG4gICAgICBjaGlsZHJlbiA9IHBhcmVudHNUb0NoaWxkcmVuW25vZGUucGF0aF0ucmVkdWNlKHJlZHVjZXIsIFtdKTtcbiAgICB9XG5cbiAgICBhY2MucHVzaCh7IC4uLm5vZGUsIGNoaWxkcmVuIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgY29uc3QgdHJlZURhdGEgPSBwYXJlbnRzVG9DaGlsZHJlblsnJ10ucmVkdWNlKHJlZHVjZXIsIFtdKTtcblxuICByZXR1cm4gdHJlZURhdGE7XG59O1xuXG5leHBvcnQgY29uc3QgdXBkYXRlTm9kZSA9ICh0cmVlRGF0YSwgbm9kZSwgY2FsbGJhY2spID0+IHtcbiAgbGV0IHN0b3AgPSBmYWxzZTtcblxuICBjb25zdCB1cGRhdGVyID0gbm9kZXMgPT4ge1xuICAgIGlmIChzdG9wKSB7XG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChub2Rlc1tpXS5wYXRoID09PSBub2RlLnBhdGgpIHtcbiAgICAgICAgbm9kZXNbaV0gPSBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgIHJldHVybiBub2RlcztcbiAgICAgIH1cbiAgICB9XG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHVwZGF0ZXIobm9kZS5jaGlsZHJlbikpO1xuICAgIHJldHVybiBub2RlcztcbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcihbLi4udHJlZURhdGFdKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBOZXN0ZWRDb2xsZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgZW50cmllczogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QuaXNSZXF1aXJlZCxcbiAgICBmaWx0ZXJUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0cmVlRGF0YTogZ2V0VHJlZURhdGEodGhpcy5wcm9wcy5jb2xsZWN0aW9uLCB0aGlzLnByb3BzLmVudHJpZXMpLFxuICAgICAgc2VsZWN0ZWQ6IG51bGwsXG4gICAgICB1c2VGaWx0ZXI6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGVudHJpZXMsIGZpbHRlclRlcm0gfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKFxuICAgICAgY29sbGVjdGlvbiAhPT0gcHJldlByb3BzLmNvbGxlY3Rpb24gfHxcbiAgICAgIGVudHJpZXMgIT09IHByZXZQcm9wcy5lbnRyaWVzIHx8XG4gICAgICBmaWx0ZXJUZXJtICE9PSBwcmV2UHJvcHMuZmlsdGVyVGVybVxuICAgICkge1xuICAgICAgY29uc3QgZXhwYW5kZWQgPSB7fTtcbiAgICAgIHdhbGsodGhpcy5zdGF0ZS50cmVlRGF0YSwgbm9kZSA9PiB7XG4gICAgICAgIGlmIChub2RlLmV4cGFuZGVkKSB7XG4gICAgICAgICAgZXhwYW5kZWRbbm9kZS5wYXRoXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgdHJlZURhdGEgPSBnZXRUcmVlRGF0YShjb2xsZWN0aW9uLCBlbnRyaWVzKTtcblxuICAgICAgY29uc3QgcGF0aCA9IGAvJHtmaWx0ZXJUZXJtfWA7XG4gICAgICB3YWxrKHRyZWVEYXRhLCBub2RlID0+IHtcbiAgICAgICAgaWYgKGV4cGFuZGVkW25vZGUucGF0aF0gfHwgKHRoaXMuc3RhdGUudXNlRmlsdGVyICYmIHBhdGguc3RhcnRzV2l0aChub2RlLnBhdGgpKSkge1xuICAgICAgICAgIG5vZGUuZXhwYW5kZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB0cmVlRGF0YSB9KTtcbiAgICB9XG4gIH1cblxuICBvblRvZ2dsZSA9ICh7IG5vZGUsIGV4cGFuZGVkIH0pID0+IHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuc2VsZWN0ZWQgfHwgdGhpcy5zdGF0ZS5zZWxlY3RlZC5wYXRoID09PSBub2RlLnBhdGggfHwgZXhwYW5kZWQpIHtcbiAgICAgIGNvbnN0IHRyZWVEYXRhID0gdXBkYXRlTm9kZSh0aGlzLnN0YXRlLnRyZWVEYXRhLCBub2RlLCBub2RlID0+ICh7XG4gICAgICAgIC4uLm5vZGUsXG4gICAgICAgIGV4cGFuZGVkLFxuICAgICAgfSkpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRyZWVEYXRhLCBzZWxlY3RlZDogbm9kZSwgdXNlRmlsdGVyOiBmYWxzZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZG9uJ3QgY29sbGFwc2Ugbm9uIHNlbGVjdGVkIG5vZGVzIHdoZW4gY2xpY2tlZFxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkOiBub2RlLCB1c2VGaWx0ZXI6IGZhbHNlIH0pO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0cmVlRGF0YSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24gfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gPFRyZWVOb2RlIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259IHRyZWVEYXRhPXt0cmVlRGF0YX0gb25Ub2dnbGU9e3RoaXMub25Ub2dnbGV9IC8+O1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9uIH0gPSBvd25Qcm9wcztcbiAgY29uc3QgZW50cmllcyA9IHNlbGVjdEVudHJpZXMoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbikgfHwgTGlzdCgpO1xuICByZXR1cm4geyBlbnRyaWVzIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBudWxsKShOZXN0ZWRDb2xsZWN0aW9uKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CaretDown = ( /*#__PURE__*/0, _styledBase.default)(Caret, {
  target: "eqdmagz3",
  label: "CaretDown"
})(_netlifyCmsUiDefault.components.caretDown, ";color:currentColor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CaretRight = ( /*#__PURE__*/0, _styledBase.default)(Caret, {
  target: "eqdmagz4",
  label: "CaretRight"
})(_netlifyCmsUiDefault.components.caretRight, ";color:currentColor;left:2px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TreeNavLink = ( /*#__PURE__*/0, _styledBase.default)(_reactRouterDom.NavLink, {
  target: "eqdmagz5",
  label: "TreeNavLink"
})("display:flex;font-size:14px;font-weight:500;align-items:center;padding:8px;padding-left:", props => props.depth * 20 + 12, "px;border-left:2px solid #fff;", _netlifyCmsUiDefault.Icon, "{margin-right:8px;flex-shrink:0;}", props => /*#__PURE__*/(0, _core.css)("&:hover,&:active,&.", props.activeClassName, "{color:", _netlifyCmsUiDefault.colors.active, ";background-color:", _netlifyCmsUiDefault.colors.activeBackground, ";border-left-color:#4863c6;};label:TreeNavLink;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

const getNodeTitle = node => {
  var _node$children$find;

  const title = node.isRoot ? node.title : ((_node$children$find = node.children.find(c => !c.isDir && c.title)) === null || _node$children$find === void 0 ? void 0 : _node$children$find.title) || node.title;
  return title;
};

const TreeNode = props => {
  const {
    collection,
    treeData,
    depth = 0,
    onToggle
  } = props;
  const collectionName = collection.get('name');
  const sortedData = (0, _sortBy2.default)(treeData, getNodeTitle);
  return sortedData.map(node => {
    var _node$children$;

    const leaf = node.children.length <= 1 && !((_node$children$ = node.children[0]) === null || _node$children$ === void 0 ? void 0 : _node$children$.isDir) && depth > 0;

    if (leaf) {
      return null;
    }

    let to = `/collections/${collectionName}`;

    if (depth > 0) {
      to = `${to}/filter${node.path}`;
    }

    const title = getNodeTitle(node);
    const hasChildren = depth === 0 || node.children.some(c => c.children.some(c => c.isDir));
    return (0, _core.jsx)(_react.default.Fragment, {
      key: node.path
    }, (0, _core.jsx)(TreeNavLink, {
      exact: true,
      to: to,
      activeClassName: "sidebar-active",
      onClick: () => onToggle({
        node,
        expanded: !node.expanded
      }),
      depth: depth,
      "data-testid": node.path
    }, (0, _core.jsx)(_netlifyCmsUiDefault.Icon, {
      type: "write"
    }), (0, _core.jsx)(NodeTitleContainer, null, (0, _core.jsx)(NodeTitle, null, title), hasChildren && (node.expanded ? (0, _core.jsx)(CaretDown, null) : (0, _core.jsx)(CaretRight, null)))), node.expanded && (0, _core.jsx)(TreeNode, {
      collection: collection,
      depth: depth + 1,
      treeData: node.children,
      onToggle: onToggle
    }));
  });
};

TreeNode.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  depth: _propTypes.default.number,
  treeData: _propTypes.default.array.isRequired,
  onToggle: _propTypes.default.func.isRequired
};

const walk = (treeData, callback) => {
  const traverse = children => {
    for (const child of children) {
      callback(child);
      traverse(child.children);
    }
  };

  return traverse(treeData);
};

exports.walk = walk;

const getTreeData = (collection, entries) => {
  const collectionFolder = collection.get('folder');
  const rootFolder = '/';
  const entriesObj = entries.toJS().map(e => _objectSpread(_objectSpread({}, e), {}, {
    path: e.path.substring(collectionFolder.length)
  }));
  const dirs = entriesObj.reduce((acc, entry) => {
    let dir = (0, _path.dirname)(entry.path);

    while (!acc[dir] && dir && dir !== rootFolder) {
      const parts = dir.split(_path.sep);
      acc[dir] = parts.pop();
      dir = parts.length && parts.join(_path.sep);
    }

    return acc;
  }, {});

  if (collection.getIn(['nested', 'summary'])) {
    collection = collection.set('summary', collection.getIn(['nested', 'summary']));
  } else {
    collection = collection.delete('summary');
  }

  const flatData = [{
    title: collection.get('label'),
    path: rootFolder,
    isDir: true,
    isRoot: true
  }, ...Object.entries(dirs).map(([key, value]) => ({
    title: value,
    path: key,
    isDir: true,
    isRoot: false
  })), ...entriesObj.map((e, index) => {
    let entryMap = entries.get(index);
    entryMap = entryMap.set('data', addFileTemplateFields(entryMap.get('path'), entryMap.get('data')));
    const title = (0, _collections.selectEntryCollectionTitle)(collection, entryMap);
    return _objectSpread(_objectSpread({}, e), {}, {
      title,
      isDir: false,
      isRoot: false
    });
  })];
  const parentsToChildren = flatData.reduce((acc, node) => {
    const parent = node.path === rootFolder ? '' : (0, _path.dirname)(node.path);

    if (acc[parent]) {
      acc[parent].push(node);
    } else {
      acc[parent] = [node];
    }

    return acc;
  }, {});

  const reducer = (acc, value) => {
    const node = value;
    let children = [];

    if (parentsToChildren[node.path]) {
      children = parentsToChildren[node.path].reduce(reducer, []);
    }

    acc.push(_objectSpread(_objectSpread({}, node), {}, {
      children
    }));
    return acc;
  };

  const treeData = parentsToChildren[''].reduce(reducer, []);
  return treeData;
};

exports.getTreeData = getTreeData;

const updateNode = (treeData, node, callback) => {
  let stop = false;

  const updater = nodes => {
    if (stop) {
      return nodes;
    }

    for (let i = 0; i < nodes.length; i++) {
      if (nodes[i].path === node.path) {
        nodes[i] = callback(node);
        stop = true;
        return nodes;
      }
    }

    nodes.forEach(node => updater(node.children));
    return nodes;
  };

  return updater([...treeData]);
};

exports.updateNode = updateNode;

class NestedCollection extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "onToggle", ({
      node,
      expanded
    }) => {
      if (!this.state.selected || this.state.selected.path === node.path || expanded) {
        const treeData = updateNode(this.state.treeData, node, node => _objectSpread(_objectSpread({}, node), {}, {
          expanded
        }));
        this.setState({
          treeData,
          selected: node,
          useFilter: false
        });
      } else {
        // don't collapse non selected nodes when clicked
        this.setState({
          selected: node,
          useFilter: false
        });
      }
    });

    this.state = {
      treeData: getTreeData(this.props.collection, this.props.entries),
      selected: null,
      useFilter: true
    };
  }

  componentDidUpdate(prevProps) {
    const {
      collection,
      entries,
      filterTerm
    } = this.props;

    if (collection !== prevProps.collection || entries !== prevProps.entries || filterTerm !== prevProps.filterTerm) {
      const expanded = {};
      walk(this.state.treeData, node => {
        if (node.expanded) {
          expanded[node.path] = true;
        }
      });
      const treeData = getTreeData(collection, entries);
      const path = `/${filterTerm}`;
      walk(treeData, node => {
        if (expanded[node.path] || this.state.useFilter && path.startsWith(node.path)) {
          node.expanded = true;
        }
      });
      this.setState({
        treeData
      });
    }
  }

  render() {
    const {
      treeData
    } = this.state;
    const {
      collection
    } = this.props;
    return (0, _core.jsx)(TreeNode, {
      collection: collection,
      treeData: treeData,
      onToggle: this.onToggle
    });
  }

}

exports.NestedCollection = NestedCollection;

_defineProperty(NestedCollection, "propTypes", {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entries: _reactImmutableProptypes.default.list.isRequired,
  filterTerm: _propTypes.default.string
});

function mapStateToProps(state, ownProps) {
  const {
    collection
  } = ownProps;
  const entries = (0, _entries.selectEntries)(state.entries, collection) || (0, _immutable.List)();
  return {
    entries
  };
}

var _default = (0, _reactRedux.connect)(mapStateToProps, null)(NestedCollection);

exports.default = _default;