"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Collection = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactRedux = require("react-redux");

var _reactPolyglot = require("react-polyglot");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _urlHelper = require("../../lib/urlHelper");

var _Sidebar = _interopRequireDefault(require("./Sidebar"));

var _CollectionTop = _interopRequireDefault(require("./CollectionTop"));

var _EntriesCollection = _interopRequireDefault(require("./Entries/EntriesCollection"));

var _EntriesSearch = _interopRequireDefault(require("./Entries/EntriesSearch"));

var _CollectionControls = _interopRequireDefault(require("./CollectionControls"));

var _entries = require("../../actions/entries");

var _collections = require("../../reducers/collections");

var _entries2 = require("../../reducers/entries");

var _collectionViews = require("../../constants/collectionViews");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const CollectionContainer = (0, _styledBase.default)("div", {
  target: "e1yhfkro0",
  label: "CollectionContainer"
})("margin:", _netlifyCmsUiDefault.lengths.pageMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CollectionMain = (0, _styledBase.default)("main", {
  target: "e1yhfkro1",
  label: "CollectionMain"
})(process.env.NODE_ENV === "production" ? {
  name: "1r4jzjw",
  styles: "padding-left:280px;"
} : {
  name: "1r4jzjw",
  styles: "padding-left:280px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQmtDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBsZW5ndGhzLCBjb21wb25lbnRzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBnZXROZXdFbnRyeVVybCB9IGZyb20gJ0xpYi91cmxIZWxwZXInO1xuaW1wb3J0IFNpZGViYXIgZnJvbSAnLi9TaWRlYmFyJztcbmltcG9ydCBDb2xsZWN0aW9uVG9wIGZyb20gJy4vQ29sbGVjdGlvblRvcCc7XG5pbXBvcnQgRW50cmllc0NvbGxlY3Rpb24gZnJvbSAnLi9FbnRyaWVzL0VudHJpZXNDb2xsZWN0aW9uJztcbmltcG9ydCBFbnRyaWVzU2VhcmNoIGZyb20gJy4vRW50cmllcy9FbnRyaWVzU2VhcmNoJztcbmltcG9ydCBDb2xsZWN0aW9uQ29udHJvbHMgZnJvbSAnLi9Db2xsZWN0aW9uQ29udHJvbHMnO1xuaW1wb3J0IHsgc29ydEJ5RmllbGQsIGZpbHRlckJ5RmllbGQgfSBmcm9tICcuLi8uLi9hY3Rpb25zL2VudHJpZXMnO1xuaW1wb3J0IHsgc2VsZWN0U29ydGFibGVGaWVsZHMsIHNlbGVjdFZpZXdGaWx0ZXJzIH0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgc2VsZWN0RW50cmllc1NvcnQsIHNlbGVjdEVudHJpZXNGaWx0ZXIgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9lbnRyaWVzJztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuXG5jb25zdCBDb2xsZWN0aW9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiAke2xlbmd0aHMucGFnZU1hcmdpbn07XG5gO1xuXG5jb25zdCBDb2xsZWN0aW9uTWFpbiA9IHN0eWxlZC5tYWluYFxuICBwYWRkaW5nLWxlZnQ6IDI4MHB4O1xuYDtcblxuY29uc3QgU2VhcmNoUmVzdWx0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuICBtYXJnaW4tYm90dG9tOiAyMnB4O1xuYDtcblxuY29uc3QgU2VhcmNoUmVzdWx0SGVhZGluZyA9IHN0eWxlZC5oMWBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3BIZWFkaW5nfTtcbmA7XG5cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBzZWFyY2hUZXJtOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbGxlY3Rpb25OYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGlzU2VhcmNoUmVzdWx0czogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNTaW5nbGVTZWFyY2hSZXN1bHQ6IFByb3BUeXBlcy5ib29sLFxuICAgIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAuaXNSZXF1aXJlZCxcbiAgICBzb3J0YWJsZUZpZWxkczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHNvcnQ6IEltbXV0YWJsZVByb3BUeXBlcy5vcmRlcmVkTWFwLFxuICAgIG9uU29ydENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIHZpZXdTdHlsZTogVklFV19TVFlMRV9MSVNULFxuICB9O1xuXG4gIHJlbmRlckVudHJpZXNDb2xsZWN0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgZmlsdGVyVGVybSB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPEVudHJpZXNDb2xsZWN0aW9uXG4gICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgIHZpZXdTdHlsZT17dGhpcy5zdGF0ZS52aWV3U3R5bGV9XG4gICAgICAgIGZpbHRlclRlcm09e2ZpbHRlclRlcm19XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRW50cmllc1NlYXJjaCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHNlYXJjaFRlcm0sIGNvbGxlY3Rpb25zLCBjb2xsZWN0aW9uLCBpc1NpbmdsZVNlYXJjaFJlc3VsdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gKFxuICAgICAgPEVudHJpZXNTZWFyY2hcbiAgICAgICAgY29sbGVjdGlvbnM9e2lzU2luZ2xlU2VhcmNoUmVzdWx0ID8gY29sbGVjdGlvbnMuZmlsdGVyKGMgPT4gYyA9PT0gY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uc31cbiAgICAgICAgc2VhcmNoVGVybT17c2VhcmNoVGVybX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2VWaWV3U3R5bGUgPSB2aWV3U3R5bGUgPT4ge1xuICAgIGlmICh0aGlzLnN0YXRlLnZpZXdTdHlsZSAhPT0gdmlld1N0eWxlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmlld1N0eWxlIH0pO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGVjdGlvbixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgY29sbGVjdGlvbk5hbWUsXG4gICAgICBpc1NlYXJjaFJlc3VsdHMsXG4gICAgICBpc1NpbmdsZVNlYXJjaFJlc3VsdCxcbiAgICAgIHNlYXJjaFRlcm0sXG4gICAgICBzb3J0YWJsZUZpZWxkcyxcbiAgICAgIG9uU29ydENsaWNrLFxuICAgICAgc29ydCxcbiAgICAgIHZpZXdGaWx0ZXJzLFxuICAgICAgZmlsdGVyVGVybSxcbiAgICAgIHQsXG4gICAgICBvbkZpbHRlckNsaWNrLFxuICAgICAgZmlsdGVyLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IG5ld0VudHJ5VXJsID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpID8gZ2V0TmV3RW50cnlVcmwoY29sbGVjdGlvbk5hbWUpIDogJyc7XG4gICAgaWYgKG5ld0VudHJ5VXJsICYmIGZpbHRlclRlcm0pIHtcbiAgICAgIG5ld0VudHJ5VXJsID0gZ2V0TmV3RW50cnlVcmwoY29sbGVjdGlvbk5hbWUpO1xuICAgICAgaWYgKGZpbHRlclRlcm0pIHtcbiAgICAgICAgbmV3RW50cnlVcmwgPSBgJHtuZXdFbnRyeVVybH0/cGF0aD0ke2ZpbHRlclRlcm19YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWFyY2hSZXN1bHRLZXkgPVxuICAgICAgJ2NvbGxlY3Rpb24uY29sbGVjdGlvblRvcC5zZWFyY2hSZXN1bHRzJyArIChpc1NpbmdsZVNlYXJjaFJlc3VsdCA/ICdJbkNvbGxlY3Rpb24nIDogJycpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb2xsZWN0aW9uQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhclxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICBjb2xsZWN0aW9uPXsoIWlzU2VhcmNoUmVzdWx0cyB8fCBpc1NpbmdsZVNlYXJjaFJlc3VsdCkgJiYgY29sbGVjdGlvbn1cbiAgICAgICAgICBzZWFyY2hUZXJtPXtzZWFyY2hUZXJtfVxuICAgICAgICAgIGZpbHRlclRlcm09e2ZpbHRlclRlcm19XG4gICAgICAgIC8+XG4gICAgICAgIDxDb2xsZWN0aW9uTWFpbj5cbiAgICAgICAgICB7aXNTZWFyY2hSZXN1bHRzID8gKFxuICAgICAgICAgICAgPFNlYXJjaFJlc3VsdENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPFNlYXJjaFJlc3VsdEhlYWRpbmc+XG4gICAgICAgICAgICAgICAge3Qoc2VhcmNoUmVzdWx0S2V5LCB7IHNlYXJjaFRlcm0sIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpIH0pfVxuICAgICAgICAgICAgICA8L1NlYXJjaFJlc3VsdEhlYWRpbmc+XG4gICAgICAgICAgICA8L1NlYXJjaFJlc3VsdENvbnRhaW5lcj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPENvbGxlY3Rpb25Ub3AgY29sbGVjdGlvbj17Y29sbGVjdGlvbn0gbmV3RW50cnlVcmw9e25ld0VudHJ5VXJsfSAvPlxuICAgICAgICAgICAgICA8Q29sbGVjdGlvbkNvbnRyb2xzXG4gICAgICAgICAgICAgICAgdmlld1N0eWxlPXt0aGlzLnN0YXRlLnZpZXdTdHlsZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZVZpZXdTdHlsZT17dGhpcy5oYW5kbGVDaGFuZ2VWaWV3U3R5bGV9XG4gICAgICAgICAgICAgICAgc29ydGFibGVGaWVsZHM9e3NvcnRhYmxlRmllbGRzfVxuICAgICAgICAgICAgICAgIG9uU29ydENsaWNrPXtvblNvcnRDbGlja31cbiAgICAgICAgICAgICAgICBzb3J0PXtzb3J0fVxuICAgICAgICAgICAgICAgIHZpZXdGaWx0ZXJzPXt2aWV3RmlsdGVyc31cbiAgICAgICAgICAgICAgICB0PXt0fVxuICAgICAgICAgICAgICAgIG9uRmlsdGVyQ2xpY2s9e29uRmlsdGVyQ2xpY2t9XG4gICAgICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJ9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtpc1NlYXJjaFJlc3VsdHMgPyB0aGlzLnJlbmRlckVudHJpZXNTZWFyY2goKSA6IHRoaXMucmVuZGVyRW50cmllc0NvbGxlY3Rpb24oKX1cbiAgICAgICAgPC9Db2xsZWN0aW9uTWFpbj5cbiAgICAgIDwvQ29sbGVjdGlvbkNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucyB9ID0gc3RhdGU7XG4gIGNvbnN0IHsgaXNTZWFyY2hSZXN1bHRzLCBtYXRjaCwgdCB9ID0gb3duUHJvcHM7XG4gIGNvbnN0IHsgbmFtZSwgc2VhcmNoVGVybSA9ICcnLCBmaWx0ZXJUZXJtID0gJycgfSA9IG1hdGNoLnBhcmFtcztcbiAgY29uc3QgY29sbGVjdGlvbiA9IG5hbWUgPyBjb2xsZWN0aW9ucy5nZXQobmFtZSkgOiBjb2xsZWN0aW9ucy5maXJzdCgpO1xuICBjb25zdCBzb3J0ID0gc2VsZWN0RW50cmllc1NvcnQoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbi5nZXQoJ25hbWUnKSk7XG4gIGNvbnN0IHNvcnRhYmxlRmllbGRzID0gc2VsZWN0U29ydGFibGVGaWVsZHMoY29sbGVjdGlvbiwgdCk7XG4gIGNvbnN0IHZpZXdGaWx0ZXJzID0gc2VsZWN0Vmlld0ZpbHRlcnMoY29sbGVjdGlvbik7XG4gIGNvbnN0IGZpbHRlciA9IHNlbGVjdEVudHJpZXNGaWx0ZXIoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbi5nZXQoJ25hbWUnKSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIGNvbGxlY3Rpb25zLFxuICAgIGNvbGxlY3Rpb25OYW1lOiBuYW1lLFxuICAgIGlzU2VhcmNoUmVzdWx0cyxcbiAgICBzZWFyY2hUZXJtLFxuICAgIGZpbHRlclRlcm0sXG4gICAgc29ydCxcbiAgICBzb3J0YWJsZUZpZWxkcyxcbiAgICB2aWV3RmlsdGVycyxcbiAgICBmaWx0ZXIsXG4gIH07XG59XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgc29ydEJ5RmllbGQsXG4gIGZpbHRlckJ5RmllbGQsXG59O1xuXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBvblNvcnRDbGljazogKGtleSwgZGlyZWN0aW9uKSA9PlxuICAgICAgZGlzcGF0Y2hQcm9wcy5zb3J0QnlGaWVsZChzdGF0ZVByb3BzLmNvbGxlY3Rpb24sIGtleSwgZGlyZWN0aW9uKSxcbiAgICBvbkZpbHRlckNsaWNrOiBmaWx0ZXIgPT4gZGlzcGF0Y2hQcm9wcy5maWx0ZXJCeUZpZWxkKHN0YXRlUHJvcHMuY29sbGVjdGlvbiwgZmlsdGVyKSxcbiAgfTtcbn07XG5cbmNvbnN0IENvbm5lY3RlZENvbGxlY3Rpb24gPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShDb2xsZWN0aW9uKTtcblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoQ29ubmVjdGVkQ29sbGVjdGlvbik7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchResultContainer = (0, _styledBase.default)("div", {
  target: "e1yhfkro2",
  label: "SearchResultContainer"
})(_netlifyCmsUiDefault.components.cardTop, ";margin-bottom:22px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SearchResultHeading = (0, _styledBase.default)("h1", {
  target: "e1yhfkro3",
  label: "SearchResultHeading"
})(_netlifyCmsUiDefault.components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

class Collection extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      viewStyle: _collectionViews.VIEW_STYLE_LIST
    });

    _defineProperty(this, "renderEntriesCollection", () => {
      const {
        collection,
        filterTerm
      } = this.props;
      return (0, _core.jsx)(_EntriesCollection.default, {
        collection: collection,
        viewStyle: this.state.viewStyle,
        filterTerm: filterTerm
      });
    });

    _defineProperty(this, "renderEntriesSearch", () => {
      const {
        searchTerm,
        collections,
        collection,
        isSingleSearchResult
      } = this.props;
      return (0, _core.jsx)(_EntriesSearch.default, {
        collections: isSingleSearchResult ? collections.filter(c => c === collection) : collections,
        searchTerm: searchTerm
      });
    });

    _defineProperty(this, "handleChangeViewStyle", viewStyle => {
      if (this.state.viewStyle !== viewStyle) {
        this.setState({
          viewStyle
        });
      }
    });
  }

  render() {
    const {
      collection,
      collections,
      collectionName,
      isSearchResults,
      isSingleSearchResult,
      searchTerm,
      sortableFields,
      onSortClick,
      sort,
      viewFilters,
      filterTerm,
      t,
      onFilterClick,
      filter
    } = this.props;
    let newEntryUrl = collection.get('create') ? (0, _urlHelper.getNewEntryUrl)(collectionName) : '';

    if (newEntryUrl && filterTerm) {
      newEntryUrl = (0, _urlHelper.getNewEntryUrl)(collectionName);

      if (filterTerm) {
        newEntryUrl = `${newEntryUrl}?path=${filterTerm}`;
      }
    }

    const searchResultKey = 'collection.collectionTop.searchResults' + (isSingleSearchResult ? 'InCollection' : '');
    return (0, _core.jsx)(CollectionContainer, null, (0, _core.jsx)(_Sidebar.default, {
      collections: collections,
      collection: (!isSearchResults || isSingleSearchResult) && collection,
      searchTerm: searchTerm,
      filterTerm: filterTerm
    }), (0, _core.jsx)(CollectionMain, null, isSearchResults ? (0, _core.jsx)(SearchResultContainer, null, (0, _core.jsx)(SearchResultHeading, null, t(searchResultKey, {
      searchTerm,
      collection: collection.get('label')
    }))) : (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(_CollectionTop.default, {
      collection: collection,
      newEntryUrl: newEntryUrl
    }), (0, _core.jsx)(_CollectionControls.default, {
      viewStyle: this.state.viewStyle,
      onChangeViewStyle: this.handleChangeViewStyle,
      sortableFields: sortableFields,
      onSortClick: onSortClick,
      sort: sort,
      viewFilters: viewFilters,
      t: t,
      onFilterClick: onFilterClick,
      filter: filter
    })), isSearchResults ? this.renderEntriesSearch() : this.renderEntriesCollection()));
  }

}

exports.Collection = Collection;

_defineProperty(Collection, "propTypes", {
  searchTerm: _propTypes.default.string,
  collectionName: _propTypes.default.string,
  isSearchResults: _propTypes.default.bool,
  isSingleSearchResult: _propTypes.default.bool,
  collection: _reactImmutableProptypes.default.map.isRequired,
  collections: _reactImmutableProptypes.default.orderedMap.isRequired,
  sortableFields: _propTypes.default.array,
  sort: _reactImmutableProptypes.default.orderedMap,
  onSortClick: _propTypes.default.func.isRequired
});

function mapStateToProps(state, ownProps) {
  const {
    collections
  } = state;
  const {
    isSearchResults,
    match,
    t
  } = ownProps;
  const {
    name,
    searchTerm = '',
    filterTerm = ''
  } = match.params;
  const collection = name ? collections.get(name) : collections.first();
  const sort = (0, _entries2.selectEntriesSort)(state.entries, collection.get('name'));
  const sortableFields = (0, _collections.selectSortableFields)(collection, t);
  const viewFilters = (0, _collections.selectViewFilters)(collection);
  const filter = (0, _entries2.selectEntriesFilter)(state.entries, collection.get('name'));
  return {
    collection,
    collections,
    collectionName: name,
    isSearchResults,
    searchTerm,
    filterTerm,
    sort,
    sortableFields,
    viewFilters,
    filter
  };
}

const mapDispatchToProps = {
  sortByField: _entries.sortByField,
  filterByField: _entries.filterByField
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  return _objectSpread(_objectSpread(_objectSpread({}, stateProps), ownProps), {}, {
    onSortClick: (key, direction) => dispatchProps.sortByField(stateProps.collection, key, direction),
    onFilterClick: filter => dispatchProps.filterByField(stateProps.collection, filter)
  });
};

const ConnectedCollection = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(Collection);

var _default = (0, _reactPolyglot.translate)()(ConnectedCollection);

exports.default = _default;