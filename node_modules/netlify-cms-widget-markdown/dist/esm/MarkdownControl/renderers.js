"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderBlock = exports.renderInline = exports.renderMark = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _VoidBlock = _interopRequireDefault(require("./components/VoidBlock"));

var _Shortcode = _interopRequireDefault(require("./components/Shortcode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const bottomMargin = '16px';
const headerStyles = `
  font-weight: 700;
  line-height: 1;
`;
const StyledH1 = (0, _styledBase.default)("h1", {
  target: "e19otniy0",
  label: "StyledH1"
})(headerStyles, ";font-size:32px;margin-top:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvcmVuZGVyZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWUwQiIsImZpbGUiOiIuLi8uLi8uLi9zcmMvTWFya2Rvd25Db250cm9sL3JlbmRlcmVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2Rpc3BsYXktbmFtZSAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29sb3JzLCBsZW5ndGhzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgVm9pZEJsb2NrIGZyb20gJy4vY29tcG9uZW50cy9Wb2lkQmxvY2snO1xuaW1wb3J0IFNob3J0Y29kZSBmcm9tICcuL2NvbXBvbmVudHMvU2hvcnRjb2RlJztcblxuY29uc3QgYm90dG9tTWFyZ2luID0gJzE2cHgnO1xuXG5jb25zdCBoZWFkZXJTdHlsZXMgPSBgXG4gIGZvbnQtd2VpZ2h0OiA3MDA7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuYDtcblxuY29uc3QgU3R5bGVkSDEgPSBzdHlsZWQuaDFgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAzMnB4O1xuICBtYXJnaW4tdG9wOiAxNnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDIgPSBzdHlsZWQuaDJgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyNHB4O1xuICBtYXJnaW4tdG9wOiAxMnB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDMgPSBzdHlsZWQuaDNgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAyMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDQgPSBzdHlsZWQuaDRgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRINSA9IHN0eWxlZC5oNWBcbiAgJHtoZWFkZXJTdHlsZXN9O1xuICBmb250LXNpemU6IDE2cHg7XG4gIG1hcmdpbi10b3A6IDhweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEg2ID0gU3R5bGVkSDUud2l0aENvbXBvbmVudCgnaDYnKTtcblxuY29uc3QgU3R5bGVkUCA9IHN0eWxlZC5wYFxuICBtYXJnaW4tYm90dG9tOiAke2JvdHRvbU1hcmdpbn07XG5gO1xuXG5jb25zdCBTdHlsZWRCbG9ja1F1b3RlID0gc3R5bGVkLmJsb2NrcXVvdGVgXG4gIHBhZGRpbmctbGVmdDogMTZweDtcbiAgYm9yZGVyLWxlZnQ6IDNweCBzb2xpZCAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgbWFyZ2luLWxlZnQ6IDA7XG4gIG1hcmdpbi1yaWdodDogMDtcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuYDtcblxuY29uc3QgU3R5bGVkUHJlID0gc3R5bGVkLnByZWBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XG5cbiAgJiA+IGNvZGUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICBjb2xvcjogI2NjYztcbiAgICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgICBwYWRkaW5nOiAxMHB4O1xuICB9XG5gO1xuXG5jb25zdCBTdHlsZWRDb2RlID0gc3R5bGVkLmNvZGVgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmJhY2tncm91bmR9O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgcGFkZGluZzogMCAycHg7XG4gIGZvbnQtc2l6ZTogODUlO1xuYDtcblxuY29uc3QgU3R5bGVkVWwgPSBzdHlsZWQudWxgXG4gIG1hcmdpbi1ib3R0b206ICR7Ym90dG9tTWFyZ2lufTtcbiAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkT2wgPSBTdHlsZWRVbC53aXRoQ29tcG9uZW50KCdvbCcpO1xuXG5jb25zdCBTdHlsZWRMaSA9IHN0eWxlZC5saWBcbiAgJiA+IHA6Zmlyc3QtY2hpbGQge1xuICAgIG1hcmdpbi10b3A6IDhweDtcbiAgfVxuXG4gICYgPiBwOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDhweDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQSA9IHN0eWxlZC5hYFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbmA7XG5cbmNvbnN0IFN0eWxlZEhyID0gc3R5bGVkLmhyYFxuICBib3JkZXI6IDFweCBzb2xpZDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IFN0eWxlZFRhYmxlID0gc3R5bGVkLnRhYmxlYFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuYDtcblxuY29uc3QgU3R5bGVkVGQgPSBzdHlsZWQudGRgXG4gIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xuICBwYWRkaW5nOiA4cHg7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG5gO1xuXG4vKipcbiAqIFNsYXRlIHVzZXMgUmVhY3QgY29tcG9uZW50cyB0byByZW5kZXIgZWFjaCB0eXBlIG9mIG5vZGUgdGhhdCBpdCByZWNlaXZlcy5cbiAqIFRoaXMgaXMgdGhlIGNsb3Nlc3QgdGhpbmcgU2xhdGUgaGFzIHRvIGEgc2NoZW1hIGRlZmluaXRpb24uIFRoZSB0eXBlcyBhcmUgc2V0XG4gKiBieSB1cyB3aGVuIHdlIG1hbnVhbGx5IGRlc2VyaWFsaXplIGZyb20gUmVtYXJrJ3MgTURBU1QgdG8gU2xhdGUncyBBU1QuXG4gKi9cblxuLyoqXG4gKiBNYXJrIENvbXBvbmVudHNcbiAqL1xuY29uc3QgQm9sZCA9IHByb3BzID0+IDxzdHJvbmc+e3Byb3BzLmNoaWxkcmVufTwvc3Ryb25nPjtcbmNvbnN0IEl0YWxpYyA9IHByb3BzID0+IDxlbT57cHJvcHMuY2hpbGRyZW59PC9lbT47XG5jb25zdCBTdHJpa2V0aHJvdWdoID0gcHJvcHMgPT4gPHM+e3Byb3BzLmNoaWxkcmVufTwvcz47XG5jb25zdCBDb2RlID0gcHJvcHMgPT4gPFN0eWxlZENvZGU+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkQ29kZT47XG5cbi8qKlxuICogTm9kZSBDb21wb25lbnRzXG4gKi9cbmNvbnN0IFBhcmFncmFwaCA9IHByb3BzID0+IDxTdHlsZWRQIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRQPjtcbmNvbnN0IExpc3RJdGVtID0gcHJvcHMgPT4gPFN0eWxlZExpIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRMaT47XG5jb25zdCBRdW90ZSA9IHByb3BzID0+IDxTdHlsZWRCbG9ja1F1b3RlIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRCbG9ja1F1b3RlPjtcbmNvbnN0IENvZGVCbG9jayA9IHByb3BzID0+IChcbiAgPFN0eWxlZFByZT5cbiAgICA8U3R5bGVkQ29kZSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkQ29kZT5cbiAgPC9TdHlsZWRQcmU+XG4pO1xuY29uc3QgSGVhZGluZ09uZSA9IHByb3BzID0+IDxTdHlsZWRIMSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDE+O1xuY29uc3QgSGVhZGluZ1R3byA9IHByb3BzID0+IDxTdHlsZWRIMiB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDI+O1xuY29uc3QgSGVhZGluZ1RocmVlID0gcHJvcHMgPT4gPFN0eWxlZEgzIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRIMz47XG5jb25zdCBIZWFkaW5nRm91ciA9IHByb3BzID0+IDxTdHlsZWRINCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDQ+O1xuY29uc3QgSGVhZGluZ0ZpdmUgPSBwcm9wcyA9PiA8U3R5bGVkSDUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEg1PjtcbmNvbnN0IEhlYWRpbmdTaXggPSBwcm9wcyA9PiA8U3R5bGVkSDYgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEg2PjtcbmNvbnN0IFRhYmxlID0gcHJvcHMgPT4gKFxuICA8U3R5bGVkVGFibGU+XG4gICAgPHRib2R5IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC90Ym9keT5cbiAgPC9TdHlsZWRUYWJsZT5cbik7XG5jb25zdCBUYWJsZVJvdyA9IHByb3BzID0+IDx0ciB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdHI+O1xuY29uc3QgVGFibGVDZWxsID0gcHJvcHMgPT4gPFN0eWxlZFRkIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRUZD47XG5jb25zdCBUaGVtYXRpY0JyZWFrID0gcHJvcHMgPT4gKFxuICA8U3R5bGVkSHJcbiAgICB7Li4ucHJvcHMuYXR0cmlidXRlc31cbiAgICBjc3M9e1xuICAgICAgcHJvcHMuZWRpdG9yLmlzU2VsZWN0ZWQocHJvcHMubm9kZSkgJiZcbiAgICAgIGNzc2BcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB4ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgICAgY29sb3I6ICR7Y29sb3JzLmFjdGl2ZX07XG4gICAgICBgXG4gICAgfVxuICAvPlxuKTtcbmNvbnN0IEJyZWFrID0gcHJvcHMgPT4gPGJyIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSAvPjtcbmNvbnN0IEJ1bGxldGVkTGlzdCA9IHByb3BzID0+IDxTdHlsZWRVbCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkVWw+O1xuY29uc3QgTnVtYmVyZWRMaXN0ID0gcHJvcHMgPT4gKFxuICA8U3R5bGVkT2wgey4uLnByb3BzLmF0dHJpYnV0ZXN9IHN0YXJ0PXtwcm9wcy5ub2RlLmRhdGEuZ2V0KCdzdGFydCcpIHx8IDF9PlxuICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgPC9TdHlsZWRPbD5cbik7XG5jb25zdCBMaW5rID0gcHJvcHMgPT4ge1xuICBjb25zdCBkYXRhID0gcHJvcHMubm9kZS5nZXQoJ2RhdGEnKTtcbiAgY29uc3QgdXJsID0gZGF0YS5nZXQoJ3VybCcpO1xuICBjb25zdCB0aXRsZSA9IGRhdGEuZ2V0KCd0aXRsZScpO1xuICByZXR1cm4gKFxuICAgIDxTdHlsZWRBIGhyZWY9e3VybH0gdGl0bGU9e3RpdGxlfSB7Li4ucHJvcHMuYXR0cmlidXRlc30+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9TdHlsZWRBPlxuICApO1xufTtcblxuY29uc3QgSW1hZ2UgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IGRhdGEgPSBwcm9wcy5ub2RlLmdldCgnZGF0YScpO1xuICBjb25zdCBtYXJrcyA9IGRhdGEuZ2V0KCdtYXJrcycpO1xuICBjb25zdCB1cmwgPSBkYXRhLmdldCgndXJsJyk7XG4gIGNvbnN0IHRpdGxlID0gZGF0YS5nZXQoJ3RpdGxlJyk7XG4gIGNvbnN0IGFsdCA9IGRhdGEuZ2V0KCdhbHQnKTtcbiAgY29uc3QgaW1hZ2UgPSA8aW1nIHNyYz17dXJsfSB0aXRsZT17dGl0bGV9IGFsdD17YWx0fSB7Li4ucHJvcHMuYXR0cmlidXRlc30gLz47XG4gIGNvbnN0IHJlc3VsdCA9ICFtYXJrc1xuICAgID8gaW1hZ2VcbiAgICA6IG1hcmtzLnJlZHVjZSgoYWNjLCBtYXJrKSA9PiB7XG4gICAgICAgIHJldHVybiByZW5kZXJNYXJrKHsgbWFyaywgY2hpbGRyZW46IGFjYyB9KTtcbiAgICAgIH0sIGltYWdlKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXJNYXJrID0gKCkgPT4gcHJvcHMgPT4ge1xuICBzd2l0Y2ggKHByb3BzLm1hcmsudHlwZSkge1xuICAgIGNhc2UgJ2JvbGQnOlxuICAgICAgcmV0dXJuIDxCb2xkIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaXRhbGljJzpcbiAgICAgIHJldHVybiA8SXRhbGljIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnc3RyaWtldGhyb3VnaCc6XG4gICAgICByZXR1cm4gPFN0cmlrZXRocm91Z2ggey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdjb2RlJzpcbiAgICAgIHJldHVybiA8Q29kZSB7Li4ucHJvcHN9IC8+O1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVySW5saW5lID0gKCkgPT4gcHJvcHMgPT4ge1xuICBzd2l0Y2ggKHByb3BzLm5vZGUudHlwZSkge1xuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgcmV0dXJuIDxMaW5rIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgcmV0dXJuIDxJbWFnZSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2JyZWFrJzpcbiAgICAgIHJldHVybiA8QnJlYWsgey4uLnByb3BzfSAvPjtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJlbmRlckJsb2NrID0gKHsgY2xhc3NOYW1lV3JhcHBlciwgY29kZUJsb2NrQ29tcG9uZW50IH0pID0+IHByb3BzID0+IHtcbiAgc3dpdGNoIChwcm9wcy5ub2RlLnR5cGUpIHtcbiAgICBjYXNlICdwYXJhZ3JhcGgnOlxuICAgICAgcmV0dXJuIDxQYXJhZ3JhcGggey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdsaXN0LWl0ZW0nOlxuICAgICAgcmV0dXJuIDxMaXN0SXRlbSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3F1b3RlJzpcbiAgICAgIHJldHVybiA8UXVvdGUgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdjb2RlLWJsb2NrJzpcbiAgICAgIGlmIChjb2RlQmxvY2tDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8Vm9pZEJsb2NrIHsuLi5wcm9wc30+XG4gICAgICAgICAgICA8U2hvcnRjb2RlXG4gICAgICAgICAgICAgIGNsYXNzTmFtZVdyYXBwZXI9e2NsYXNzTmFtZVdyYXBwZXJ9XG4gICAgICAgICAgICAgIHR5cGVPdmVybG9hZD1cImNvZGUtYmxvY2tcIlxuICAgICAgICAgICAgICBkYXRhS2V5PXtmYWxzZX1cbiAgICAgICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1ZvaWRCbG9jaz5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiA8Q29kZUJsb2NrIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaGVhZGluZy1vbmUnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nT25lIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaGVhZGluZy10d28nOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nVHdvIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaGVhZGluZy10aHJlZSc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdUaHJlZSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2hlYWRpbmctZm91cic6XG4gICAgICByZXR1cm4gPEhlYWRpbmdGb3VyIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaGVhZGluZy1maXZlJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ0ZpdmUgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdoZWFkaW5nLXNpeCc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdTaXggey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICd0YWJsZSc6XG4gICAgICByZXR1cm4gPFRhYmxlIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGFibGUtcm93JzpcbiAgICAgIHJldHVybiA8VGFibGVSb3cgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICd0YWJsZS1jZWxsJzpcbiAgICAgIHJldHVybiA8VGFibGVDZWxsIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGhlbWF0aWMtYnJlYWsnOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgIDxUaGVtYXRpY0JyZWFrIGVkaXRvcj17cHJvcHMuZWRpdG9yfSBub2RlPXtwcm9wcy5ub2RlfSAvPlxuICAgICAgICA8L1ZvaWRCbG9jaz5cbiAgICAgICk7XG4gICAgY2FzZSAnYnVsbGV0ZWQtbGlzdCc6XG4gICAgICByZXR1cm4gPEJ1bGxldGVkTGlzdCB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ251bWJlcmVkLWxpc3QnOlxuICAgICAgcmV0dXJuIDxOdW1iZXJlZExpc3Qgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdzaG9ydGNvZGUnOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgIDxTaG9ydGNvZGUgY2xhc3NOYW1lV3JhcHBlcj17Y2xhc3NOYW1lV3JhcHBlcn0gey4uLnByb3BzfSAvPlxuICAgICAgICA8L1ZvaWRCbG9jaz5cbiAgICAgICk7XG4gIH1cbn07XG4iXX0= */"));
const StyledH2 = (0, _styledBase.default)("h2", {
  target: "e19otniy1",
  label: "StyledH2"
})(headerStyles, ";font-size:24px;margin-top:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH3 = (0, _styledBase.default)("h3", {
  target: "e19otniy2",
  label: "StyledH3"
})(headerStyles, ";font-size:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH4 = (0, _styledBase.default)("h4", {
  target: "e19otniy3",
  label: "StyledH4"
})(headerStyles, ";font-size:18px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH5 = (0, _styledBase.default)("h5", {
  target: "e19otniy4",
  label: "StyledH5"
})(headerStyles, ";font-size:16px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH6 = StyledH5.withComponent('h6', {
  target: "e19otniy15",
  label: "StyledH6"
});
const StyledP = (0, _styledBase.default)("p", {
  target: "e19otniy5",
  label: "StyledP"
})("margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledBlockQuote = (0, _styledBase.default)("blockquote", {
  target: "e19otniy6",
  label: "StyledBlockQuote"
})("padding-left:16px;border-left:3px solid ", _netlifyCmsUiDefault.colors.background, ";margin-left:0;margin-right:0;margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledPre = (0, _styledBase.default)("pre", {
  target: "e19otniy7",
  label: "StyledPre"
})("margin-bottom:", bottomMargin, ";white-space:pre-wrap;& > code{display:block;width:100%;overflow-y:auto;background-color:#000;color:#ccc;border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";padding:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledCode = (0, _styledBase.default)("code", {
  target: "e19otniy8",
  label: "StyledCode"
})("background-color:", _netlifyCmsUiDefault.colors.background, ";border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";padding:0 2px;font-size:85%;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledUl = (0, _styledBase.default)("ul", {
  target: "e19otniy9",
  label: "StyledUl"
})("margin-bottom:", bottomMargin, ";padding-left:30px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledOl = StyledUl.withComponent('ol', {
  target: "e19otniy16",
  label: "StyledOl"
});
const StyledLi = (0, _styledBase.default)("li", {
  target: "e19otniy10",
  label: "StyledLi"
})(process.env.NODE_ENV === "production" ? {
  name: "1eoco3j",
  styles: "& > p:first-child{margin-top:8px;}& > p:last-child{margin-bottom:8px;}"
} : {
  name: "1eoco3j",
  styles: "& > p:first-child{margin-top:8px;}& > p:last-child{margin-bottom:8px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledA = (0, _styledBase.default)("a", {
  target: "e19otniy11",
  label: "StyledA"
})(process.env.NODE_ENV === "production" ? {
  name: "1081t4c",
  styles: "text-decoration:underline;"
} : {
  name: "1081t4c",
  styles: "text-decoration:underline;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvcmVuZGVyZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlHd0IiLCJmaWxlIjoiLi4vLi4vLi4vc3JjL01hcmtkb3duQ29udHJvbC9yZW5kZXJlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9kaXNwbGF5LW5hbWUgKi9cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbG9ycywgbGVuZ3RocyB9IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IFZvaWRCbG9jayBmcm9tICcuL2NvbXBvbmVudHMvVm9pZEJsb2NrJztcbmltcG9ydCBTaG9ydGNvZGUgZnJvbSAnLi9jb21wb25lbnRzL1Nob3J0Y29kZSc7XG5cbmNvbnN0IGJvdHRvbU1hcmdpbiA9ICcxNnB4JztcblxuY29uc3QgaGVhZGVyU3R5bGVzID0gYFxuICBmb250LXdlaWdodDogNzAwO1xuICBsaW5lLWhlaWdodDogMTtcbmA7XG5cbmNvbnN0IFN0eWxlZEgxID0gc3R5bGVkLmgxYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMzJweDtcbiAgbWFyZ2luLXRvcDogMTZweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEgyID0gc3R5bGVkLmgyYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgbWFyZ2luLXRvcDogMTJweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEgzID0gc3R5bGVkLmgzYFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMjBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZEg0ID0gc3R5bGVkLmg0YFxuICAke2hlYWRlclN0eWxlc307XG4gIGZvbnQtc2l6ZTogMThweDtcbiAgbWFyZ2luLXRvcDogOHB4O1xuYDtcblxuY29uc3QgU3R5bGVkSDUgPSBzdHlsZWQuaDVgXG4gICR7aGVhZGVyU3R5bGVzfTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBtYXJnaW4tdG9wOiA4cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRINiA9IFN0eWxlZEg1LndpdGhDb21wb25lbnQoJ2g2Jyk7XG5cbmNvbnN0IFN0eWxlZFAgPSBzdHlsZWQucGBcbiAgbWFyZ2luLWJvdHRvbTogJHtib3R0b21NYXJnaW59O1xuYDtcblxuY29uc3QgU3R5bGVkQmxvY2tRdW90ZSA9IHN0eWxlZC5ibG9ja3F1b3RlYFxuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XG4gIGJvcmRlci1sZWZ0OiAzcHggc29saWQgJHtjb2xvcnMuYmFja2dyb3VuZH07XG4gIG1hcmdpbi1sZWZ0OiAwO1xuICBtYXJnaW4tcmlnaHQ6IDA7XG4gIG1hcmdpbi1ib3R0b206ICR7Ym90dG9tTWFyZ2lufTtcbmA7XG5cbmNvbnN0IFN0eWxlZFByZSA9IHN0eWxlZC5wcmVgXG4gIG1hcmdpbi1ib3R0b206ICR7Ym90dG9tTWFyZ2lufTtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuXG4gICYgPiBjb2RlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gICAgY29sb3I6ICNjY2M7XG4gICAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gICAgcGFkZGluZzogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgU3R5bGVkQ29kZSA9IHN0eWxlZC5jb2RlYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIHBhZGRpbmc6IDAgMnB4O1xuICBmb250LXNpemU6IDg1JTtcbmA7XG5cbmNvbnN0IFN0eWxlZFVsID0gc3R5bGVkLnVsYFxuICBtYXJnaW4tYm90dG9tOiAke2JvdHRvbU1hcmdpbn07XG4gIHBhZGRpbmctbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IFN0eWxlZE9sID0gU3R5bGVkVWwud2l0aENvbXBvbmVudCgnb2wnKTtcblxuY29uc3QgU3R5bGVkTGkgPSBzdHlsZWQubGlgXG4gICYgPiBwOmZpcnN0LWNoaWxkIHtcbiAgICBtYXJnaW4tdG9wOiA4cHg7XG4gIH1cblxuICAmID4gcDpsYXN0LWNoaWxkIHtcbiAgICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFN0eWxlZEEgPSBzdHlsZWQuYWBcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG5gO1xuXG5jb25zdCBTdHlsZWRIciA9IHN0eWxlZC5ocmBcbiAgYm9yZGVyOiAxcHggc29saWQ7XG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRUYWJsZSA9IHN0eWxlZC50YWJsZWBcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbmA7XG5cbmNvbnN0IFN0eWxlZFRkID0gc3R5bGVkLnRkYFxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcbiAgcGFkZGluZzogOHB4O1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuYDtcblxuLyoqXG4gKiBTbGF0ZSB1c2VzIFJlYWN0IGNvbXBvbmVudHMgdG8gcmVuZGVyIGVhY2ggdHlwZSBvZiBub2RlIHRoYXQgaXQgcmVjZWl2ZXMuXG4gKiBUaGlzIGlzIHRoZSBjbG9zZXN0IHRoaW5nIFNsYXRlIGhhcyB0byBhIHNjaGVtYSBkZWZpbml0aW9uLiBUaGUgdHlwZXMgYXJlIHNldFxuICogYnkgdXMgd2hlbiB3ZSBtYW51YWxseSBkZXNlcmlhbGl6ZSBmcm9tIFJlbWFyaydzIE1EQVNUIHRvIFNsYXRlJ3MgQVNULlxuICovXG5cbi8qKlxuICogTWFyayBDb21wb25lbnRzXG4gKi9cbmNvbnN0IEJvbGQgPSBwcm9wcyA9PiA8c3Ryb25nPntwcm9wcy5jaGlsZHJlbn08L3N0cm9uZz47XG5jb25zdCBJdGFsaWMgPSBwcm9wcyA9PiA8ZW0+e3Byb3BzLmNoaWxkcmVufTwvZW0+O1xuY29uc3QgU3RyaWtldGhyb3VnaCA9IHByb3BzID0+IDxzPntwcm9wcy5jaGlsZHJlbn08L3M+O1xuY29uc3QgQ29kZSA9IHByb3BzID0+IDxTdHlsZWRDb2RlPntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+O1xuXG4vKipcbiAqIE5vZGUgQ29tcG9uZW50c1xuICovXG5jb25zdCBQYXJhZ3JhcGggPSBwcm9wcyA9PiA8U3R5bGVkUCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkUD47XG5jb25zdCBMaXN0SXRlbSA9IHByb3BzID0+IDxTdHlsZWRMaSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkTGk+O1xuY29uc3QgUXVvdGUgPSBwcm9wcyA9PiA8U3R5bGVkQmxvY2tRdW90ZSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkQmxvY2tRdW90ZT47XG5jb25zdCBDb2RlQmxvY2sgPSBwcm9wcyA9PiAoXG4gIDxTdHlsZWRQcmU+XG4gICAgPFN0eWxlZENvZGUgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENvZGU+XG4gIDwvU3R5bGVkUHJlPlxuKTtcbmNvbnN0IEhlYWRpbmdPbmUgPSBwcm9wcyA9PiA8U3R5bGVkSDEgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgxPjtcbmNvbnN0IEhlYWRpbmdUd28gPSBwcm9wcyA9PiA8U3R5bGVkSDIgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEgyPjtcbmNvbnN0IEhlYWRpbmdUaHJlZSA9IHByb3BzID0+IDxTdHlsZWRIMyB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkSDM+O1xuY29uc3QgSGVhZGluZ0ZvdXIgPSBwcm9wcyA9PiA8U3R5bGVkSDQgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZEg0PjtcbmNvbnN0IEhlYWRpbmdGaXZlID0gcHJvcHMgPT4gPFN0eWxlZEg1IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRINT47XG5jb25zdCBIZWFkaW5nU2l4ID0gcHJvcHMgPT4gPFN0eWxlZEg2IHsuLi5wcm9wcy5hdHRyaWJ1dGVzfT57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRINj47XG5jb25zdCBUYWJsZSA9IHByb3BzID0+IChcbiAgPFN0eWxlZFRhYmxlPlxuICAgIDx0Ym9keSB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvdGJvZHk+XG4gIDwvU3R5bGVkVGFibGU+XG4pO1xuY29uc3QgVGFibGVSb3cgPSBwcm9wcyA9PiA8dHIgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L3RyPjtcbmNvbnN0IFRhYmxlQ2VsbCA9IHByb3BzID0+IDxTdHlsZWRUZCB7Li4ucHJvcHMuYXR0cmlidXRlc30+e3Byb3BzLmNoaWxkcmVufTwvU3R5bGVkVGQ+O1xuY29uc3QgVGhlbWF0aWNCcmVhayA9IHByb3BzID0+IChcbiAgPFN0eWxlZEhyXG4gICAgey4uLnByb3BzLmF0dHJpYnV0ZXN9XG4gICAgY3NzPXtcbiAgICAgIHByb3BzLmVkaXRvci5pc1NlbGVjdGVkKHByb3BzLm5vZGUpICYmXG4gICAgICBjc3NgXG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDJweCAke2NvbG9ycy5hY3RpdmV9O1xuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICAgICAgYFxuICAgIH1cbiAgLz5cbik7XG5jb25zdCBCcmVhayA9IHByb3BzID0+IDxiciB7Li4ucHJvcHMuYXR0cmlidXRlc30gLz47XG5jb25zdCBCdWxsZXRlZExpc3QgPSBwcm9wcyA9PiA8U3R5bGVkVWwgey4uLnByb3BzLmF0dHJpYnV0ZXN9Pntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZFVsPjtcbmNvbnN0IE51bWJlcmVkTGlzdCA9IHByb3BzID0+IChcbiAgPFN0eWxlZE9sIHsuLi5wcm9wcy5hdHRyaWJ1dGVzfSBzdGFydD17cHJvcHMubm9kZS5kYXRhLmdldCgnc3RhcnQnKSB8fCAxfT5cbiAgICB7cHJvcHMuY2hpbGRyZW59XG4gIDwvU3R5bGVkT2w+XG4pO1xuY29uc3QgTGluayA9IHByb3BzID0+IHtcbiAgY29uc3QgZGF0YSA9IHByb3BzLm5vZGUuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IHVybCA9IGRhdGEuZ2V0KCd1cmwnKTtcbiAgY29uc3QgdGl0bGUgPSBkYXRhLmdldCgndGl0bGUnKTtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkQSBocmVmPXt1cmx9IHRpdGxlPXt0aXRsZX0gey4uLnByb3BzLmF0dHJpYnV0ZXN9PlxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvU3R5bGVkQT5cbiAgKTtcbn07XG5cbmNvbnN0IEltYWdlID0gcHJvcHMgPT4ge1xuICBjb25zdCBkYXRhID0gcHJvcHMubm9kZS5nZXQoJ2RhdGEnKTtcbiAgY29uc3QgbWFya3MgPSBkYXRhLmdldCgnbWFya3MnKTtcbiAgY29uc3QgdXJsID0gZGF0YS5nZXQoJ3VybCcpO1xuICBjb25zdCB0aXRsZSA9IGRhdGEuZ2V0KCd0aXRsZScpO1xuICBjb25zdCBhbHQgPSBkYXRhLmdldCgnYWx0Jyk7XG4gIGNvbnN0IGltYWdlID0gPGltZyBzcmM9e3VybH0gdGl0bGU9e3RpdGxlfSBhbHQ9e2FsdH0gey4uLnByb3BzLmF0dHJpYnV0ZXN9IC8+O1xuICBjb25zdCByZXN1bHQgPSAhbWFya3NcbiAgICA/IGltYWdlXG4gICAgOiBtYXJrcy5yZWR1Y2UoKGFjYywgbWFyaykgPT4ge1xuICAgICAgICByZXR1cm4gcmVuZGVyTWFyayh7IG1hcmssIGNoaWxkcmVuOiBhY2MgfSk7XG4gICAgICB9LCBpbWFnZSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyTWFyayA9ICgpID0+IHByb3BzID0+IHtcbiAgc3dpdGNoIChwcm9wcy5tYXJrLnR5cGUpIHtcbiAgICBjYXNlICdib2xkJzpcbiAgICAgIHJldHVybiA8Qm9sZCB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2l0YWxpYyc6XG4gICAgICByZXR1cm4gPEl0YWxpYyB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3N0cmlrZXRocm91Z2gnOlxuICAgICAgcmV0dXJuIDxTdHJpa2V0aHJvdWdoIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnY29kZSc6XG4gICAgICByZXR1cm4gPENvZGUgey4uLnByb3BzfSAvPjtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJlbmRlcklubGluZSA9ICgpID0+IHByb3BzID0+IHtcbiAgc3dpdGNoIChwcm9wcy5ub2RlLnR5cGUpIHtcbiAgICBjYXNlICdsaW5rJzpcbiAgICAgIHJldHVybiA8TGluayB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2ltYWdlJzpcbiAgICAgIHJldHVybiA8SW1hZ2Ugey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdicmVhayc6XG4gICAgICByZXR1cm4gPEJyZWFrIHsuLi5wcm9wc30gLz47XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXJCbG9jayA9ICh7IGNsYXNzTmFtZVdyYXBwZXIsIGNvZGVCbG9ja0NvbXBvbmVudCB9KSA9PiBwcm9wcyA9PiB7XG4gIHN3aXRjaCAocHJvcHMubm9kZS50eXBlKSB7XG4gICAgY2FzZSAncGFyYWdyYXBoJzpcbiAgICAgIHJldHVybiA8UGFyYWdyYXBoIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnbGlzdC1pdGVtJzpcbiAgICAgIHJldHVybiA8TGlzdEl0ZW0gey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdxdW90ZSc6XG4gICAgICByZXR1cm4gPFF1b3RlIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnY29kZS1ibG9jayc6XG4gICAgICBpZiAoY29kZUJsb2NrQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPFZvaWRCbG9jayB7Li4ucHJvcHN9PlxuICAgICAgICAgICAgPFNob3J0Y29kZVxuICAgICAgICAgICAgICBjbGFzc05hbWVXcmFwcGVyPXtjbGFzc05hbWVXcmFwcGVyfVxuICAgICAgICAgICAgICB0eXBlT3ZlcmxvYWQ9XCJjb2RlLWJsb2NrXCJcbiAgICAgICAgICAgICAgZGF0YUtleT17ZmFsc2V9XG4gICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gPENvZGVCbG9jayB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2hlYWRpbmctb25lJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ09uZSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2hlYWRpbmctdHdvJzpcbiAgICAgIHJldHVybiA8SGVhZGluZ1R3byB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2hlYWRpbmctdGhyZWUnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nVGhyZWUgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdoZWFkaW5nLWZvdXInOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nRm91ciB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ2hlYWRpbmctZml2ZSc6XG4gICAgICByZXR1cm4gPEhlYWRpbmdGaXZlIHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnaGVhZGluZy1zaXgnOlxuICAgICAgcmV0dXJuIDxIZWFkaW5nU2l4IHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGFibGUnOlxuICAgICAgcmV0dXJuIDxUYWJsZSB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3RhYmxlLXJvdyc6XG4gICAgICByZXR1cm4gPFRhYmxlUm93IHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAndGFibGUtY2VsbCc6XG4gICAgICByZXR1cm4gPFRhYmxlQ2VsbCB7Li4ucHJvcHN9IC8+O1xuICAgIGNhc2UgJ3RoZW1hdGljLWJyZWFrJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxWb2lkQmxvY2sgey4uLnByb3BzfT5cbiAgICAgICAgICA8VGhlbWF0aWNCcmVhayBlZGl0b3I9e3Byb3BzLmVkaXRvcn0gbm9kZT17cHJvcHMubm9kZX0gLz5cbiAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICApO1xuICAgIGNhc2UgJ2J1bGxldGVkLWxpc3QnOlxuICAgICAgcmV0dXJuIDxCdWxsZXRlZExpc3Qgey4uLnByb3BzfSAvPjtcbiAgICBjYXNlICdudW1iZXJlZC1saXN0JzpcbiAgICAgIHJldHVybiA8TnVtYmVyZWRMaXN0IHsuLi5wcm9wc30gLz47XG4gICAgY2FzZSAnc2hvcnRjb2RlJzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxWb2lkQmxvY2sgey4uLnByb3BzfT5cbiAgICAgICAgICA8U2hvcnRjb2RlIGNsYXNzTmFtZVdyYXBwZXI9e2NsYXNzTmFtZVdyYXBwZXJ9IHsuLi5wcm9wc30gLz5cbiAgICAgICAgPC9Wb2lkQmxvY2s+XG4gICAgICApO1xuICB9XG59O1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledHr = (0, _styledBase.default)("hr", {
  target: "e19otniy12",
  label: "StyledHr"
})(process.env.NODE_ENV === "production" ? {
  name: "pqqqdc",
  styles: "border:1px solid;margin-bottom:16px;"
} : {
  name: "pqqqdc",
  styles: "border:1px solid;margin-bottom:16px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTable = (0, _styledBase.default)("table", {
  target: "e19otniy13",
  label: "StyledTable"
})(process.env.NODE_ENV === "production" ? {
  name: "1uhv8nx",
  styles: "border-collapse:collapse;"
} : {
  name: "1uhv8nx",
  styles: "border-collapse:collapse;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTd = (0, _styledBase.default)("td", {
  target: "e19otniy14",
  label: "StyledTd"
})(process.env.NODE_ENV === "production" ? {
  name: "1fi1vzc",
  styles: "border:2px solid black;padding:8px;text-align:left;"
} : {
  name: "1fi1vzc",
  styles: "border:2px solid black;padding:8px;text-align:left;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
/**
 * Slate uses React components to render each type of node that it receives.
 * This is the closest thing Slate has to a schema definition. The types are set
 * by us when we manually deserialize from Remark's MDAST to Slate's AST.
 */

/**
 * Mark Components
 */

const Bold = props => (0, _core.jsx)("strong", null, props.children);

const Italic = props => (0, _core.jsx)("em", null, props.children);

const Strikethrough = props => (0, _core.jsx)("s", null, props.children);

const Code = props => (0, _core.jsx)(StyledCode, null, props.children);
/**
 * Node Components
 */


const Paragraph = props => (0, _core.jsx)(StyledP, props.attributes, props.children);

const ListItem = props => (0, _core.jsx)(StyledLi, props.attributes, props.children);

const Quote = props => (0, _core.jsx)(StyledBlockQuote, props.attributes, props.children);

const CodeBlock = props => (0, _core.jsx)(StyledPre, null, (0, _core.jsx)(StyledCode, props.attributes, props.children));

const HeadingOne = props => (0, _core.jsx)(StyledH1, props.attributes, props.children);

const HeadingTwo = props => (0, _core.jsx)(StyledH2, props.attributes, props.children);

const HeadingThree = props => (0, _core.jsx)(StyledH3, props.attributes, props.children);

const HeadingFour = props => (0, _core.jsx)(StyledH4, props.attributes, props.children);

const HeadingFive = props => (0, _core.jsx)(StyledH5, props.attributes, props.children);

const HeadingSix = props => (0, _core.jsx)(StyledH6, props.attributes, props.children);

const Table = props => (0, _core.jsx)(StyledTable, null, (0, _core.jsx)("tbody", props.attributes, props.children));

const TableRow = props => (0, _core.jsx)("tr", props.attributes, props.children);

const TableCell = props => (0, _core.jsx)(StyledTd, props.attributes, props.children);

const ThematicBreak = props => (0, _core.jsx)(StyledHr, _extends({}, props.attributes, {
  css: props.editor.isSelected(props.node) && /*#__PURE__*/(0, _core.css)("box-shadow:0 0 0 2px ", _netlifyCmsUiDefault.colors.active, ";border-radius:8px;color:", _netlifyCmsUiDefault.colors.active, ";;label:ThematicBreak;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
}));

const Break = props => (0, _core.jsx)("br", props.attributes);

const BulletedList = props => (0, _core.jsx)(StyledUl, props.attributes, props.children);

const NumberedList = props => (0, _core.jsx)(StyledOl, _extends({}, props.attributes, {
  start: props.node.data.get('start') || 1
}), props.children);

const Link = props => {
  const data = props.node.get('data');
  const url = data.get('url');
  const title = data.get('title');
  return (0, _core.jsx)(StyledA, _extends({
    href: url,
    title: title
  }, props.attributes), props.children);
};

const Image = props => {
  const data = props.node.get('data');
  const marks = data.get('marks');
  const url = data.get('url');
  const title = data.get('title');
  const alt = data.get('alt');
  const image = (0, _core.jsx)("img", _extends({
    src: url,
    title: title,
    alt: alt
  }, props.attributes));
  const result = !marks ? image : marks.reduce((acc, mark) => {
    return renderMark({
      mark,
      children: acc
    });
  }, image);
  return result;
};

const renderMark = () => props => {
  switch (props.mark.type) {
    case 'bold':
      return (0, _core.jsx)(Bold, props);

    case 'italic':
      return (0, _core.jsx)(Italic, props);

    case 'strikethrough':
      return (0, _core.jsx)(Strikethrough, props);

    case 'code':
      return (0, _core.jsx)(Code, props);
  }
};

exports.renderMark = renderMark;

const renderInline = () => props => {
  switch (props.node.type) {
    case 'link':
      return (0, _core.jsx)(Link, props);

    case 'image':
      return (0, _core.jsx)(Image, props);

    case 'break':
      return (0, _core.jsx)(Break, props);
  }
};

exports.renderInline = renderInline;

const renderBlock = ({
  classNameWrapper,
  codeBlockComponent
}) => props => {
  switch (props.node.type) {
    case 'paragraph':
      return (0, _core.jsx)(Paragraph, props);

    case 'list-item':
      return (0, _core.jsx)(ListItem, props);

    case 'quote':
      return (0, _core.jsx)(Quote, props);

    case 'code-block':
      if (codeBlockComponent) {
        return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(_Shortcode.default, _extends({
          classNameWrapper: classNameWrapper,
          typeOverload: "code-block",
          dataKey: false
        }, props)));
      }

      return (0, _core.jsx)(CodeBlock, props);

    case 'heading-one':
      return (0, _core.jsx)(HeadingOne, props);

    case 'heading-two':
      return (0, _core.jsx)(HeadingTwo, props);

    case 'heading-three':
      return (0, _core.jsx)(HeadingThree, props);

    case 'heading-four':
      return (0, _core.jsx)(HeadingFour, props);

    case 'heading-five':
      return (0, _core.jsx)(HeadingFive, props);

    case 'heading-six':
      return (0, _core.jsx)(HeadingSix, props);

    case 'table':
      return (0, _core.jsx)(Table, props);

    case 'table-row':
      return (0, _core.jsx)(TableRow, props);

    case 'table-cell':
      return (0, _core.jsx)(TableCell, props);

    case 'thematic-break':
      return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(ThematicBreak, {
        editor: props.editor,
        node: props.node
      }));

    case 'bulleted-list':
      return (0, _core.jsx)(BulletedList, props);

    case 'numbered-list':
      return (0, _core.jsx)(NumberedList, props);

    case 'shortcode':
      return (0, _core.jsx)(_VoidBlock.default, props, (0, _core.jsx)(_Shortcode.default, _extends({
        classNameWrapper: classNameWrapper
      }, props)));
  }
};

exports.renderBlock = renderBlock;